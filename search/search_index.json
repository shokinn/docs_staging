{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome my Docs \u00b6 These docs are written in Markdown and generated to a Wiki with MkDocs . The used theme is Material for MkDocs . Here you can find the docs to my Projects. Sincerely Yours, Philip","title":"Home"},{"location":"#welcome-my-docs","text":"These docs are written in Markdown and generated to a Wiki with MkDocs . The used theme is Material for MkDocs . Here you can find the docs to my Projects. Sincerely Yours, Philip","title":"Welcome my Docs"},{"location":"imprint/","text":"Impressum \u00b6 Angaben gem\u00e4\u00df \u00a7 5 TMG: \u00b6 Philip Henning Hallesches Ufer 28 10963 Berlin Kontakt: \u00b6 Telefon: +49 (0) 172 724 1337 Telefax: +49 (0) 3222 9349378 E-Mail: mail+imprint@philip-henning.com Verantwortlich f\u00fcr den Inhalt nach \u00a7 55 Abs. 2 RStV: \u00b6 Philip Henning Hallesches Ufer 28 10963 Berlin Quelle: Impressum-Generator von anwalt.de","title":"Imprint"},{"location":"imprint/#impressum","text":"","title":"Impressum"},{"location":"imprint/#angaben-gema-5-tmg","text":"Philip Henning Hallesches Ufer 28 10963 Berlin","title":"Angaben gem\u00e4\u00df \u00a7 5 TMG:"},{"location":"imprint/#kontakt","text":"Telefon: +49 (0) 172 724 1337 Telefax: +49 (0) 3222 9349378 E-Mail: mail+imprint@philip-henning.com","title":"Kontakt:"},{"location":"imprint/#verantwortlich-fur-den-inhalt-nach-55-abs-2-rstv","text":"Philip Henning Hallesches Ufer 28 10963 Berlin Quelle: Impressum-Generator von anwalt.de","title":"Verantwortlich f\u00fcr den Inhalt nach \u00a7 55 Abs. 2 RStV:"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2017 Philip Henning Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2017 Philip Henning Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/","text":"Arch Linux Dell XPS 15 (9560) \u00b6 Pre-installation \u00b6 UEFI \u00b6 Before installing it is necessary to modify some UEFI Settings. They can be accessed by pressing the F2 key repeatedly when booting. Change the SATA Mode from the default \"RAID\" to \"AHCI\". This will allow Linux to detect the NVME SSD. If dual booting with an existing Windows installation, Windows will not boot after the change but this can be fixed without a reinstallation. Change Fastboot to \"Thorough\" in \"POST Behaviour\". This prevents intermittent boot failures. Disable secure boot to allow Linux to boot. Installation of Arch Linux can proceed normally. Refer to the Installation guide for more information. Change Keyboard layout \u00b6 If you don't have an EN:Intl. Keyboard layout you should change it to your layout. In my case it is de-latin1-nodeadkeys1 . loadkeys de-latin1-nodeadkeys1 Connect to a wireless network during installation (temporary) \u00b6 Change to TTY2 with ALT + F2 and use the following example to connect to your network. wpa_supplicant -D nl80211,ext -i wlp2s0 -c <(wpa_passphrase 'YourWififNetwork' 'YourWifiPassword') Afterwards you establish the connection change back to TTY1 with ALT + F1 . Update the system clock \u00b6 Use timedatectl(1) to ensure the system clock is accurate: # timedatectl set-ntp true # systemctl start sysdemd-timesyncd To check the service status, use timedatectl status. Installation \u00b6 Preparing Disks \u00b6 I'll encrypt my Data so my Partition layout looks like this: +----------------+----------------+----------------+-----------------------------------------------------------------------------------------------+ | | | | | | | | | | | | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | | | | | /dev/mapper/swap | /dev/mapper/tmp | /dev/mapper/root | /dev/mapper/home | | | | |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | | | | | | | | | | | | 16 GiB | 30 GiB | 50 GiB | 100%FREE | | | | | Logical volume1 | Logical volume2 | Logical volume3 | Logical volume4 | | | | | /dev/mapper/osvg-swap | /dev/mapper/osvg-tmp | /dev/mapper/osvg-root | /dev/mapper/osvg-home | | | | EF02 |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | EF00 | 8300 | 8 MiB | | | 500 MiB | 500 MiB | BIOS | 8E00 | | EFI partition | boot partition | Boot partition | 100%FREE | | /dev/nvme0n1p1 | /dev/nvme0n1p2 | /dev/nvme0n1p3 | /dev/nvme0n1p4 | +----------------+----------------+----------------+-----------------------------------------------------------------------------------------------+ Create these partitions with gdisk so that you have GPT instead of MBR . Wipe Data on all partitions \u00b6 # dd if=/dev/zero of=/dev/nvme0n1p1 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p2 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p3 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p4 bs=1M status=progress Preparing the logical volumes \u00b6 # pvcreate /dev/nvme0n1p4 # vgcreate osvg /dev/nvme0n1p4 # lvcreate -L 16G -n swap osvg # lvcreate -L 30G -n tmp osvg # lvcreate -L 50G -n root osvg # lvcreate -l 100%FREE -n home osvg Setup LUKS for our partitions \u00b6 Create an encrypted root with a key you can remember. # cryptsetup luksFormat /dev/mapper/osvg-root Open the root filesystem to create an encryption key for all other partitions. # cryptsetup luksOpen /dev/mapper/osvg-root root # mkfs.ext4 /dev/mapper/root # mnt /dev/mapper/root /mnt # mkdir -pm 700 /mnt/etc/luks-keys # dd if=/dev/random of=/mnt/etc/luks-keys/home bs=1 count=1024 status=progress # chmod 000 /mnt/etc/luks-keys/home Use the encrypted key to create our encrypted home and add a pass phrase for emergency access: # cryptsetup luksFormat /dev/mapper/osvg-home # cryptsetup luksAddKey /dev/mapper/osvg-home --key-file=/mnt/etc/luks-keys/home Now we open home, make a filesystem and mount it to /mnt/home . # cryptsetup luksOpen --key-file=/mnt/etc/luks-keys/home /dev/mapper/osvg-home home # mkfs.ext4 /dev/mapper/home # mkdir -p /mnt/home # mount /dev/mapper/home /mnt/home and rebuild the EFI and boot partition: # mkfs.vfat /dev/nvme0n1p1 # mkfs.ext4 /dev/nvme0n1p2 Setup and mount the boot/EFI partition: # mkdir /mnt/boot # mount /dev/nvme0n1p2 /mnt/boot # mkdir /mnt/boot/EFI # mkdir /mnt/esp # mount /dev/nvme0n1p1 /mnt/esp Install Arch \u00b6 Sort mirrors by speed \u00b6 The pacman package provides a Bash script, /usr/bin/rankmirrors , which can be used to rank the mirrors according to their connection and opening speeds to take advantage of using the fastest local mirror. Back up the existing /etc/pacman.d/mirrorlist : # cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak Edit /etc/pacman.d/mirrorlist.bak and uncomment mirrors for testing with rankmirrors . Run the following sed line to uncomment every mirror: # sed -i 's/^Server/#Server/' /etc/pacman.d/mirrorlist.bak Finally, rank the mirrors. Operand -n 6 means only output the 6 fastest mirrors: # rankmirrors -n 6 /etc/pacman.d/mirrorlist.bak > /etc/pacman.d/mirrorlist Install the base packages \u00b6 Use the pacstrap script to install the base package group: # pacstrap /mnt base This group does not include all tools from the live installation, such as btrfs-progs or specific wireless firmware; see packages.both for comparison. To install packages and other groups such as base-devel , append the names to pacstrap (space separated) or to individual pacman commands after the #Chroot step. Configure the system \u00b6 Gen fstab \u00b6 Generate an fstab file (use -U or -L to define by UUID or labels, respectively): # genfstab -U /mnt >> /mnt/etc/fstab Check the resulting file in /mnt/etc/fstab afterwards, and edit it in case of errors. Add the following at the end of the /mnt/etc/fstab configuration. /dev/mapper/tmp /tmp tmpfs defaults 0 0 /dev/mapper/swap none swap sw 0 0 /esp/EFI /boot/EFI none defaults,bind 0 0 Modify /mnt/etc/crypttab \u00b6 Add these at the end to the /mnt/etc/crypttab . swap /dev/mapper/MyVol-swap /dev/urandom swap,cipher=aes-xts-plain64,size=256 tmp /dev/mapper/MyVol-tmp /dev/urandom tmp,cipher=aes-xts-plain64,size=256 home /dev/mapper/MyVol-home /etc/luks-keys/home Chroot \u00b6 Change root into the new system: # arch-chroot /mnt Uncomment pacman multilib option \u00b6 In /etc/pacman.conf uncomment the following lines. [...] [multilib] Include = /etc/pacman.d/mirrorlist [...] Install Packages \u00b6 pacman -Sy pacman -S base-devel grub efibootmgr dialog networkmanager network-manager-applet wireless_tools intel-ucode zsh w3m vim powertop bc Create my User \u00b6 useradd -m -G wheel,audio,video,users,uucp,disk,optical,storage,rfkill -s /bin/zsh phg passwd phg Disable root login \u00b6 # passwd -l root Allow group wheel so user sudo \u00b6 Uncomment %wheel ALL=(ALL) ALL . Use visudo to edit the /etc/sudoers file. Keep http_proxy variables \u00b6 Add the following at the end of the 'Defaults' section. Defaults env_keep += \"http_proxy\" Defaults env_keep += \"https_proxy\" Install yaourt \u00b6 Zuerst muss das Paket package-query installiert werden, denn yaourt beruht darauf: # curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/package-query.tar.gz # tar -xvzf package-query.tar.gz # cd package-query # sudo -u phg makepkg -si Danach wechselt man wieder ins n\u00e4chst h\u00f6here Verzeichnis und installiert yaourt: # cd .. # curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/yaourt.tar.gz # tar -xvzf yaourt.tar.gz # cd yaourt # sudo -u phg makepkg -si Time zone \u00b6 Set the time zone: # ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime Run hwclock(8) to generate /etc/adjtime: # hwclock --systohc This command assumes the hardware clock is set to UTC. See Time#Time standard for details. Enable timedated service: # systemctl enable sysdemd-timesyncd Locale \u00b6 Uncomment the following localizations in /etc/locale.gen : [...] de_DE.UTF-8 UTF-8 de_DE ISO-8859-1 [...] en_US.UTF-8 UTF-8 en_US ISO-8859-1 [...] and generate them with: # locale-gen Set the LANG variable in locale.conf(5) accordingly, for example: /etc/locale.conf LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_TIME=de_DE.UTF-8 LC_CTYPE=en_US.UTF-8 LC_COLLATE=C LC_MONETARY=de_DE.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=de_DE.UTF-8 LC_NAME=de_DE.UTF-8 LC_ADDRESS=de_DE.UTF-8 LC_TELEPHONE=de_DE.UTF-8 LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=de_DE.UTF-8 Setup console \u00b6 Install console powerline font \u00b6 Install the console powerline fonts. # yaourt -S powerline-console-fonts ttf-ms-fonts Edit the /etc/vconsole.conf file and add the following to the TOP of the file: FONT=ter-powerline-v14n [...] Set keymap \u00b6 If you set the keyboard layout, make the changes persistent in vconsole.conf(5) : /etc/vconsole.conf [...] KEYMAP=de-latin1-nodeadkeys Hostname \u00b6 Create the hostname(5) file: /etc/hostname yoetunheimr Consider adding a matching entry to hosts(5) : /etc/hosts 127.0.0.1 localhost.localdomain localhost ::1 localhost.localdomain localhost 127.0.1.1 yoetunheimr.sao.local yoetunheimr See also Network configuration#Set the hostname . Edit mkinitpico \u00b6 Add the keyboard , keymap , lvm2 and encrypt hooks to mkinitcpio.conf : /etc/mkinitcpio.conf : HOOKS=(... keyboard keymap block lvm2 encrypt ... filesystems ...) Generate initramfs \u00b6 # mkinitcpio -p linux Install GRUB \u00b6 # grub-install --target=x86_64-efi --efi-directory=/esp --bootloader-id=grub # mount --bind /esp/EFI /boot/EFI Configuring the boot loader \u00b6 In order to unlock the encrypted root partition at boot, the following kernel parameters need to be set by the boot loader ( /etc/default/grub ): GRUB_CMDLINE_LINUX_DEFAULT=\"quiet acpi_rev_override=1 pci=nommconf\" GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root\" ??? Note 'Command explanation' * acpi_rev_override=1 is needed to get the NVIDIA graphics card working resp. to disable it. * The kernel option pci=nommconf disables Memory-Mapped PCI Configuration Space, which is available in Linux since kernel 2.6. Very roughly, all PCI devices have an area that describe this device (which you see with lspci -vv), and the originally method to access this area involves going through I/O ports, while PCIe allows this space to be mapped to memory for simpler access. * cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root configures the crypt device. Generate GRUB config \u00b6 # grub-mkconfig -o /boot/grub/grub.cfg See Dm-crypt/System configuration#Boot loader for details. Reboot into the installed system \u00b6 Leave the chroot environment. exit Unmount all partitions and reboot. # umount -R /mnt # reboot Post installation configuration \u00b6 Get graphicscard and X working \u00b6 ACPI Override \u00b6 Add these to the kernel parameter in the /etc/default/grub configuration. GRUB_CMDLINE_LINUX_DEFAULT=\"[...] acpi_rev_override=1\" Now rebuild the GRUB configuration. # grub-mkconfig -o /boot/grub/grub.cfg Install graphic card tools \u00b6 # pacman -S bbswitch bumblebee primus lib32-primus Use libglvnd as libgl provider. Enable the bumblebee service. # systemctl enable bumblebeed.service Afterwards reboot the system. Tip You may need to reboot twice for the firmware to notice acpi_rev_override . Graphics card drivers/utils \u00b6 # yaourt -Sy # yaourt -S nvidia-beta nvidia-utils-beta lib32-nvidia-utils-beta Install X \u00b6 # pacman -S xorg xorg-xinit xf86-input-synaptics Install login manager \u00b6 # pacman -S lightdm # yaourt -S lightdm-webkit-theme-litarvan # systemctl enable lightdm Enable Webkit2 greeter \u00b6 Create the lightdm.conf.d folder: # mkdir /etc/lightdm/lightdm.conf.d/ Set the default greeter by adding the following LightDM configuration file, like so: /etc/lightdm/lightdm.conf.d/50-lightdm-webkit2-greeter.conf [Seat:*] greeter-session=lightdm-webkit2-greeter LightDM Webkit2 theme 'litarvan' \u00b6 Edit the file /etc/lightdm/lightdm-webkit2-greeter.conf and set the \" webkit-theme \" property to \" litarvan \", like so: [...] webkit_theme = litarvan [...] BSPWM Session \u00b6 Change X keyboard layout to german \u00b6 /etc/X11/xorg.conf.d/00-keyboard.conf Section \"InputClass\" Identifier \"keyboard\" MatchIsKeyboard \"yes\" Option \"XkbLayout\" \"de\" Option \"XkbVariant\" \"nodeadkeys\" EndSection Add Touchpad options \u00b6 /etc/X11/xorg.conf.d/50-synaptics.conf : Section \"InputClass\" Identifier \"touchpad catchall\" Driver \"synaptics\" MatchIsTouchpad \"on\" # enable clik zone and configure 3 buttons on bottom Option \"ClickPad\" \"1\" Option \"SoftButtonAreas\" \"60% 0 82% 0 40% 60% 82% 0\" # other commons options than you may want to configure # scroll with two fingers (enabled vertically, disabled horizontally) Option \"VertTwoFingerScroll\" \"1\" Option \"HorizTwoFingerScroll\" \"0\" # enable natural scrolling Option \"VertScrollDelta\" \"-111\" Option \"HorizScrollDelta\" \"-111\" # enable tap as click: 1 finger -> left button, 2 fingers -> right, 3 fingers -> middle Option \"TapButton1\" \"1\" Option \"TapButton2\" \"3\" Option \"TapButton3\" \"2\" # idem but for click with 1,2,3 fingers. Use \"0\" to disable. Option \"ClickFinger1\" \"1\" Option \"ClickFinger2\" \"3\" Option \"ClickFinger3\" \"2\" # palm detection. These parameters somehow works, YMMV. Option \"PalmDetect\" \"1\" Option \"PalmMinWidth\" \"10\" Option \"PalmMinZ\" \"200\" EndSection Install xorg-xbacklight replacement \u00b6 Note xorg-xbacklight does not work with the modesetting driver! # yaourt -S acpilight Add the following file /etc/udev/rules.d/90-backlight.rules : SUBSYSTEM==\"backlight\", ACTION==\"add\", \\ RUN+=\"/bin/chgrp video %S%p/brightness\", \\ RUN+=\"/bin/chmod g+w %S%p/brightness\" Window manager \u00b6 Install bspwm, sxhkd, feh and fonts + dependencies. # pacman -S bspwm sxhkd feh i3lock # yaourt -S polybar Get my dot files \u00b6 Clone my dotfiles. # pacman -Sy # pacman -S git python-pip # cd ~ # git clone git@github.com:shokinn/.files.git ~/.files # cd .files # sudo pip install -r dotdrop/requirements.txt # alias dotdrop='eval $(grep -v \"^#\" ~/dotfiles/.env.public) ~/dotfiles/dotdrop.sh' # dotdrop install Enable lockscreen at suspend \u00b6 Create a service file /etc/systemd/system/i3lock@.service : [Unit] Description=Lock the screen on resume from suspend Before=sleep.target [Service] User=%I Type=forking Environment=DISPLAY=:0 ExecStart=/home/%I/.config/bspwm/lock.sh [Install] WantedBy=suspend.target Enable the service # systemctl daemon-reload # systemctl enable i3lock@phg Make powertop optimazations permanent \u00b6 /etc/systemd/system/powertop.service : [Unit] Description=PowerTOP auto tune [Service] Type=idle Environment=\"TERM=dumb\" ExecStart=/usr/sbin/powertop --auto-tune [Install] WantedBy=multi-user.target # systemctl daemon-reload # systemctl enable powertop.service Enable network manager \u00b6 # systemctl enable NetworkManager Install packages \u00b6 # pacman -S firefox \\ alsa-utils \\ alsa-tools \\ alsa-plagins \\ pulseaudio \\ pulseaudio-alsa \\ exfat-utils \\ openssh \\ net-tools \\ keepass \\ keepass-plugin-keeagent \\ inkscape \\ gimp \\ vlc \\ qt4 \\ libsecret \\ gnome-keyring \\ libgnome-keyring \\ thunderbird \\ pinentry \\ gpa \\ dmenu \\ mc \\ nemo \\ nemo-fileroller \\ nemo-image-converter \\ nemo-preview \\ nemo-seahorse \\ nemo-share \\ linux-headers \\ wireguard-dkms \\ wireguard-tools \\ wmname # gpg --recv-keys --keyserver sks-keyservers.net 0xDB1187B9DD5F693B # yaourt -S tldr \\ keepass-plugin-rpc \\ keepass-plugin-haveibeenpwned \\ keepass-plugin-http \\ keepass2-plugin-tray-icon \\ nextcloud-client-git \\ rambox \\ crossover \\ thunderbird-enigmail \\ gtkhash-nemo \\ nemo-compare Enable SSH-Agent Serive \u00b6 # systemctl --user daemon-reload # systemctl --user enable ssh-agent.service # systemctl --user start ssh-agent.service TODO \u00b6 Crypto fixen Use an Hardware device for 2 nd Factor authentication Maybe use TOTP as 2 nd Factor? Audio (Mic) Get external Microphones working!","title":"Arch Linux"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#arch-linux-dell-xps-15-9560","text":"","title":"Arch Linux Dell XPS 15 (9560)"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#pre-installation","text":"","title":"Pre-installation"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#uefi","text":"Before installing it is necessary to modify some UEFI Settings. They can be accessed by pressing the F2 key repeatedly when booting. Change the SATA Mode from the default \"RAID\" to \"AHCI\". This will allow Linux to detect the NVME SSD. If dual booting with an existing Windows installation, Windows will not boot after the change but this can be fixed without a reinstallation. Change Fastboot to \"Thorough\" in \"POST Behaviour\". This prevents intermittent boot failures. Disable secure boot to allow Linux to boot. Installation of Arch Linux can proceed normally. Refer to the Installation guide for more information.","title":"UEFI"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#change-keyboard-layout","text":"If you don't have an EN:Intl. Keyboard layout you should change it to your layout. In my case it is de-latin1-nodeadkeys1 . loadkeys de-latin1-nodeadkeys1","title":"Change Keyboard layout"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#connect-to-a-wireless-network-during-installation-temporary","text":"Change to TTY2 with ALT + F2 and use the following example to connect to your network. wpa_supplicant -D nl80211,ext -i wlp2s0 -c <(wpa_passphrase 'YourWififNetwork' 'YourWifiPassword') Afterwards you establish the connection change back to TTY1 with ALT + F1 .","title":"Connect to a wireless network during installation (temporary)"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#update-the-system-clock","text":"Use timedatectl(1) to ensure the system clock is accurate: # timedatectl set-ntp true # systemctl start sysdemd-timesyncd To check the service status, use timedatectl status.","title":"Update the system clock"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#installation","text":"","title":"Installation"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#preparing-disks","text":"I'll encrypt my Data so my Partition layout looks like this: +----------------+----------------+----------------+-----------------------------------------------------------------------------------------------+ | | | | | | | | | | | | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | | | | | /dev/mapper/swap | /dev/mapper/tmp | /dev/mapper/root | /dev/mapper/home | | | | |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | | | | | | | | | | | | 16 GiB | 30 GiB | 50 GiB | 100%FREE | | | | | Logical volume1 | Logical volume2 | Logical volume3 | Logical volume4 | | | | | /dev/mapper/osvg-swap | /dev/mapper/osvg-tmp | /dev/mapper/osvg-root | /dev/mapper/osvg-home | | | | EF02 |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | EF00 | 8300 | 8 MiB | | | 500 MiB | 500 MiB | BIOS | 8E00 | | EFI partition | boot partition | Boot partition | 100%FREE | | /dev/nvme0n1p1 | /dev/nvme0n1p2 | /dev/nvme0n1p3 | /dev/nvme0n1p4 | +----------------+----------------+----------------+-----------------------------------------------------------------------------------------------+ Create these partitions with gdisk so that you have GPT instead of MBR .","title":"Preparing Disks"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#wipe-data-on-all-partitions","text":"# dd if=/dev/zero of=/dev/nvme0n1p1 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p2 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p3 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p4 bs=1M status=progress","title":"Wipe Data on all partitions"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#preparing-the-logical-volumes","text":"# pvcreate /dev/nvme0n1p4 # vgcreate osvg /dev/nvme0n1p4 # lvcreate -L 16G -n swap osvg # lvcreate -L 30G -n tmp osvg # lvcreate -L 50G -n root osvg # lvcreate -l 100%FREE -n home osvg","title":"Preparing the logical volumes"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#setup-luks-for-our-partitions","text":"Create an encrypted root with a key you can remember. # cryptsetup luksFormat /dev/mapper/osvg-root Open the root filesystem to create an encryption key for all other partitions. # cryptsetup luksOpen /dev/mapper/osvg-root root # mkfs.ext4 /dev/mapper/root # mnt /dev/mapper/root /mnt # mkdir -pm 700 /mnt/etc/luks-keys # dd if=/dev/random of=/mnt/etc/luks-keys/home bs=1 count=1024 status=progress # chmod 000 /mnt/etc/luks-keys/home Use the encrypted key to create our encrypted home and add a pass phrase for emergency access: # cryptsetup luksFormat /dev/mapper/osvg-home # cryptsetup luksAddKey /dev/mapper/osvg-home --key-file=/mnt/etc/luks-keys/home Now we open home, make a filesystem and mount it to /mnt/home . # cryptsetup luksOpen --key-file=/mnt/etc/luks-keys/home /dev/mapper/osvg-home home # mkfs.ext4 /dev/mapper/home # mkdir -p /mnt/home # mount /dev/mapper/home /mnt/home and rebuild the EFI and boot partition: # mkfs.vfat /dev/nvme0n1p1 # mkfs.ext4 /dev/nvme0n1p2 Setup and mount the boot/EFI partition: # mkdir /mnt/boot # mount /dev/nvme0n1p2 /mnt/boot # mkdir /mnt/boot/EFI # mkdir /mnt/esp # mount /dev/nvme0n1p1 /mnt/esp","title":"Setup LUKS for our partitions"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-arch","text":"","title":"Install Arch"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#sort-mirrors-by-speed","text":"The pacman package provides a Bash script, /usr/bin/rankmirrors , which can be used to rank the mirrors according to their connection and opening speeds to take advantage of using the fastest local mirror. Back up the existing /etc/pacman.d/mirrorlist : # cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak Edit /etc/pacman.d/mirrorlist.bak and uncomment mirrors for testing with rankmirrors . Run the following sed line to uncomment every mirror: # sed -i 's/^Server/#Server/' /etc/pacman.d/mirrorlist.bak Finally, rank the mirrors. Operand -n 6 means only output the 6 fastest mirrors: # rankmirrors -n 6 /etc/pacman.d/mirrorlist.bak > /etc/pacman.d/mirrorlist","title":"Sort mirrors by speed"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-the-base-packages","text":"Use the pacstrap script to install the base package group: # pacstrap /mnt base This group does not include all tools from the live installation, such as btrfs-progs or specific wireless firmware; see packages.both for comparison. To install packages and other groups such as base-devel , append the names to pacstrap (space separated) or to individual pacman commands after the #Chroot step.","title":"Install the base packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#configure-the-system","text":"","title":"Configure the system"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#gen-fstab","text":"Generate an fstab file (use -U or -L to define by UUID or labels, respectively): # genfstab -U /mnt >> /mnt/etc/fstab Check the resulting file in /mnt/etc/fstab afterwards, and edit it in case of errors. Add the following at the end of the /mnt/etc/fstab configuration. /dev/mapper/tmp /tmp tmpfs defaults 0 0 /dev/mapper/swap none swap sw 0 0 /esp/EFI /boot/EFI none defaults,bind 0 0","title":"Gen fstab"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#modify-mntetccrypttab","text":"Add these at the end to the /mnt/etc/crypttab . swap /dev/mapper/MyVol-swap /dev/urandom swap,cipher=aes-xts-plain64,size=256 tmp /dev/mapper/MyVol-tmp /dev/urandom tmp,cipher=aes-xts-plain64,size=256 home /dev/mapper/MyVol-home /etc/luks-keys/home","title":"Modify /mnt/etc/crypttab"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#chroot","text":"Change root into the new system: # arch-chroot /mnt","title":"Chroot"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#uncomment-pacman-multilib-option","text":"In /etc/pacman.conf uncomment the following lines. [...] [multilib] Include = /etc/pacman.d/mirrorlist [...]","title":"Uncomment pacman multilib option"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-packages","text":"pacman -Sy pacman -S base-devel grub efibootmgr dialog networkmanager network-manager-applet wireless_tools intel-ucode zsh w3m vim powertop bc","title":"Install Packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#create-my-user","text":"useradd -m -G wheel,audio,video,users,uucp,disk,optical,storage,rfkill -s /bin/zsh phg passwd phg","title":"Create my User"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#disable-root-login","text":"# passwd -l root","title":"Disable root login"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#allow-group-wheel-so-user-sudo","text":"Uncomment %wheel ALL=(ALL) ALL . Use visudo to edit the /etc/sudoers file.","title":"Allow group wheel so user sudo"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#keep-http_proxy-variables","text":"Add the following at the end of the 'Defaults' section. Defaults env_keep += \"http_proxy\" Defaults env_keep += \"https_proxy\"","title":"Keep http_proxy variables"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-yaourt","text":"Zuerst muss das Paket package-query installiert werden, denn yaourt beruht darauf: # curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/package-query.tar.gz # tar -xvzf package-query.tar.gz # cd package-query # sudo -u phg makepkg -si Danach wechselt man wieder ins n\u00e4chst h\u00f6here Verzeichnis und installiert yaourt: # cd .. # curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/yaourt.tar.gz # tar -xvzf yaourt.tar.gz # cd yaourt # sudo -u phg makepkg -si","title":"Install yaourt"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#time-zone","text":"Set the time zone: # ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime Run hwclock(8) to generate /etc/adjtime: # hwclock --systohc This command assumes the hardware clock is set to UTC. See Time#Time standard for details. Enable timedated service: # systemctl enable sysdemd-timesyncd","title":"Time zone"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#locale","text":"Uncomment the following localizations in /etc/locale.gen : [...] de_DE.UTF-8 UTF-8 de_DE ISO-8859-1 [...] en_US.UTF-8 UTF-8 en_US ISO-8859-1 [...] and generate them with: # locale-gen Set the LANG variable in locale.conf(5) accordingly, for example: /etc/locale.conf LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_TIME=de_DE.UTF-8 LC_CTYPE=en_US.UTF-8 LC_COLLATE=C LC_MONETARY=de_DE.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=de_DE.UTF-8 LC_NAME=de_DE.UTF-8 LC_ADDRESS=de_DE.UTF-8 LC_TELEPHONE=de_DE.UTF-8 LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=de_DE.UTF-8","title":"Locale"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#setup-console","text":"","title":"Setup console"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-console-powerline-font","text":"Install the console powerline fonts. # yaourt -S powerline-console-fonts ttf-ms-fonts Edit the /etc/vconsole.conf file and add the following to the TOP of the file: FONT=ter-powerline-v14n [...]","title":"Install console powerline font"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#set-keymap","text":"If you set the keyboard layout, make the changes persistent in vconsole.conf(5) : /etc/vconsole.conf [...] KEYMAP=de-latin1-nodeadkeys","title":"Set keymap"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#hostname","text":"Create the hostname(5) file: /etc/hostname yoetunheimr Consider adding a matching entry to hosts(5) : /etc/hosts 127.0.0.1 localhost.localdomain localhost ::1 localhost.localdomain localhost 127.0.1.1 yoetunheimr.sao.local yoetunheimr See also Network configuration#Set the hostname .","title":"Hostname"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#edit-mkinitpico","text":"Add the keyboard , keymap , lvm2 and encrypt hooks to mkinitcpio.conf : /etc/mkinitcpio.conf : HOOKS=(... keyboard keymap block lvm2 encrypt ... filesystems ...)","title":"Edit mkinitpico"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#generate-initramfs","text":"# mkinitcpio -p linux","title":"Generate initramfs"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-grub","text":"# grub-install --target=x86_64-efi --efi-directory=/esp --bootloader-id=grub # mount --bind /esp/EFI /boot/EFI","title":"Install GRUB"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#configuring-the-boot-loader","text":"In order to unlock the encrypted root partition at boot, the following kernel parameters need to be set by the boot loader ( /etc/default/grub ): GRUB_CMDLINE_LINUX_DEFAULT=\"quiet acpi_rev_override=1 pci=nommconf\" GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root\" ??? Note 'Command explanation' * acpi_rev_override=1 is needed to get the NVIDIA graphics card working resp. to disable it. * The kernel option pci=nommconf disables Memory-Mapped PCI Configuration Space, which is available in Linux since kernel 2.6. Very roughly, all PCI devices have an area that describe this device (which you see with lspci -vv), and the originally method to access this area involves going through I/O ports, while PCIe allows this space to be mapped to memory for simpler access. * cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root configures the crypt device.","title":"Configuring the boot loader"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#generate-grub-config","text":"# grub-mkconfig -o /boot/grub/grub.cfg See Dm-crypt/System configuration#Boot loader for details.","title":"Generate GRUB config"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#reboot-into-the-installed-system","text":"Leave the chroot environment. exit Unmount all partitions and reboot. # umount -R /mnt # reboot","title":"Reboot into the installed system"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#post-installation-configuration","text":"","title":"Post installation configuration"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#get-graphicscard-and-x-working","text":"","title":"Get graphicscard and X working"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#acpi-override","text":"Add these to the kernel parameter in the /etc/default/grub configuration. GRUB_CMDLINE_LINUX_DEFAULT=\"[...] acpi_rev_override=1\" Now rebuild the GRUB configuration. # grub-mkconfig -o /boot/grub/grub.cfg","title":"ACPI Override"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-graphic-card-tools","text":"# pacman -S bbswitch bumblebee primus lib32-primus Use libglvnd as libgl provider. Enable the bumblebee service. # systemctl enable bumblebeed.service Afterwards reboot the system. Tip You may need to reboot twice for the firmware to notice acpi_rev_override .","title":"Install graphic card tools"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#graphics-card-driversutils","text":"# yaourt -Sy # yaourt -S nvidia-beta nvidia-utils-beta lib32-nvidia-utils-beta","title":"Graphics card drivers/utils"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-x","text":"# pacman -S xorg xorg-xinit xf86-input-synaptics","title":"Install X"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-login-manager","text":"# pacman -S lightdm # yaourt -S lightdm-webkit-theme-litarvan # systemctl enable lightdm","title":"Install login manager"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#enable-webkit2-greeter","text":"Create the lightdm.conf.d folder: # mkdir /etc/lightdm/lightdm.conf.d/ Set the default greeter by adding the following LightDM configuration file, like so: /etc/lightdm/lightdm.conf.d/50-lightdm-webkit2-greeter.conf [Seat:*] greeter-session=lightdm-webkit2-greeter","title":"Enable Webkit2 greeter"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#lightdm-webkit2-theme-litarvan","text":"Edit the file /etc/lightdm/lightdm-webkit2-greeter.conf and set the \" webkit-theme \" property to \" litarvan \", like so: [...] webkit_theme = litarvan [...]","title":"LightDM Webkit2 theme 'litarvan'"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#bspwm-session","text":"","title":"BSPWM Session"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#change-x-keyboard-layout-to-german","text":"/etc/X11/xorg.conf.d/00-keyboard.conf Section \"InputClass\" Identifier \"keyboard\" MatchIsKeyboard \"yes\" Option \"XkbLayout\" \"de\" Option \"XkbVariant\" \"nodeadkeys\" EndSection","title":"Change X keyboard layout to german"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#add-touchpad-options","text":"/etc/X11/xorg.conf.d/50-synaptics.conf : Section \"InputClass\" Identifier \"touchpad catchall\" Driver \"synaptics\" MatchIsTouchpad \"on\" # enable clik zone and configure 3 buttons on bottom Option \"ClickPad\" \"1\" Option \"SoftButtonAreas\" \"60% 0 82% 0 40% 60% 82% 0\" # other commons options than you may want to configure # scroll with two fingers (enabled vertically, disabled horizontally) Option \"VertTwoFingerScroll\" \"1\" Option \"HorizTwoFingerScroll\" \"0\" # enable natural scrolling Option \"VertScrollDelta\" \"-111\" Option \"HorizScrollDelta\" \"-111\" # enable tap as click: 1 finger -> left button, 2 fingers -> right, 3 fingers -> middle Option \"TapButton1\" \"1\" Option \"TapButton2\" \"3\" Option \"TapButton3\" \"2\" # idem but for click with 1,2,3 fingers. Use \"0\" to disable. Option \"ClickFinger1\" \"1\" Option \"ClickFinger2\" \"3\" Option \"ClickFinger3\" \"2\" # palm detection. These parameters somehow works, YMMV. Option \"PalmDetect\" \"1\" Option \"PalmMinWidth\" \"10\" Option \"PalmMinZ\" \"200\" EndSection","title":"Add Touchpad options"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-xorg-xbacklight-replacement","text":"Note xorg-xbacklight does not work with the modesetting driver! # yaourt -S acpilight Add the following file /etc/udev/rules.d/90-backlight.rules : SUBSYSTEM==\"backlight\", ACTION==\"add\", \\ RUN+=\"/bin/chgrp video %S%p/brightness\", \\ RUN+=\"/bin/chmod g+w %S%p/brightness\"","title":"Install xorg-xbacklight replacement"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#window-manager","text":"Install bspwm, sxhkd, feh and fonts + dependencies. # pacman -S bspwm sxhkd feh i3lock # yaourt -S polybar","title":"Window manager"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#get-my-dot-files","text":"Clone my dotfiles. # pacman -Sy # pacman -S git python-pip # cd ~ # git clone git@github.com:shokinn/.files.git ~/.files # cd .files # sudo pip install -r dotdrop/requirements.txt # alias dotdrop='eval $(grep -v \"^#\" ~/dotfiles/.env.public) ~/dotfiles/dotdrop.sh' # dotdrop install","title":"Get my dot files"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#enable-lockscreen-at-suspend","text":"Create a service file /etc/systemd/system/i3lock@.service : [Unit] Description=Lock the screen on resume from suspend Before=sleep.target [Service] User=%I Type=forking Environment=DISPLAY=:0 ExecStart=/home/%I/.config/bspwm/lock.sh [Install] WantedBy=suspend.target Enable the service # systemctl daemon-reload # systemctl enable i3lock@phg","title":"Enable lockscreen at suspend"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#make-powertop-optimazations-permanent","text":"/etc/systemd/system/powertop.service : [Unit] Description=PowerTOP auto tune [Service] Type=idle Environment=\"TERM=dumb\" ExecStart=/usr/sbin/powertop --auto-tune [Install] WantedBy=multi-user.target # systemctl daemon-reload # systemctl enable powertop.service","title":"Make powertop optimazations permanent"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#enable-network-manager","text":"# systemctl enable NetworkManager","title":"Enable network manager"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-packages_1","text":"# pacman -S firefox \\ alsa-utils \\ alsa-tools \\ alsa-plagins \\ pulseaudio \\ pulseaudio-alsa \\ exfat-utils \\ openssh \\ net-tools \\ keepass \\ keepass-plugin-keeagent \\ inkscape \\ gimp \\ vlc \\ qt4 \\ libsecret \\ gnome-keyring \\ libgnome-keyring \\ thunderbird \\ pinentry \\ gpa \\ dmenu \\ mc \\ nemo \\ nemo-fileroller \\ nemo-image-converter \\ nemo-preview \\ nemo-seahorse \\ nemo-share \\ linux-headers \\ wireguard-dkms \\ wireguard-tools \\ wmname # gpg --recv-keys --keyserver sks-keyservers.net 0xDB1187B9DD5F693B # yaourt -S tldr \\ keepass-plugin-rpc \\ keepass-plugin-haveibeenpwned \\ keepass-plugin-http \\ keepass2-plugin-tray-icon \\ nextcloud-client-git \\ rambox \\ crossover \\ thunderbird-enigmail \\ gtkhash-nemo \\ nemo-compare","title":"Install packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#enable-ssh-agent-serive","text":"# systemctl --user daemon-reload # systemctl --user enable ssh-agent.service # systemctl --user start ssh-agent.service","title":"Enable SSH-Agent Serive"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#todo","text":"Crypto fixen Use an Hardware device for 2 nd Factor authentication Maybe use TOTP as 2 nd Factor? Audio (Mic) Get external Microphones working!","title":"TODO"},{"location":"kb/change_tty/","text":"Change TTY \u00b6 With Keybindings \u00b6 From X to TTY \u00b6 Use: CTRL + ALT + F{1..n} From TTY to X \u00b6 Use: ALT + F{F1..n} With a shell command on a TTY \u00b6 Use: chvt 1..n","title":"How to change to TTYn"},{"location":"kb/change_tty/#change-tty","text":"","title":"Change TTY"},{"location":"kb/change_tty/#with-keybindings","text":"","title":"With Keybindings"},{"location":"kb/change_tty/#from-x-to-tty","text":"Use: CTRL + ALT + F{1..n}","title":"From X to TTY"},{"location":"kb/change_tty/#from-tty-to-x","text":"Use: ALT + F{F1..n}","title":"From TTY to X"},{"location":"kb/change_tty/#with-a-shell-command-on-a-tty","text":"Use: chvt 1..n","title":"With a shell command on a TTY"},{"location":"software/cemu_zelda_setup/","text":"Cemu Zelda - Breath of the Wild setup \u00b6 This is my documentation how to setup Cemu to play Zelda - Breath of the Wild . Overview \u00b6 Cemu v.1.11.1","title":"Cemu Zelda - Breath of the Wild setup"},{"location":"software/cemu_zelda_setup/#cemu-zelda-breath-of-the-wild-setup","text":"This is my documentation how to setup Cemu to play Zelda - Breath of the Wild .","title":"Cemu Zelda - Breath of the Wild setup"},{"location":"software/cemu_zelda_setup/#overview","text":"Cemu v.1.11.1","title":"Overview"},{"location":"software/concourse/","text":"Concourse \u00b6 OS: Ubuntu 16.04 LTS Initial Server setup \u00b6 Update System \u00b6 apt update && apt full-upgrade -y Edit .bashrc \u00b6 /root/.bashrc / /etc/skel/.bashrc : # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi Make vim colored with dark background settinfs \u00b6 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF Create a new user user \u00b6 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/ Change the SSH deamon to allow only SSH-keys \u00b6 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF Delete root's authorized_keys file \u00b6 Attention Please check before if you can login to the user user with your ssh-key! rm ~/.ssh/authorized_keys Important Log out and re login as user ! Install base packages \u00b6 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop Fix locale \u00b6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF PostgreSQL \u00b6 Install \u00b6 sudo apt install -y postgresql postgresql-contrib Configure \u00b6 Once the database software is installed, we will create a dedicated PostgreSQL user named concourse to manage the Concourse assets within the database system. To create this user, we will use sudo to act as the postgres system user, which has admin access to the database system: sudo -u postgres createuser concourse By default, Concourse attempts to connect to a database called atc . Concourse calls its main web and API hub the \"ATC\", which stands for \"air traffic control\". We can create this database and assign ownership to the concourse database user to provide appropriate access: sudo -u postgres createdb --owner=concourse atc Backup \u00b6 Concourse \u00b6 Install \u00b6 Download and install Concourse and fly: sudo wget -O /root/concourse_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/concourse_updater.sh && \\ sudo chmod u+x /root/concourse_updater.sh && \\ sudo /root/concourse_updater.sh; \\ sudo wget -O /root/fly_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/fly_updater.sh && \\ sudo chmod u+x /root/fly_updater.sh && \\ sudo /root/fly_updater.sh Configure \u00b6 Next, we can start to put together the configuration and keys that Concourse will use to start up. Before we begin, create a configuration directory where we can keep all of the relevant files: sudo mkdir /etc/concourse Creating the Key Files \u00b6 Concourse is composed of a few related components that all need to be able to communicate securely with one another. The ATC is the main hub that handles web and API requests and coordinates pipelines. Workers manage containers to run the CI/CD tasks defined in the pipeline. The TSA is a custom SSH server that securely registers workers with the ATC. Even though we will be running all of these components on a single server, the worker and TSA expect to communicate securely. To satisfy this expectation, we will create three sets of keys: a key pair for the TSA component a key pair for the worker a session signing key pair used to sign tokens for user sessions and TSA to ATC communication sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/tsa_host_key; \\ sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/worker_key; \\ sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/session_signing_key If we check in the concourse directory, we can see that three public and three private keys are now available: ls -l /etc/concourse Output: total 24 -rw------- 1 root root 1679 May 11 17:19 session_signing_key -rw-r--r-- 1 root root 394 May 11 17:19 session_signing_key.pub -rw------- 1 root root 1679 May 11 17:19 tsa_host_key -rw-r--r-- 1 root root 394 May 11 17:19 tsa_host_key.pub -rw------- 1 root root 1675 May 11 17:19 worker_key -rw-r--r-- 1 root root 394 May 11 17:19 worker_key.pub The TSA will decide which workers are authorized to connect to the system by checking an authorized key file. We need to pre-populate the authorized keys file with the worker's public key that we generated so that it can connect successfully. Since this is our only worker, we can just copy the file over: sudo cp /etc/concourse/worker_key.pub /etc/concourse/authorized_worker_keys Now that we have the key files and an initial file for authorized workers, we can create the files that will define our Concourse configuration. Creating the Environment Configuration Files \u00b6 The Concourse binary does not read from a configuration file natively. However, it can take configuration values from environment variables passed in when the process starts. In a moment, we will be creating systemd unit files to define and manage our Concourse services. The unit files can read environment variables from a file and pass them to the process as it starts. We will create a file that defines the variables for the Concourse web process, which start the ATC and TSA components, and another file for the Concourse worker process. Create a file for the web process. Inside, we will define the environment variables needed by the ATC and TSA components. Each variable begins with CONCOURSE_ . To start, we will define some static values that we don't need to modify. These variables will define the location of the private TSA and session keys, the file defining the authorized workers, and the PostgreSQL socket location: cat << EOF | sudo tee /etc/concourse/web_environment # These values can be used as-is CONCOURSE_SESSION_SIGNING_KEY=/etc/concourse/session_signing_key CONCOURSE_TSA_HOST_KEY=/etc/concourse/tsa_host_key CONCOURSE_TSA_AUTHORIZED_KEYS=/etc/concourse/authorized_worker_keys CONCOURSE_POSTGRES_SOCKET=/var/run/postgresql EOF Next, we'll set some variables that will need to be changed to match your environment. The CONCOURSE_EXTERNAL_URL defines the IP address and port that the service will bind to. Set this to your server's public IP address and port 8080. We will also set a username and password for the main team, which functions as the Concourse administrative group. You can select any username and password you'd like here. You can change the admin credentials at any time by modifying these values and restarting the service: while true; do \\ unset pw; \\ unset pw_confirm; \\ read -s -p \"Enter admin user password: \" pw; echo \"\" && \\ read -s -p \"Confirm admin user password: \" pw_confirm; echo \"\" && \\ if [[ \"$pw\" == \"$pw_confirm\" ]]; then \\ break; \\ else \\ echo \"Your passwords don't match. Try again!\"; \\ echo \"\"; \\ fi; \\ done; \\ read -p \"Enter the public URL for concours (without http(s)://): \" ext_url; \\ cat << EOF | sudo tee -a /etc/concourse/web_environment; \\ unset pw; \\ unset pw_confirm; \\ unset ext_url # Change these values to match your environment CONCOURSE_BASIC_AUTH_USERNAME=admin CONCOURSE_BASIC_AUTH_PASSWORD=$pw CONCOURSE_EXTERNAL_URL=https://$ext_url CONCOURSE_BIND_IP=127.0.0.1 EOF Next, create an environment file for the worker process. Inside, we will define the locations of the worker's private key, the TSA's public key, and the directory where the worker will store its files. We will also set the address where the TSA can be reached, which will be the localhost in our case. You can use the values below without modification: cat << EOF | sudo tee /etc/concourse/worker_environment # These values can be used as-is CONCOURSE_WORK_DIR=/var/lib/concourse CONCOURSE_TSA_WORKER_PRIVATE_KEY=/etc/concourse/worker_key CONCOURSE_TSA_PUBLIC_KEY=/etc/concourse/tsa_host_key.pub CONCOURSE_TSA_HOST=127.0.0.1:2222 EOF Creating a Dedicated System User and Adjusting Permissions \u00b6 Before we move on, we should create a dedicated Linux user to run the Concourse web process. This will allow us to start the web-facing service with limited privileges. Because of the way that PostgreSQL handles authentication by default, it is important that the username match the PostgreSQL username we created earlier. Create a system user and group called concourse by typing: sudo adduser --system --group concourse We can give the new user ownership over the /etc/concourse directory and its contents by typing: sudo chown -R concourse:concourse /etc/concourse The environment files contain some sensitive data like the administrative username and password for the CI server. Adjust the permissions of the environment files so that regular users cannot read or modify the values in those files: sudo chmod 600 /etc/concourse/*_environment Our configuration assets are now owned by the concourse system user with limited privileges for other users. Create Systemd Unit Files for the Web and Worker Processes \u00b6 We are now ready to define the Concourse CI unit files that will start and manage the application processes. We will create one file for the web process that handles the TSA and ATC components and one file for the worker process that handles containers for pipeline tasks. Creating the Concourse Web Unit File \u00b6 Start by creating a concourse-web.service file within the /etc/systemd/system file with the following content: cat << EOF | sudo tee /etc/systemd/system/concourse-web.service [Unit] Description=Concourse CI web process (ATC and TSA) After=postgresql.service [Service] User=concourse Restart=on-failure EnvironmentFile=/etc/concourse/web_environment ExecStart=/usr/local/bin/concourse web [Install] WantedBy=multi-user.target EOF The first section of the file sets the unit description for the web process and indicates that this unit should be started after the PostgreSQL unit when deciding on ordering. The [Service] section defines the way that the service will be run. We will run the service as the concourse user we configured earlier and we tell systemd to automatically restart the service if it fails, which can be useful if the process dies from memory constraints or similar issues. We load the web_environment file we defined earlier to establish the environment and we start the actual process by calling concourse web . The [Install] section tells systemd how to tie the unit to the system start order if we configure the service to start at boot. Creating the Concourse Worker Unit File \u00b6 Next, create a similar file to define the worker process with the following content: cat << EOF | sudo tee /etc/systemd/system/concourse-worker.service [Unit] Description=Concourse CI worker process After=concourse-web.service [Service] User=root Restart=on-failure EnvironmentFile=/etc/concourse/worker_environment ExecStart=/usr/local/bin/concourse worker [Install] WantedBy=multi-user.target EOF This unit functions similarly to the concourse-web unit. This time, we tell system to start the worker process after the Concourse web process has been started. The worker process is run as the root user instead of concourse because it requires administrative privileges for container management. We load the worker_environment file and use the concourse worker command to start the process. Start and enable the Services \u00b6 Reload the deamon files, start the services: sudo systemctl daemon-reload; \\ sudo systemctl start concourse-web concourse-worker; \\ sudo systemctl status concourse-web concourse-worker Check that both services read \"active (running)\" and that the log lines do not contain any obvious errors. Pay special attention to the web service to make sure that the log lines do not indicate problems connecting to the database. If the services started successfully, enable them so that they will start each time the server boots: sudo systemctl enable concourse-web concourse-worker Check Access On the Command Line \u00b6 Now that the Concourse services is running, we should check that we have access. Checking Access On the Command Line \u00b6 First, let's check that we can access the Concourse service with the fly command line client. We have to log in using the administrative username and password that we configured in the /etc/concourse/web_environment file using the login subcommand. A single fly binary can be used to contact and manage multiple Concourse servers, so the command uses a concept called \"targets\" as an alias for different servers. We will call our target \"local\" to log into the local Concourse server: fly -t local login -c http://127.0.0.1:8080 You will be prompted for the username and password for the main team, which we set in the web_environments file. After entering your credentials, \"target saved\" should be displayed: logging in to team 'main' username: admin password: target saved This indicates that we were able to log in successfully. While we are here, let's verify that the worker process was able to successfully register to the TSA component by typing: fly -t local workers Output: name containers platform tags team state version concourse-server 0 linux none none running 2.1 The fly command is used to configure pipelines and manage the Concourse CI service. The fly help command provides information about additional commands. Nginx \u00b6 Install \u00b6 Install all needed Packages for nginx tasks: sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx Configure \u00b6 Delete default entry \u00b6 sudo rm /etc/nginx/sites-enabled/default Add ssl_params \u00b6 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF General HTTP to HTTPS redirector \u00b6 This nginx entry will rewrite all traffic from HTTP to HTTPS. read -r -d '' read_tmp<<\"EOF\" server { \\tlisten 80 default_server; \\tlisten [::]:80 default_server; \\tserver_name _; \\treturn 301 https://$host$request_uri; } EOF echo -e \"$read_tmp\" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf Concourse \u00b6 Add server directive for Concourse: cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-ci.pphg.tech.conf && \\ sudo ln -s ../sites-available/10-ci.pphg.tech.conf /etc/nginx/sites-enabled/10-ci.pphg.tech.conf upstream concourse { \\tserver\\t\\t127.0.0.1:8080; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tci.pphg.tech; \\taccess_log\\t/var/log/nginx/ci.pphg.tech_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/ci.pphg.tech_error.log warn; \\tlocation / { \\t\\tinclude\\t\\t\\tproxy_params; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_read_timeout\\t90; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"upgrade\"; \\t\\tproxy_pass\\t\\thttp://concourse; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if config is ok: sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. sudo certbot --nginx -d ci.pphg.tech && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/ci.pphg.tech/chain.pem;' /etc/nginx/sites-available/10-ci.pphg.tech.conf && \\ sudo systemctl reload nginx.service Add cronjob for renewing cetificates \u00b6 sudo crontab -e : 0 */12 * * * /usr/local/bin/certbot renew Security \u00b6 iptables \u00b6 Explanation iptables rules # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on `eth0` iptables -t filter -A INPUT -i eth0 -j DROP; # Allow output on `eth0` iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed iptables rules: sudo iptables -A OUTPUT -o lo -j ACCEPT; \\ sudo iptables -A INPUT -i lo -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -j DROP; \\ sudo iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed ip6tables rules: sudo ip6tables -A OUTPUT -o lo -j ACCEPT; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -j DROP; \\ sudo ip6tables -t filter -A OUTPUT -o eth0 -j ACCEPT Persist iptables rules: sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"Concourse"},{"location":"software/concourse/#concourse","text":"OS: Ubuntu 16.04 LTS","title":"Concourse"},{"location":"software/concourse/#initial-server-setup","text":"","title":"Initial Server setup"},{"location":"software/concourse/#update-system","text":"apt update && apt full-upgrade -y","title":"Update System"},{"location":"software/concourse/#edit-bashrc","text":"/root/.bashrc / /etc/skel/.bashrc : # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi","title":"Edit .bashrc"},{"location":"software/concourse/#make-vim-colored-with-dark-background-settinfs","text":"cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Make vim colored with dark background settinfs"},{"location":"software/concourse/#create-a-new-user-user","text":"adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/","title":"Create a new user user"},{"location":"software/concourse/#change-the-ssh-deamon-to-allow-only-ssh-keys","text":"cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF","title":"Change the SSH deamon to allow only SSH-keys"},{"location":"software/concourse/#delete-roots-authorized_keys-file","text":"Attention Please check before if you can login to the user user with your ssh-key! rm ~/.ssh/authorized_keys Important Log out and re login as user !","title":"Delete root's authorized_keys file"},{"location":"software/concourse/#install-base-packages","text":"sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop","title":"Install base packages"},{"location":"software/concourse/#fix-locale","text":"cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF","title":"Fix locale"},{"location":"software/concourse/#postgresql","text":"","title":"PostgreSQL"},{"location":"software/concourse/#install","text":"sudo apt install -y postgresql postgresql-contrib","title":"Install"},{"location":"software/concourse/#configure","text":"Once the database software is installed, we will create a dedicated PostgreSQL user named concourse to manage the Concourse assets within the database system. To create this user, we will use sudo to act as the postgres system user, which has admin access to the database system: sudo -u postgres createuser concourse By default, Concourse attempts to connect to a database called atc . Concourse calls its main web and API hub the \"ATC\", which stands for \"air traffic control\". We can create this database and assign ownership to the concourse database user to provide appropriate access: sudo -u postgres createdb --owner=concourse atc","title":"Configure"},{"location":"software/concourse/#backup","text":"","title":"Backup"},{"location":"software/concourse/#concourse_1","text":"","title":"Concourse"},{"location":"software/concourse/#install_1","text":"Download and install Concourse and fly: sudo wget -O /root/concourse_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/concourse_updater.sh && \\ sudo chmod u+x /root/concourse_updater.sh && \\ sudo /root/concourse_updater.sh; \\ sudo wget -O /root/fly_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/fly_updater.sh && \\ sudo chmod u+x /root/fly_updater.sh && \\ sudo /root/fly_updater.sh","title":"Install"},{"location":"software/concourse/#configure_1","text":"Next, we can start to put together the configuration and keys that Concourse will use to start up. Before we begin, create a configuration directory where we can keep all of the relevant files: sudo mkdir /etc/concourse","title":"Configure"},{"location":"software/concourse/#creating-the-key-files","text":"Concourse is composed of a few related components that all need to be able to communicate securely with one another. The ATC is the main hub that handles web and API requests and coordinates pipelines. Workers manage containers to run the CI/CD tasks defined in the pipeline. The TSA is a custom SSH server that securely registers workers with the ATC. Even though we will be running all of these components on a single server, the worker and TSA expect to communicate securely. To satisfy this expectation, we will create three sets of keys: a key pair for the TSA component a key pair for the worker a session signing key pair used to sign tokens for user sessions and TSA to ATC communication sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/tsa_host_key; \\ sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/worker_key; \\ sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/session_signing_key If we check in the concourse directory, we can see that three public and three private keys are now available: ls -l /etc/concourse Output: total 24 -rw------- 1 root root 1679 May 11 17:19 session_signing_key -rw-r--r-- 1 root root 394 May 11 17:19 session_signing_key.pub -rw------- 1 root root 1679 May 11 17:19 tsa_host_key -rw-r--r-- 1 root root 394 May 11 17:19 tsa_host_key.pub -rw------- 1 root root 1675 May 11 17:19 worker_key -rw-r--r-- 1 root root 394 May 11 17:19 worker_key.pub The TSA will decide which workers are authorized to connect to the system by checking an authorized key file. We need to pre-populate the authorized keys file with the worker's public key that we generated so that it can connect successfully. Since this is our only worker, we can just copy the file over: sudo cp /etc/concourse/worker_key.pub /etc/concourse/authorized_worker_keys Now that we have the key files and an initial file for authorized workers, we can create the files that will define our Concourse configuration.","title":"Creating the Key Files"},{"location":"software/concourse/#creating-the-environment-configuration-files","text":"The Concourse binary does not read from a configuration file natively. However, it can take configuration values from environment variables passed in when the process starts. In a moment, we will be creating systemd unit files to define and manage our Concourse services. The unit files can read environment variables from a file and pass them to the process as it starts. We will create a file that defines the variables for the Concourse web process, which start the ATC and TSA components, and another file for the Concourse worker process. Create a file for the web process. Inside, we will define the environment variables needed by the ATC and TSA components. Each variable begins with CONCOURSE_ . To start, we will define some static values that we don't need to modify. These variables will define the location of the private TSA and session keys, the file defining the authorized workers, and the PostgreSQL socket location: cat << EOF | sudo tee /etc/concourse/web_environment # These values can be used as-is CONCOURSE_SESSION_SIGNING_KEY=/etc/concourse/session_signing_key CONCOURSE_TSA_HOST_KEY=/etc/concourse/tsa_host_key CONCOURSE_TSA_AUTHORIZED_KEYS=/etc/concourse/authorized_worker_keys CONCOURSE_POSTGRES_SOCKET=/var/run/postgresql EOF Next, we'll set some variables that will need to be changed to match your environment. The CONCOURSE_EXTERNAL_URL defines the IP address and port that the service will bind to. Set this to your server's public IP address and port 8080. We will also set a username and password for the main team, which functions as the Concourse administrative group. You can select any username and password you'd like here. You can change the admin credentials at any time by modifying these values and restarting the service: while true; do \\ unset pw; \\ unset pw_confirm; \\ read -s -p \"Enter admin user password: \" pw; echo \"\" && \\ read -s -p \"Confirm admin user password: \" pw_confirm; echo \"\" && \\ if [[ \"$pw\" == \"$pw_confirm\" ]]; then \\ break; \\ else \\ echo \"Your passwords don't match. Try again!\"; \\ echo \"\"; \\ fi; \\ done; \\ read -p \"Enter the public URL for concours (without http(s)://): \" ext_url; \\ cat << EOF | sudo tee -a /etc/concourse/web_environment; \\ unset pw; \\ unset pw_confirm; \\ unset ext_url # Change these values to match your environment CONCOURSE_BASIC_AUTH_USERNAME=admin CONCOURSE_BASIC_AUTH_PASSWORD=$pw CONCOURSE_EXTERNAL_URL=https://$ext_url CONCOURSE_BIND_IP=127.0.0.1 EOF Next, create an environment file for the worker process. Inside, we will define the locations of the worker's private key, the TSA's public key, and the directory where the worker will store its files. We will also set the address where the TSA can be reached, which will be the localhost in our case. You can use the values below without modification: cat << EOF | sudo tee /etc/concourse/worker_environment # These values can be used as-is CONCOURSE_WORK_DIR=/var/lib/concourse CONCOURSE_TSA_WORKER_PRIVATE_KEY=/etc/concourse/worker_key CONCOURSE_TSA_PUBLIC_KEY=/etc/concourse/tsa_host_key.pub CONCOURSE_TSA_HOST=127.0.0.1:2222 EOF","title":"Creating the Environment Configuration Files"},{"location":"software/concourse/#creating-a-dedicated-system-user-and-adjusting-permissions","text":"Before we move on, we should create a dedicated Linux user to run the Concourse web process. This will allow us to start the web-facing service with limited privileges. Because of the way that PostgreSQL handles authentication by default, it is important that the username match the PostgreSQL username we created earlier. Create a system user and group called concourse by typing: sudo adduser --system --group concourse We can give the new user ownership over the /etc/concourse directory and its contents by typing: sudo chown -R concourse:concourse /etc/concourse The environment files contain some sensitive data like the administrative username and password for the CI server. Adjust the permissions of the environment files so that regular users cannot read or modify the values in those files: sudo chmod 600 /etc/concourse/*_environment Our configuration assets are now owned by the concourse system user with limited privileges for other users.","title":"Creating a Dedicated System User and Adjusting Permissions"},{"location":"software/concourse/#create-systemd-unit-files-for-the-web-and-worker-processes","text":"We are now ready to define the Concourse CI unit files that will start and manage the application processes. We will create one file for the web process that handles the TSA and ATC components and one file for the worker process that handles containers for pipeline tasks.","title":"Create Systemd Unit Files for the Web and Worker Processes"},{"location":"software/concourse/#creating-the-concourse-web-unit-file","text":"Start by creating a concourse-web.service file within the /etc/systemd/system file with the following content: cat << EOF | sudo tee /etc/systemd/system/concourse-web.service [Unit] Description=Concourse CI web process (ATC and TSA) After=postgresql.service [Service] User=concourse Restart=on-failure EnvironmentFile=/etc/concourse/web_environment ExecStart=/usr/local/bin/concourse web [Install] WantedBy=multi-user.target EOF The first section of the file sets the unit description for the web process and indicates that this unit should be started after the PostgreSQL unit when deciding on ordering. The [Service] section defines the way that the service will be run. We will run the service as the concourse user we configured earlier and we tell systemd to automatically restart the service if it fails, which can be useful if the process dies from memory constraints or similar issues. We load the web_environment file we defined earlier to establish the environment and we start the actual process by calling concourse web . The [Install] section tells systemd how to tie the unit to the system start order if we configure the service to start at boot.","title":"Creating the Concourse Web Unit File"},{"location":"software/concourse/#creating-the-concourse-worker-unit-file","text":"Next, create a similar file to define the worker process with the following content: cat << EOF | sudo tee /etc/systemd/system/concourse-worker.service [Unit] Description=Concourse CI worker process After=concourse-web.service [Service] User=root Restart=on-failure EnvironmentFile=/etc/concourse/worker_environment ExecStart=/usr/local/bin/concourse worker [Install] WantedBy=multi-user.target EOF This unit functions similarly to the concourse-web unit. This time, we tell system to start the worker process after the Concourse web process has been started. The worker process is run as the root user instead of concourse because it requires administrative privileges for container management. We load the worker_environment file and use the concourse worker command to start the process.","title":"Creating the Concourse Worker Unit File"},{"location":"software/concourse/#start-and-enable-the-services","text":"Reload the deamon files, start the services: sudo systemctl daemon-reload; \\ sudo systemctl start concourse-web concourse-worker; \\ sudo systemctl status concourse-web concourse-worker Check that both services read \"active (running)\" and that the log lines do not contain any obvious errors. Pay special attention to the web service to make sure that the log lines do not indicate problems connecting to the database. If the services started successfully, enable them so that they will start each time the server boots: sudo systemctl enable concourse-web concourse-worker","title":"Start and enable the Services"},{"location":"software/concourse/#check-access-on-the-command-line","text":"Now that the Concourse services is running, we should check that we have access.","title":"Check Access On the Command Line"},{"location":"software/concourse/#checking-access-on-the-command-line","text":"First, let's check that we can access the Concourse service with the fly command line client. We have to log in using the administrative username and password that we configured in the /etc/concourse/web_environment file using the login subcommand. A single fly binary can be used to contact and manage multiple Concourse servers, so the command uses a concept called \"targets\" as an alias for different servers. We will call our target \"local\" to log into the local Concourse server: fly -t local login -c http://127.0.0.1:8080 You will be prompted for the username and password for the main team, which we set in the web_environments file. After entering your credentials, \"target saved\" should be displayed: logging in to team 'main' username: admin password: target saved This indicates that we were able to log in successfully. While we are here, let's verify that the worker process was able to successfully register to the TSA component by typing: fly -t local workers Output: name containers platform tags team state version concourse-server 0 linux none none running 2.1 The fly command is used to configure pipelines and manage the Concourse CI service. The fly help command provides information about additional commands.","title":"Checking Access On the Command Line"},{"location":"software/concourse/#nginx","text":"","title":"Nginx"},{"location":"software/concourse/#install_2","text":"Install all needed Packages for nginx tasks: sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx","title":"Install"},{"location":"software/concourse/#configure_2","text":"","title":"Configure"},{"location":"software/concourse/#delete-default-entry","text":"sudo rm /etc/nginx/sites-enabled/default","title":"Delete default entry"},{"location":"software/concourse/#add-ssl_params","text":"cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF","title":"Add ssl_params"},{"location":"software/concourse/#general-http-to-https-redirector","text":"This nginx entry will rewrite all traffic from HTTP to HTTPS. read -r -d '' read_tmp<<\"EOF\" server { \\tlisten 80 default_server; \\tlisten [::]:80 default_server; \\tserver_name _; \\treturn 301 https://$host$request_uri; } EOF echo -e \"$read_tmp\" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf","title":"General HTTP to HTTPS redirector"},{"location":"software/concourse/#concourse_2","text":"Add server directive for Concourse: cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-ci.pphg.tech.conf && \\ sudo ln -s ../sites-available/10-ci.pphg.tech.conf /etc/nginx/sites-enabled/10-ci.pphg.tech.conf upstream concourse { \\tserver\\t\\t127.0.0.1:8080; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tci.pphg.tech; \\taccess_log\\t/var/log/nginx/ci.pphg.tech_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/ci.pphg.tech_error.log warn; \\tlocation / { \\t\\tinclude\\t\\t\\tproxy_params; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_read_timeout\\t90; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"upgrade\"; \\t\\tproxy_pass\\t\\thttp://concourse; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if config is ok: sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. sudo certbot --nginx -d ci.pphg.tech && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/ci.pphg.tech/chain.pem;' /etc/nginx/sites-available/10-ci.pphg.tech.conf && \\ sudo systemctl reload nginx.service","title":"Concourse"},{"location":"software/concourse/#add-cronjob-for-renewing-cetificates","text":"sudo crontab -e : 0 */12 * * * /usr/local/bin/certbot renew","title":"Add cronjob for renewing cetificates"},{"location":"software/concourse/#security","text":"","title":"Security"},{"location":"software/concourse/#iptables","text":"Explanation iptables rules # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on `eth0` iptables -t filter -A INPUT -i eth0 -j DROP; # Allow output on `eth0` iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed iptables rules: sudo iptables -A OUTPUT -o lo -j ACCEPT; \\ sudo iptables -A INPUT -i lo -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -j DROP; \\ sudo iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed ip6tables rules: sudo ip6tables -A OUTPUT -o lo -j ACCEPT; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -j DROP; \\ sudo ip6tables -t filter -A OUTPUT -o eth0 -j ACCEPT Persist iptables rules: sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"iptables"},{"location":"software/concourse_dockerized/","text":"Concourse dockerized \u00b6 OS: Ubuntu 18.04 LTS (Bionic Beaver) Initial Server setup \u00b6 Update System \u00b6 apt update && apt full-upgrade -y Make vim colored with dark background settings \u00b6 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF Fix locale \u00b6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF Edit .bashrc \u00b6 /root/.bashrc / /etc/skel/.bashrc : # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi Create a new user user \u00b6 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/ Change the SSH deamon to allow only SSH-keys \u00b6 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF Delete root's authorized_keys file \u00b6 Attention Please check before if you can login to the user user with your ssh-key! rm ~/.ssh/authorized_keys Important Log out and re login as user ! Install base packages \u00b6 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ zip \\ unzip \\ unrar \\ screen \\ tmux \\ htop Docker \u00b6 Pre-requirements \u00b6 sudo apt install -y apt-transport-https ca-certificates curl software-properties-common Install Docker \u00b6 The following steps are shortened! Here is the full Guide to install docker on Ubuntu 18.04 (Bionic Beaver) https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && \\ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" && \\ sudo apt update && \\ apt-cache policy docker-ce && \\ echo \"Verify that docker-ce will be installed from the docker repository instead of the ubuntu repo.\" && \\ read -p \"Press any key to continue or press CTRL-C to abort... \" -n1 -s && \\ sudo apt install -y docker-ce && \\ sudo systemctl status docker Create a new docker network for concourse \u00b6 sudo docker network create \\ -d bridge \\ -o \"com.docker.network.bridge.name\"=\"docker1\" \\ -o \"com.docker.network.bridge.enable_ip_masquerade\"=true \\ -o \"com.docker.network.bridge.enable_icc\"=true \\ -o \"com.docker.network.bridge.host_binding_ipv4\"=\"0.0.0.0\" \\ -o \"com.docker.network.driver.mtu\"=\"1500\" \\ --scope=local \\ --subnet=172.23.0.0/16 \\ --ip-range=172.23.42.0/24 \\ --gateway=172.23.0.1 \\ concourse_net Install Portainer \u00b6 sudo docker volume create portainer_data && \\ sudo docker run \\ --name portainer \\ --volume /var/run/docker.sock:/var/run/docker.sock \\ --volume portainer_data:/data \\ --network concourse_net \\ --ip 172.23.0.10 \\ --restart unless-stopped \\ --detach \\ portainer/portainer PostgreSQL \u00b6 Install \u00b6 PSQL_CONCOURSE_USER=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1) && \\ PSQL_CONCOURSE_PW=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1) && \\ sudo docker volume create pgdata && \\ sudo docker run \\ --name concourse-db \\ --volume pgdata:/var/lib/postgresql/data \\ --network concourse_net \\ --hostname concourse-db \\ --ip 172.23.1.10 \\ --restart unless-stopped \\ --env POSTGRES_USER=$PSQL_CONCOURSE_USER \\ --env POSTGRES_PASSWORD=$PSQL_CONCOURSE_PW \\ --env POSTGRES_DB=atc \\ --detach \\ postgres:10.4-alpine && \\ echo -e \"User:\\t\\t$PSQL_CONCOURSE_USER\"; \\ echo -e \"Password:\\t$PSQL_CONCOURSE_PW\" Backup \u00b6 TODO \u00b6 Concourse \u00b6 Pre-requirements \u00b6 Create a GitHub OAuth app for authentication: Follow this Guide: https://concourse-ci.org/install.html#github-auth-config Install Web interface \u00b6 echo \"\" && \\ read -p \"Enter your GitHub client ID: \" GITHUB_CLIENT_ID && \\ while true; do \\ set GITHUB_CLIENT_SECRET=\"\"; \\ set GITHUB_CLIENT_SECRET_confirm=\"\"; \\ read -s -p \"Enter your GitHub client secret: \" GITHUB_CLIENT_SECRET; echo \"\"; \\ read -s -p \"Reenter your GitHub client secret: \" GITHUB_CLIENT_SECRET_confirm; echo \"\"; \\ if [[ \"$GITHUB_CLIENT_SECRET\" == \"$GITHUB_CLIENT_SECRET_confirm\" ]]; then \\ break; \\ else \\ clear; \\ echo \"Your secrets don't match! Please try again.\"; \\ echo \"\"; \\ fi; \\ done; \\ CONCOURSE_ADMIN_USER=admin && \\ CONCOURSE_ADMIN_PW=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1) && \\ CONCOUSE_WEB_IP='172.23.1.11' && \\ ORG_NAME=\"mischaufen\" && \\ TEAM_NAME=\"main\" && \\ sudo docker volume create concourse-keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/tsa_host_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/tsa_host_key && \\ sudo touch /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/worker_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/worker_key && \\ sudo cat /var/lib/docker/volumes/concourse-keys/_data/worker_key.pub | sudo tee -a /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/session_signing_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/session_signing_key && \\ sudo docker run \\ --name concourse-web \\ --volume concourse-keys:/concourse-keys \\ --network concourse_net \\ --hostname concourse-web \\ --ip $CONCOUSE_WEB_IP \\ --privileged \\ --restart unless-stopped \\ --detach \\ concourse/concourse:4.2.1 web \\ --tsa-host-key='/concourse-keys/tsa_host_key' \\ --tsa-authorized-keys='/concourse-keys/authorized_worker_keys' \\ --tsa-session-signing-key='/concourse-keys/session_signing_key' \\ --add-local-user=$CONCOURSE_ADMIN_USER:$CONCOURSE_ADMIN_PW \\ --main-team-local-user=$CONCOURSE_ADMIN_USER \\ --github-client-id=$GITHUB_CLIENT_ID \\ --github-client-secret=$GITHUB_CLIENT_SECRET \\ --main-team-github-team=$ORG_NAME:$TEAM_NAME \\ --postgres-user=$PSQL_CONCOURSE_USER \\ --postgres-password=$PSQL_CONCOURSE_PW \\ --postgres-host=$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-db) \\ --postgres-port=5432 \\ --bind-ip=$CONCOUSE_WEB_IP \\ --external-url='https://ci.mischaufen.de' && \\ echo -e \"User:\\t\\t$CONCOURSE_ADMIN_USER\"; \\ echo -e \"Password:\\t$CONCOURSE_ADMIN_PW\" Install worker \u00b6 CONCOURSE_WORKER_IP=172.23.1.12 && \\ sudo docker run \\ --name concourse-worker \\ --volume concourse-keys:/concourse-keys \\ --network concourse_net \\ --hostname concourse-worker \\ --ip $CONCOURSE_WORKER_IP \\ --privileged \\ --restart unless-stopped \\ --detach \\ concourse/concourse:4.2.1 worker \\ --tsa-host=$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web):2222 \\ --garden-dns-server=1.1.1.1 \\ --garden-dns-proxy-enable fly \u00b6 Install fly \u00b6 sudo wget -O /root/fly_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/fly_updater.sh && \\ sudo chmod u+x /root/fly_updater.sh && \\ sudo /root/fly_updater.sh Configure \u00b6 First, let's check that we can access the Concourse service with the fly command line client. We have to log in using the administrative username and password that we configured in the /etc/concourse/web_environment file using the login subcommand. A single fly binary can be used to contact and manage multiple Concourse servers, so the command uses a concept called \"targets\" as an alias for different servers. We will call our target \"local\" to log into the local Concourse server: fly -t local login -c http://$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web):8080 You will be prompted for going to http://172.23.1.11:8080/sky/login?redirect_uri=http://127.0.0.1:33277/auth/callback . Do the following instead: Add a port forwarding (on your local PC) from 8080 to 172.23.1.11:8080 and go to: http://127.0.0.1:8080/sky/login?redirect_uri=http://127.0.0.1:8080/sky/token Now copy/paste the token to your promt. This indicates that we were able to log in successfully. While we are here, let's verify that the worker process was able to successfully register to the TSA component by typing: fly -t local workers Output: name containers platform tags team state version concourse-server 0 linux none none running 2.1 The fly command is used to configure pipelines and manage the Concourse CI service. The fly help command provides information about additional commands. Nginx \u00b6 Install \u00b6 Install all needed Packages for nginx tasks: sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx Configure \u00b6 Delete default entry \u00b6 sudo rm /etc/nginx/sites-enabled/default Add ssl_params \u00b6 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF General HTTP to HTTPS redirector \u00b6 This nginx entry will rewrite all traffic from HTTP to HTTPS. read -r -d '' read_tmp<<\"EOF\" server { \\tlisten 80 default_server; \\tlisten [::]:80 default_server; \\tserver_name _; \\treturn 301 https://$host$request_uri; } EOF echo -e \"$read_tmp\" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf Portainer \u00b6 Add server directive for Portainer: portainer_ip=$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" portainer); \\ cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-portainer.ci.mischaufen.de.conf && \\ sudo ln -s ../sites-available/10-portainer.ci.mischaufen.de.conf /etc/nginx/sites-enabled/10-portainer.ci.mischaufen.de.conf server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tportainer.ci.mischaufen.de; \\taccess_log\\t/var/log/nginx/portainer.ci.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/portainer.ci.mischaufen.de_error.log warn; \\tlocation / { \\t\\tset \\$upstream_endpoint http://$portainer_ip:9000; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_set_header\\tConnection \"\"; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tadd_header\\t\\tX-Upstream \\$upstream_addr; \\t\\tproxy_pass\\t\\t\\$upstream_endpoint; \\t} \\tlocation /api/websocket/ { \\t\\tset \\$upstream_endpoint http://$portainer_ip:9000; \\t\\tproxy_buffering\\t\\toff; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"Upgrade\"; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Server \\$host; \\t\\tproxy_set_header\\tX-Forwarded-For \\$proxy_add_x_forwarded_for; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tadd_header\\t\\tX-Upstream \\$upstream_addr; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_pass\\t\\t\\$upstream_endpoint; \\t\\t# Need this for the console \\t\\tproxy_redirect\\t\\thttp://$portainer_ip:9000 \\$scheme://\\$host/; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. sudo certbot --nginx -d portainer.ci.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/portainer.ci.mischaufen.de/chain.pem;' /etc/nginx/sites-available/10-portainer.ci.mischaufen.de.conf && \\ sudo systemctl reload nginx.service Concourse \u00b6 Add server directive for Concourse: cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/11-ci.mischaufen.de.conf && \\ sudo ln -s ../sites-available/11-ci.mischaufen.de.conf /etc/nginx/sites-enabled/11-ci.mischaufen.de.conf upstream concourse { \\tserver\\t\\t$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web):8080; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tci.mischaufen.de; \\taccess_log\\t/var/log/nginx/ci.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/ci.mischaufen.de_error.log warn; \\tlocation / { \\t\\tinclude\\t\\t\\tproxy_params; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_read_timeout\\t90; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"upgrade\"; \\t\\tproxy_pass\\t\\thttp://concourse; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if config is ok: sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. sudo certbot --nginx -d ci.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/ci.mischaufen.de/chain.pem;' /etc/nginx/sites-available/11-ci.mischaufen.de.conf && \\ sudo systemctl reload nginx.service Add cronjob for renewing cetificates \u00b6 sudo crontab -e : 0 */12 * * * /usr/local/bin/certbot renew Security \u00b6 iptables \u00b6 Explanation iptables rules # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on `eth0` iptables -t filter -A INPUT -i eth0 -j DROP; # Allow output on `eth0` iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed iptables rules: sudo iptables -A OUTPUT -o lo -j ACCEPT; \\ sudo iptables -A INPUT -i lo -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p icmp -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -j DROP; \\ sudo iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed ip6tables rules: sudo ip6tables -A OUTPUT -o lo -j ACCEPT; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p ipv6-icmp -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -j DROP; \\ sudo ip6tables -t filter -A OUTPUT -o eth0 -j ACCEPT Persist iptables rules: sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"Concourse dockerized"},{"location":"software/concourse_dockerized/#concourse-dockerized","text":"OS: Ubuntu 18.04 LTS (Bionic Beaver)","title":"Concourse dockerized"},{"location":"software/concourse_dockerized/#initial-server-setup","text":"","title":"Initial Server setup"},{"location":"software/concourse_dockerized/#update-system","text":"apt update && apt full-upgrade -y","title":"Update System"},{"location":"software/concourse_dockerized/#make-vim-colored-with-dark-background-settings","text":"cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Make vim colored with dark background settings"},{"location":"software/concourse_dockerized/#fix-locale","text":"cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF","title":"Fix locale"},{"location":"software/concourse_dockerized/#edit-bashrc","text":"/root/.bashrc / /etc/skel/.bashrc : # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi","title":"Edit .bashrc"},{"location":"software/concourse_dockerized/#create-a-new-user-user","text":"adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/","title":"Create a new user user"},{"location":"software/concourse_dockerized/#change-the-ssh-deamon-to-allow-only-ssh-keys","text":"cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF","title":"Change the SSH deamon to allow only SSH-keys"},{"location":"software/concourse_dockerized/#delete-roots-authorized_keys-file","text":"Attention Please check before if you can login to the user user with your ssh-key! rm ~/.ssh/authorized_keys Important Log out and re login as user !","title":"Delete root's authorized_keys file"},{"location":"software/concourse_dockerized/#install-base-packages","text":"sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ zip \\ unzip \\ unrar \\ screen \\ tmux \\ htop","title":"Install base packages"},{"location":"software/concourse_dockerized/#docker","text":"","title":"Docker"},{"location":"software/concourse_dockerized/#pre-requirements","text":"sudo apt install -y apt-transport-https ca-certificates curl software-properties-common","title":"Pre-requirements"},{"location":"software/concourse_dockerized/#install-docker","text":"The following steps are shortened! Here is the full Guide to install docker on Ubuntu 18.04 (Bionic Beaver) https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && \\ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" && \\ sudo apt update && \\ apt-cache policy docker-ce && \\ echo \"Verify that docker-ce will be installed from the docker repository instead of the ubuntu repo.\" && \\ read -p \"Press any key to continue or press CTRL-C to abort... \" -n1 -s && \\ sudo apt install -y docker-ce && \\ sudo systemctl status docker","title":"Install Docker"},{"location":"software/concourse_dockerized/#create-a-new-docker-network-for-concourse","text":"sudo docker network create \\ -d bridge \\ -o \"com.docker.network.bridge.name\"=\"docker1\" \\ -o \"com.docker.network.bridge.enable_ip_masquerade\"=true \\ -o \"com.docker.network.bridge.enable_icc\"=true \\ -o \"com.docker.network.bridge.host_binding_ipv4\"=\"0.0.0.0\" \\ -o \"com.docker.network.driver.mtu\"=\"1500\" \\ --scope=local \\ --subnet=172.23.0.0/16 \\ --ip-range=172.23.42.0/24 \\ --gateway=172.23.0.1 \\ concourse_net","title":"Create a new docker network for concourse"},{"location":"software/concourse_dockerized/#install-portainer","text":"sudo docker volume create portainer_data && \\ sudo docker run \\ --name portainer \\ --volume /var/run/docker.sock:/var/run/docker.sock \\ --volume portainer_data:/data \\ --network concourse_net \\ --ip 172.23.0.10 \\ --restart unless-stopped \\ --detach \\ portainer/portainer","title":"Install Portainer"},{"location":"software/concourse_dockerized/#postgresql","text":"","title":"PostgreSQL"},{"location":"software/concourse_dockerized/#install","text":"PSQL_CONCOURSE_USER=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1) && \\ PSQL_CONCOURSE_PW=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1) && \\ sudo docker volume create pgdata && \\ sudo docker run \\ --name concourse-db \\ --volume pgdata:/var/lib/postgresql/data \\ --network concourse_net \\ --hostname concourse-db \\ --ip 172.23.1.10 \\ --restart unless-stopped \\ --env POSTGRES_USER=$PSQL_CONCOURSE_USER \\ --env POSTGRES_PASSWORD=$PSQL_CONCOURSE_PW \\ --env POSTGRES_DB=atc \\ --detach \\ postgres:10.4-alpine && \\ echo -e \"User:\\t\\t$PSQL_CONCOURSE_USER\"; \\ echo -e \"Password:\\t$PSQL_CONCOURSE_PW\"","title":"Install"},{"location":"software/concourse_dockerized/#backup","text":"","title":"Backup"},{"location":"software/concourse_dockerized/#todo","text":"","title":"TODO"},{"location":"software/concourse_dockerized/#concourse","text":"","title":"Concourse"},{"location":"software/concourse_dockerized/#pre-requirements_1","text":"Create a GitHub OAuth app for authentication: Follow this Guide: https://concourse-ci.org/install.html#github-auth-config","title":"Pre-requirements"},{"location":"software/concourse_dockerized/#install-web-interface","text":"echo \"\" && \\ read -p \"Enter your GitHub client ID: \" GITHUB_CLIENT_ID && \\ while true; do \\ set GITHUB_CLIENT_SECRET=\"\"; \\ set GITHUB_CLIENT_SECRET_confirm=\"\"; \\ read -s -p \"Enter your GitHub client secret: \" GITHUB_CLIENT_SECRET; echo \"\"; \\ read -s -p \"Reenter your GitHub client secret: \" GITHUB_CLIENT_SECRET_confirm; echo \"\"; \\ if [[ \"$GITHUB_CLIENT_SECRET\" == \"$GITHUB_CLIENT_SECRET_confirm\" ]]; then \\ break; \\ else \\ clear; \\ echo \"Your secrets don't match! Please try again.\"; \\ echo \"\"; \\ fi; \\ done; \\ CONCOURSE_ADMIN_USER=admin && \\ CONCOURSE_ADMIN_PW=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1) && \\ CONCOUSE_WEB_IP='172.23.1.11' && \\ ORG_NAME=\"mischaufen\" && \\ TEAM_NAME=\"main\" && \\ sudo docker volume create concourse-keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/tsa_host_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/tsa_host_key && \\ sudo touch /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/worker_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/worker_key && \\ sudo cat /var/lib/docker/volumes/concourse-keys/_data/worker_key.pub | sudo tee -a /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/session_signing_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/session_signing_key && \\ sudo docker run \\ --name concourse-web \\ --volume concourse-keys:/concourse-keys \\ --network concourse_net \\ --hostname concourse-web \\ --ip $CONCOUSE_WEB_IP \\ --privileged \\ --restart unless-stopped \\ --detach \\ concourse/concourse:4.2.1 web \\ --tsa-host-key='/concourse-keys/tsa_host_key' \\ --tsa-authorized-keys='/concourse-keys/authorized_worker_keys' \\ --tsa-session-signing-key='/concourse-keys/session_signing_key' \\ --add-local-user=$CONCOURSE_ADMIN_USER:$CONCOURSE_ADMIN_PW \\ --main-team-local-user=$CONCOURSE_ADMIN_USER \\ --github-client-id=$GITHUB_CLIENT_ID \\ --github-client-secret=$GITHUB_CLIENT_SECRET \\ --main-team-github-team=$ORG_NAME:$TEAM_NAME \\ --postgres-user=$PSQL_CONCOURSE_USER \\ --postgres-password=$PSQL_CONCOURSE_PW \\ --postgres-host=$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-db) \\ --postgres-port=5432 \\ --bind-ip=$CONCOUSE_WEB_IP \\ --external-url='https://ci.mischaufen.de' && \\ echo -e \"User:\\t\\t$CONCOURSE_ADMIN_USER\"; \\ echo -e \"Password:\\t$CONCOURSE_ADMIN_PW\"","title":"Install Web interface"},{"location":"software/concourse_dockerized/#install-worker","text":"CONCOURSE_WORKER_IP=172.23.1.12 && \\ sudo docker run \\ --name concourse-worker \\ --volume concourse-keys:/concourse-keys \\ --network concourse_net \\ --hostname concourse-worker \\ --ip $CONCOURSE_WORKER_IP \\ --privileged \\ --restart unless-stopped \\ --detach \\ concourse/concourse:4.2.1 worker \\ --tsa-host=$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web):2222 \\ --garden-dns-server=1.1.1.1 \\ --garden-dns-proxy-enable","title":"Install worker"},{"location":"software/concourse_dockerized/#fly","text":"","title":"fly"},{"location":"software/concourse_dockerized/#install-fly","text":"sudo wget -O /root/fly_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/fly_updater.sh && \\ sudo chmod u+x /root/fly_updater.sh && \\ sudo /root/fly_updater.sh","title":"Install fly"},{"location":"software/concourse_dockerized/#configure","text":"First, let's check that we can access the Concourse service with the fly command line client. We have to log in using the administrative username and password that we configured in the /etc/concourse/web_environment file using the login subcommand. A single fly binary can be used to contact and manage multiple Concourse servers, so the command uses a concept called \"targets\" as an alias for different servers. We will call our target \"local\" to log into the local Concourse server: fly -t local login -c http://$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web):8080 You will be prompted for going to http://172.23.1.11:8080/sky/login?redirect_uri=http://127.0.0.1:33277/auth/callback . Do the following instead: Add a port forwarding (on your local PC) from 8080 to 172.23.1.11:8080 and go to: http://127.0.0.1:8080/sky/login?redirect_uri=http://127.0.0.1:8080/sky/token Now copy/paste the token to your promt. This indicates that we were able to log in successfully. While we are here, let's verify that the worker process was able to successfully register to the TSA component by typing: fly -t local workers Output: name containers platform tags team state version concourse-server 0 linux none none running 2.1 The fly command is used to configure pipelines and manage the Concourse CI service. The fly help command provides information about additional commands.","title":"Configure"},{"location":"software/concourse_dockerized/#nginx","text":"","title":"Nginx"},{"location":"software/concourse_dockerized/#install_1","text":"Install all needed Packages for nginx tasks: sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx","title":"Install"},{"location":"software/concourse_dockerized/#configure_1","text":"","title":"Configure"},{"location":"software/concourse_dockerized/#delete-default-entry","text":"sudo rm /etc/nginx/sites-enabled/default","title":"Delete default entry"},{"location":"software/concourse_dockerized/#add-ssl_params","text":"cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF","title":"Add ssl_params"},{"location":"software/concourse_dockerized/#general-http-to-https-redirector","text":"This nginx entry will rewrite all traffic from HTTP to HTTPS. read -r -d '' read_tmp<<\"EOF\" server { \\tlisten 80 default_server; \\tlisten [::]:80 default_server; \\tserver_name _; \\treturn 301 https://$host$request_uri; } EOF echo -e \"$read_tmp\" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf","title":"General HTTP to HTTPS redirector"},{"location":"software/concourse_dockerized/#portainer","text":"Add server directive for Portainer: portainer_ip=$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" portainer); \\ cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-portainer.ci.mischaufen.de.conf && \\ sudo ln -s ../sites-available/10-portainer.ci.mischaufen.de.conf /etc/nginx/sites-enabled/10-portainer.ci.mischaufen.de.conf server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tportainer.ci.mischaufen.de; \\taccess_log\\t/var/log/nginx/portainer.ci.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/portainer.ci.mischaufen.de_error.log warn; \\tlocation / { \\t\\tset \\$upstream_endpoint http://$portainer_ip:9000; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_set_header\\tConnection \"\"; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tadd_header\\t\\tX-Upstream \\$upstream_addr; \\t\\tproxy_pass\\t\\t\\$upstream_endpoint; \\t} \\tlocation /api/websocket/ { \\t\\tset \\$upstream_endpoint http://$portainer_ip:9000; \\t\\tproxy_buffering\\t\\toff; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"Upgrade\"; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Server \\$host; \\t\\tproxy_set_header\\tX-Forwarded-For \\$proxy_add_x_forwarded_for; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tadd_header\\t\\tX-Upstream \\$upstream_addr; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_pass\\t\\t\\$upstream_endpoint; \\t\\t# Need this for the console \\t\\tproxy_redirect\\t\\thttp://$portainer_ip:9000 \\$scheme://\\$host/; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. sudo certbot --nginx -d portainer.ci.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/portainer.ci.mischaufen.de/chain.pem;' /etc/nginx/sites-available/10-portainer.ci.mischaufen.de.conf && \\ sudo systemctl reload nginx.service","title":"Portainer"},{"location":"software/concourse_dockerized/#concourse_1","text":"Add server directive for Concourse: cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/11-ci.mischaufen.de.conf && \\ sudo ln -s ../sites-available/11-ci.mischaufen.de.conf /etc/nginx/sites-enabled/11-ci.mischaufen.de.conf upstream concourse { \\tserver\\t\\t$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web):8080; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tci.mischaufen.de; \\taccess_log\\t/var/log/nginx/ci.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/ci.mischaufen.de_error.log warn; \\tlocation / { \\t\\tinclude\\t\\t\\tproxy_params; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_read_timeout\\t90; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"upgrade\"; \\t\\tproxy_pass\\t\\thttp://concourse; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if config is ok: sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. sudo certbot --nginx -d ci.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/ci.mischaufen.de/chain.pem;' /etc/nginx/sites-available/11-ci.mischaufen.de.conf && \\ sudo systemctl reload nginx.service","title":"Concourse"},{"location":"software/concourse_dockerized/#add-cronjob-for-renewing-cetificates","text":"sudo crontab -e : 0 */12 * * * /usr/local/bin/certbot renew","title":"Add cronjob for renewing cetificates"},{"location":"software/concourse_dockerized/#security","text":"","title":"Security"},{"location":"software/concourse_dockerized/#iptables","text":"Explanation iptables rules # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on `eth0` iptables -t filter -A INPUT -i eth0 -j DROP; # Allow output on `eth0` iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed iptables rules: sudo iptables -A OUTPUT -o lo -j ACCEPT; \\ sudo iptables -A INPUT -i lo -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p icmp -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -j DROP; \\ sudo iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed ip6tables rules: sudo ip6tables -A OUTPUT -o lo -j ACCEPT; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p ipv6-icmp -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -j DROP; \\ sudo ip6tables -t filter -A OUTPUT -o eth0 -j ACCEPT Persist iptables rules: sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"iptables"},{"location":"software/nextcloud/","text":"NextCloud \u00b6 OS: Ubuntu 18.04 LTS Preinstalled with lvm and LUKS encryption. Initial Server setup \u00b6 Update System \u00b6 apt update && apt full-upgrade -y Fix locale \u00b6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF Edit .bashrc \u00b6 /root/.bashrc / /etc/skel/.bashrc : # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi Make vim colored with dark background settinfs \u00b6 cat << EOF | sudo tee -a /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF Change the SSH deamon to allow only SSH-keys \u00b6 cat << EOF | sudo tee /etc/ssh/sshd_config && sudo systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF Install base packages \u00b6 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop Install and configure busybox/dropbear \u00b6 Install busybox and dropbear: sudo apt update && sudo apt full-upgrade -y && sudo apt install -y busybox dropbear Edit your /etc/initramfs-tools/initramfs.conf and set BUSYBOX=y : sudo sed -i -e 's/^BUSYBOX=.*$/BUSYBOX=y/' /etc/initramfs-tools/initramfs.conf && \\ cat << EOF | sudo tee -a /etc/initramfs-tools/initramfs.conf # # DROPBEAR # DROPBEAR=y EOF Set dropbear to start: sudo sed -i 's/^NO_START.*$/NO_START=0/' /etc/default/dropbear Change dropear port to 2222 : sudo sed -i 's/^#DROPBEAR_OPTIONS.*$/DROPBEAR_OPTIONS=\"-p 2222\"/' /etc/dropbear-initramfs/config crypt_unlock.sh #!/bin/sh PREREQ=\"dropbear\" prereqs() { echo \"$PREREQ\" } case \"$1\" in prereqs) prereqs exit 0 ;; esac . \"${CONFDIR}/initramfs.conf\" . /usr/share/initramfs-tools/hook-functions if [ \"${DROPBEAR}\" != \"n\" ] && [ -r \"/etc/crypttab\" ] ; then cat > \"${DESTDIR}/bin/unlock\" << EOF #!/bin/sh if PATH=/lib/unlock:/bin:/sbin /scripts/local-top/cryptroot; then kill \\`ps | grep cryptroot | grep -v \"grep\" | awk '{print \\$1}'\\` # following line kill the remote shell right after the passphrase has # been entered. kill -9 \\`ps | grep \"\\-sh\" | grep -v \"grep\" | awk '{print \\$1}'\\` exit 0 fi exit 1 EOF chmod 755 \"${DESTDIR}/bin/unlock\" mkdir -p \"${DESTDIR}/lib/unlock\" cat > \"${DESTDIR}/lib/unlock/plymouth\" << EOF #!/bin/sh [ \"\\$1\" == \"--ping\" ] && exit 1 /bin/plymouth \"\\$@\" EOF chmod 755 \"${DESTDIR}/lib/unlock/plymouth\" echo To unlock root-partition run \"unlock\" >> ${DESTDIR}/etc/motd fi Get the unlock script: sudo wget -O /etc/initramfs-tools/hooks/crypt_unlock.sh https://gist.githubusercontent.com/gusennan/712d6e81f5cf9489bd9f/raw/fda73649d904ee0437fe3842227ad8ac8ca487d1/crypt_unlock.sh && \\ sudo chmod +x /etc/initramfs-tools/hooks/crypt_unlock.sh && \\ sudo update-initramfs -u && \\ sudo systemctl disable dropbear Add your ssh keys to the busybox authorized keys: cat << EOF | sudo tee /etc/dropbear-initramfs/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAgEAwVT82+FIbeVNjJ3Waa3Z0ysmG+DNhX6qUN5C2o3lT158WCcWgDU5qs/DgJDQFVK+m33cvozdaoV2sreSHmKLlM77k5zU+OTDswrEaJ53CRSu7tgT6ZRI2ggxzhvrw6xq1bmTlSuaojSmaJNDZllgFtrlG1XXGSgkgyDtyJuUk16MwKU4zLAWOluwrZBMIvlafNnJS4K385rI2NNIMUvWHjfxYTxAFAtqBZFacz/kQ9jm4UYT+v7YOXu48Cgul6S51eNbK0rUe7DU7+1xzusdhyqHq7FnFugvW6OYy3ft3y/ri/7qvKAhtwQSo6A8cgLVlPnMKdDWq/QAC6dLGcUEHJPJDYumMpM6ijrfd1DCpB+ELr/dFHgR5l6++OJM2/kl4f3ue1gp5b//6osnfMhWrQXbmk8WLF31IXmaZnwlcKKEvgNQL5O9U39HRuZBvXh5aib/vFtQ5ge6l1wG+eFLrMHjeLPDYCYuNliPisjmLNUb+0KyfDR2KnrqwZVXMOiKdh+S4OaXW7T+woykZ3u7FODfZwcRdnEgZFxYLSHRh8U/7fFzbAD4jJH29D9nHz46hx0OdEtiDJoeujf+GLXw4c7P2G+IYlPVg6sPJ5W+oky5gboQh13IOnFXFXd5kYuWnzOU/4ITy4vHw2WowbCYMFY5GNrRzRMpmcIj55OXrwM= 71:72:8d:23:dd:13:ea:90:17:35:4e:0a:2b:c7:d5:91 Philip Henning (mail@philip-henning.com) ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCZntAPXzfGddkOxodxRCv2zBgbqHo9aAqtvoiZD0NuuBkYj3tSMKELMi0corvtXHy3iTa6EAKVc/AQqsNrggOeIYHwCSXZZ67sa0YxItDD3+YBm/v65EK/sspvq+xPD8IyZyYWDy6CmK1HiBlv6TFnGlN5PuFKfPJFBYEkx0Dzjl3i1r+xSpPKOcVgtPDs3MIYvBB1Y8Sig+JZehBELiioBQaWjKDPBJYsLQzqjGPLcBb/h1H729P6B4oW7A1LYsStJd5UDfknOgdx4pPoSCFBE5aEDO/0efqPcN7jQWlrrsc+OEWRW7k7EA45+9x6vjjUCO8IgKQFAIiOJadDPEaNAJnza4IpCspePeITZ3iyXo2/w9/BrzyNnW+arJ1QWjZ79W9mPXg4CTvUsnMQ55BRw2meLBxQqgkr9H8Cf/IxCEB2bPYPecCcVZj4djjgVbzlY/2/vFPDmB3Idx+AagACJZoDoWqaqlloC+fPyovG9iCjA+7iMEg4OR7kD/GCKGRmNzPmKNgkBwp62eyP4L9197bhIywMkaVEofqzHNOFly1f7KTEK/Dgo6GHCCsFLnvnPyZDvJ8o7bG7svan4e1KmY5JLSKZrtkPMJzvNmEUGsGlwFMWtNEhiGG01YiTIBcG3Z7N8lpi8Bcoti2Lq5chzApAwhHkykasHq218QPnpQ== a0:ce:a9:b4:c1:e8:c7:0e:ed:02:15:a0:58:56:34:64 matze ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAgEAyhhxTowK157f2bZiV5W9Vy0wemmo07EuH2un6boKjzQ8oNDB3AKUeLgef76spBZZQ668kkwL+qDcCssPuRUdrxuclTw7bgf+RtYV1dkxRxCXfMqT4Gxsz2VOAClImWY9cmWSkigzZfS0/R2JTTO+H2ohOqRGqLH0dNjswRYW33mMMCy6ksZgv4Bin9B5j6u9fsj4AcwtEMiNVKXMX9z6FELo9/ayWwvnEmzL9Bs8qR9+7jLbhaJJeJNZEh/teZu3w5/ahHtj0rWHZ0F/XNmAKFCS9M/buExXw3RF0PAByAJN+J4uMzcqx64guKoe5J1Sz5OZy+Tn/IICLv0oKggnfT1BPXwUAHm+8jGW/q1NFKXc2IanhS6wkBlJUWawEupJHj2TIdTI55mscsUH9g9a0WI7dSiZkkER8HoJYg5vZZ9y7OoklK8zPuGWPeOcIStCROXkTT/o0W/S7SVPKXeXrj3FNzV2Ibw8V3YSMJpA9f52kMkVp1Jzr8/L0i7vSuLIU628rVj1QBvmE1funKMEa9uWdqSgOZyVYVBzXzlahA8D/lBK8cX2Qplq9Wt/pUGPS+OczPwDW2IcRIdkVt/crCgxiYOaZxh853zMR1BHL9bZcwnL6voSgCi0uRzfBA4wEGCiZN7qoIVAs1axraet3G95rASzLI4qzlc5vtiUq98= 54:7e:57:18:15:f4:59:0f:d1:81:69:d9:dc:53:6e:0a robin@beismann.biz EOF Regenerate the initramfs: sudo update-initramfs -u && \\ sudo update-grub && \\ sudo grub-install /dev/vda Mount external storage \u00b6 pre requirements \u00b6 Install cifs-utils: sudo apt install -y cifs-utils Mount mounts \u00b6 while true; do \\ unset pw; \\ unset pw_confirm; \\ read -p \"cifs user: \" cifs_user && \\ read -s -p \"cifs password: \" pw; echo \"\" && \\ read -s -p \"Confirm admin user password: \" pw_confirm; echo \"\" && \\ if [[ \"$pw\" == \"$pw_confirm\" ]]; then \\ break; \\ else \\ echo \"Your passwords don't match. Try again!\"; \\ echo \"\"; \\ fi; \\ done; \\ if [[ ! -d /mnt/.cifs ]]; then sudo mkdir /mnt/.cifs; fi; \\ sudo chmod 400 /mnt/.cifs; \\ cat << EOF | sudo tee -a /etc/fstab && \\ sudo mount -a # Cifs shared storage //io.servercow.de/home /mnt/.cifs cifs username=$cifs_user,password=$pw,uid=www-data,gid=www-data,file_mode=0660,dir_mode=0770 0 0 EOF Install rclone \u00b6 Install rclone: curl https://rclone.org/install.sh | sudo bash create mountpoint: sudo mkdir /mnt/cifs && \\ sudo chmod 400 /mnt/cifs configure \u00b6 Open rclone configuration: if [[ ! -d /mnt/.cifs ]]; then sudo mkdir -p /var/www/.conf/rclone/; fi && \\ sudo chmod 700 /var/www/.conf/rclone/ && \\ sudo chown www-data:www-data /var/www/.conf/rclone/ && \\ sudo -u www-data rclone config --config /var/www/.conf/rclone/rclone.conf && \\ sudo chmod 600 /var/www/.conf/rclone/rclone.conf Configuration log: 2018/09/09 21:09:35 NOTICE: Config file \"/var/www/.conf/rclone/rclone.conf\" not found - using defaults No remotes found - make a new one n) New remote s) Set configuration password q) Quit config n/s/q> n name> cifs_crypt Type of storage to configure. Enter a string value. Press Enter for the default (\"\"). Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / JottaCloud \\ \"jottacloud\" 14 / Local Disk \\ \"local\" 15 / Mega \\ \"mega\" 16 / Microsoft Azure Blob Storage \\ \"azureblob\" 17 / Microsoft OneDrive \\ \"onedrive\" 18 / OpenDrive \\ \"opendrive\" 19 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 20 / Pcloud \\ \"pcloud\" 21 / QingCloud Object Storage \\ \"qingstor\" 22 / SSH/SFTP Connection \\ \"sftp\" 23 / Webdav \\ \"webdav\" 24 / Yandex Disk \\ \"yandex\" 25 / http Connection \\ \"http\" Storage> 8 Remote to encrypt/decrypt. Normally should contain a ':' and a path, eg \"myremote:path/to/dir\", \"myremote:bucket\" or maybe \"myremote:\" (not recommended). Enter a string value. Press Enter for the default (\"\"). remote> /mnt/.cifs How to encrypt the filenames. Enter a string value. Press Enter for the default (\"standard\"). Choose a number from below, or type in your own value 1 / Don't encrypt the file names. Adds a \".bin\" extension only. \\ \"off\" 2 / Encrypt the filenames see the docs for the details. \\ \"standard\" 3 / Very simple filename obfuscation. \\ \"obfuscate\" filename_encryption> 2 Option to either encrypt directory names or leave them intact. Enter a boolean value (true or false). Press Enter for the default (\"true\"). Choose a number from below, or type in your own value 1 / Encrypt directory names. \\ \"true\" 2 / Don't encrypt directory names, leave them intact. \\ \"false\" directory_name_encryption> 1 Password or pass phrase for encryption. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? Please note that an obscured version of this password (and not the password itself) will be stored under your configuration file, so keep this generated password in a safe place. y) Yes n) No y/n> y Password or pass phrase for salt. Optional but recommended. Should be different to the previous password. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? Please note that an obscured version of this password (and not the password itself) will be stored under your configuration file, so keep this generated password in a safe place. y) Yes n) No y/n> y Edit advanced config? (y/n) y) Yes n) No y/n> y For all files listed show how the names encrypt. Enter a boolean value (true or false). Press Enter for the default (\"false\"). show_mapping> Remote config -------------------- [cifs_crypt] type = crypt remote = /mnt/.cifs filename_encryption = standard directory_name_encryption = true password = *** ENCRYPTED *** password2 = *** ENCRYPTED *** -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== cifs_crypt crypt e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> q Test if Rclone can mount: screen -S 'rclone' sudo rclone mount --config /var/www/.conf/rclone/rclone.conf --uid $(id -u www-data) --gid $(id -g www-data) --umask 002 --allow-other cifs_crypt: /mnt/cifs Unmount it: sudo fusermount -uz /mnt/cifs Create systemd startup script /etc/systemd/system/rclone.service : cat << EOF | sudo tee /etc/systemd/system/rclone.service [Unit] Description=rclone encryption mount AssertPathIsDirectory=/mnt/cifs [Service] Type=simple ExecStart=/usr/bin/rclone mount --config /var/www/.conf/rclone/rclone.conf --uid $(id -u www-data) --gid $(id -g www-data) --umask 007 --allow-other cifs_crypt: /mnt/cifs ExecStop=/bin/fusermount -uz /mnt/cifs Restart=on-abort RestartSec=5 StartLimitInterval=60s StartLimitBurst=3 [Install] WantedBy=default.target EOF Refresh your daemons: sudo systemctl daemon-reload Activate the auto startup option and start the service: sudo systemctl enable rclone.service && \\ sudo systemctl start rclone.service Install Nextcloud \u00b6 Nginx/certnpt \u00b6 Install nginx: sudo apt update && \\ sudo apt install -y \\ nginx \\ python3 \\ python3-pip && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx PHP 7.2 \u00b6 Install php7.2: sudo apt install software-properties-common -y && \\ sudo add-apt-repository ppa:ondrej/php -y && \\ sudo apt install php7.2-fpm php7.2-curl php7.2-cli php7.2-mysql php7.2-gd php7.2-iconv php7.2-xsl php7.2-json php7.2-intl php-pear php-imagick php7.2-dev php7.2-common php7.2-mbstring php7.2-zip php7.2-soap php-apcu -y Restart php-fpm and nginx: sudo systemctl restart php7.2-fpm.service nginx.service Modify php.ini's: sudo sed -i -e 's/^;date.timezone =*$/date.timezone = Europe\\/Berlin/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*cgi\\.fix_pathinfo=.*$/cgi.fix_pathinfo=0/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.enable=.*$/opcache.enable=1/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.enable_cli=.*$/opcache.enable_cli=1/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.interned_strings_buffer=.*$/opcache.interned_strings_buffer=8/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.max_accelerated_files=.*$/opcache.max_accelerated_files=10000/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.memory_consumption=.*$/opcache.memory_consumption=128/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.save_comments=.*$/opcache.save_comments=1/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.revalidate_freq=.*$/opcache.revalidate_freq=1/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^;date.timezone =*$/date.timezone = Europe\\/Berlin/' /etc/php/7.2/cli/php.ini && \\ sudo sed -i -e 's/^.*cgi\\.fix_pathinfo=.*$/cgi.fix_pathinfo=0/' /etc/php/7.2/cli/php.ini Uncomment those lines below: vim /etc/php/7.1/fpm/pool.d/www.conf : env[HOSTNAME] = $HOSTNAME env[PATH] = /usr/local/bin:/usr/bin:/bin env[TMP] = /tmp env[TMPDIR] = /tmp env[TEMP] = /tmp Restart php-fpm: sudo systemctl restart php7.2-fpm && \\ sudo systemctl enable php7.2-fpm MariaDB \u00b6 Install MariaDB: sudo apt install mariadb-server mariadb-client -y Secure MariaDB installtion: sudo mysql_secure_installation Log: NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we'll need the current password for the root user. If you've just installed MariaDB, and you haven't set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MariaDB root user without the proper authorisation. Set root password? [Y/n] y New password: Re-enter new password: Password updated successfully! Reloading privilege tables.. ... Success! By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] y ... Success! By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! Login to MariaDB as root : sudo mysql -u root -p Warning CHANGE THE DEAFAULT PASSWORD! Create a Nextcloud DB: create database nextcloud; create user nextcloud@localhost identified by 'PASSWORD'; grant all privileges on nextcloud.* to nextcloud@localhost identified by 'PASSWORD'; flush privileges; Exit MariaDB client with CTRL+D . Nginx config \u00b6 Remove alll current servers: sudo rm /etc/nginx/sites-enabled/* All general HTTP to HTTPS redirector: read -r -d '' read_tmp<<\"EOF\" server { \\tlisten 80 default_server; \\tlisten [::]:80 default_server; \\tserver_name _; \\treturn 301 https://$host$request_uri; } EOF echo -e \"$read_tmp\" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf Add ssl_params file: cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF Add nextcloud server: cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-cloud.pphg.tech.conf && \\ sudo ln -s ../sites-available/10-cloud.pphg.tech.conf /etc/nginx/sites-enabled/10-cloud.pphg.tech.conf upstream php-handler { \\t#server 127.0.0.1:9000; \\tserver unix:/run/php/php7.2-fpm.sock; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tcloud.pphg.tech; \\taccess_log\\t/var/log/nginx/cloud.pphg.tech_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/cloud.pphg.tech_error.log warn; \\t# Add headers to serve security related headers \\t# Before enabling Strict-Transport-Security headers please read into this \\t# topic first. \\t# add_header Strict-Transport-Security \"max-age=15552000; \\t# includeSubDomains; preload;\"; \\t# \\t# WARNING: Only add the preload option once you read about \\t# the consequences in https://hstspreload.org/. This option \\t# will add the domain to a hardcoded list that is shipped \\t# in all major browsers and getting removed from this list \\t# could take several months. \\tadd_header X-Content-Type-Options nosniff; \\tadd_header X-XSS-Protection \"1; mode=block\"; \\tadd_header X-Robots-Tag none; \\tadd_header X-Download-Options noopen; \\tadd_header X-Permitted-Cross-Domain-Policies none; \\tadd_header 'Referrer-Policy' 'strict-origin'; \\t# Path to the root of your installation \\troot /var/www/nextcloud/; \\tlocation = /data/htaccesstest.txt { \\t\\tallow all; \\t\\tlog_not_found off; \\t\\taccess_log off; \\t} \\tlocation = /robots.txt { \\t\\tallow all; \\t\\tlog_not_found off; \\t\\taccess_log off; \\t} \\tlocation = /.well-known/carddav { \\t\\treturn 301 \\$scheme://\\$host/remote.php/dav; \\t} \\tlocation = /.well-known/caldav { \\t\\treturn 301 \\$scheme://\\$host/remote.php/dav; \\t} \\t# set max upload size \\tclient_max_body_size 512M; \\tfastcgi_buffers 64 4K; \\t# Enable gzip but do not remove ETag headers \\tgzip on; \\tgzip_vary on; \\tgzip_comp_level 4; \\tgzip_min_length 256; \\tgzip_proxied expired no-cache no-store private no_last_modified no_etag auth; \\tgzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; \\tlocation / { \\t\\trewrite ^ /index.php\\$request_uri; \\t} \\tlocation ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ { \\t\\tdeny all; \\t} \\tlocation ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) { \\t\\tdeny all; \\t} \\tlocation ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+)\\.php(?:\\$|/) { \\t\\tfastcgi_split_path_info ^(.+?\\.php)(/.*)\\$; \\t\\tinclude fastcgi_params; \\t\\tfastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name; \\t\\tfastcgi_param PATH_INFO \\$fastcgi_path_info; \\t\\tfastcgi_param HTTPS on; \\t\\t#Avoid sending the security headers twice \\t\\tfastcgi_param modHeadersAvailable true; \\t\\tfastcgi_param front_controller_active true; \\t\\tfastcgi_pass php-handler; \\t\\tfastcgi_intercept_errors on; \\t\\tfastcgi_request_buffering off; \\t} \\tlocation ~ ^/(?:updater|ocs-provider)(?:\\$|/) { \\t\\ttry_files \\$uri/ =404; \\t\\tindex index.php; \\t} \\t# Adding the cache control header for js and css files \\t# Make sure it is BELOW the PHP block \\tlocation ~ \\.(?:css|js|woff|svg|gif)\\$ { \\t\\ttry_files \\$uri /index.php\\$request_uri; \\t\\tadd_header Cache-Control \"public, max-age=15778463\"; \\t\\t# Add headers to serve security related headers (It is intended to \\t\\t# have those duplicated to the ones above) \\t\\t# Before enabling Strict-Transport-Security headers please read into \\t\\t# this topic first. \\t\\t# add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\"; \\t\\t# \\t\\t# WARNING: Only add the preload option once you read about \\t\\t# the consequences in https://hstspreload.org/. This option \\t\\t# will add the domain to a hardcoded list that is shipped \\t\\t# in all major browsers and getting removed from this list \\t\\t# could take several months. \\t\\tadd_header X-Content-Type-Options nosniff; \\t\\tadd_header X-XSS-Protection \"1; mode=block\"; \\t\\tadd_header X-Robots-Tag none; \\t\\tadd_header X-Download-Options noopen; \\t\\tadd_header X-Permitted-Cross-Domain-Policies none; \\t\\t# Optional: Don't log access to assets \\t\\taccess_log off; \\t} \\tlocation ~ \\.(?:png|html|ttf|ico|jpg|jpeg)\\$ { \\t\\ttry_files \\$uri /index.php\\$request_uri; \\t\\t# Optional: Don't log access to other assets \\t\\taccess_log off; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if the nginx configuration is correct: sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. sudo certbot --nginx -d cloud.pphg.tech && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/cloud.pphg.tech/chain.pem;' /etc/nginx/sites-available/10-cloud.pphg.tech.conf && \\ sudo systemctl reload nginx.service Add cronjob for renewing cetificates: sudo crontab -e : 0 */12 * * * /usr/local/bin/certbot renew Download Nextcloud \u00b6 Install required packages: sudo apt install wget unzip zip -y Download newstest Nextcloud stable release into /var/www/ : cd /var/www/ && \\ sudo wget https://download.nextcloud.com/server/releases/latest.zip && \\ sudo unzip latest.zip && \\ sudo rm latest.zip && \\ sudo chown -R www-data:www-data /var/www/nextcloud/ Create a Nextcloud Data directory: sudo -u www-data mkdir /mnt/cifs/ncdata Add the following to the /var/www/nextcloud/config/config.php file: 'memcache.local' => '\\OC\\Memcache\\APCu', Install NextCloud \u00b6 Go to https://cloud.pphg.tech and use the following varaibles: * User: root * PW: *** * Data folder: /mnt/cifs/ncdata/ * Database user: nextcloud * Database pw: *** * Database name: nextcloud Enable the Audit / Logging App! Afterwards go to Settings > Basic settings and setup the email server: * Background jobs * Cron * Email server * to your needs Security \u00b6 iptables \u00b6 Explanation iptables rules # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow quassel incoming iptables -t filter -A INPUT -i ens3 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow ESTABLISHED and RELATED connection (important for outgoing connections!) iptables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on iptables -P INPUT DROP # Policy ACCEPT OUTPUT iptables -P OUTPUT ACCEPT Set up needed iptables rules: sudo iptables -A OUTPUT -o lo -j ACCEPT; \\ sudo iptables -A INPUT -i lo -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i ens3 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i ens3 -p icmp -j ACCEPT; \\ sudo iptables -P INPUT DROP; \\ sudo iptables -P OUTPUT ACCEPT Set up needed ip6tables rules: sudo ip6tables -A OUTPUT -o lo -j ACCEPT; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p ipv6-icmp -j ACCEPT; \\ sudo ip6tables -P INPUT DROP; \\ sudo ip6tables -P OUTPUT ACCEPT Persist iptables rules: sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload fail2Ban (SSH/Nextcloud) \u00b6 Backup Nextcloud \u00b6","title":"NextCloud"},{"location":"software/nextcloud/#nextcloud","text":"OS: Ubuntu 18.04 LTS Preinstalled with lvm and LUKS encryption.","title":"NextCloud"},{"location":"software/nextcloud/#initial-server-setup","text":"","title":"Initial Server setup"},{"location":"software/nextcloud/#update-system","text":"apt update && apt full-upgrade -y","title":"Update System"},{"location":"software/nextcloud/#fix-locale","text":"cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF","title":"Fix locale"},{"location":"software/nextcloud/#edit-bashrc","text":"/root/.bashrc / /etc/skel/.bashrc : # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi","title":"Edit .bashrc"},{"location":"software/nextcloud/#make-vim-colored-with-dark-background-settinfs","text":"cat << EOF | sudo tee -a /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Make vim colored with dark background settinfs"},{"location":"software/nextcloud/#change-the-ssh-deamon-to-allow-only-ssh-keys","text":"cat << EOF | sudo tee /etc/ssh/sshd_config && sudo systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF","title":"Change the SSH deamon to allow only SSH-keys"},{"location":"software/nextcloud/#install-base-packages","text":"sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop","title":"Install base packages"},{"location":"software/nextcloud/#install-and-configure-busyboxdropbear","text":"Install busybox and dropbear: sudo apt update && sudo apt full-upgrade -y && sudo apt install -y busybox dropbear Edit your /etc/initramfs-tools/initramfs.conf and set BUSYBOX=y : sudo sed -i -e 's/^BUSYBOX=.*$/BUSYBOX=y/' /etc/initramfs-tools/initramfs.conf && \\ cat << EOF | sudo tee -a /etc/initramfs-tools/initramfs.conf # # DROPBEAR # DROPBEAR=y EOF Set dropbear to start: sudo sed -i 's/^NO_START.*$/NO_START=0/' /etc/default/dropbear Change dropear port to 2222 : sudo sed -i 's/^#DROPBEAR_OPTIONS.*$/DROPBEAR_OPTIONS=\"-p 2222\"/' /etc/dropbear-initramfs/config crypt_unlock.sh #!/bin/sh PREREQ=\"dropbear\" prereqs() { echo \"$PREREQ\" } case \"$1\" in prereqs) prereqs exit 0 ;; esac . \"${CONFDIR}/initramfs.conf\" . /usr/share/initramfs-tools/hook-functions if [ \"${DROPBEAR}\" != \"n\" ] && [ -r \"/etc/crypttab\" ] ; then cat > \"${DESTDIR}/bin/unlock\" << EOF #!/bin/sh if PATH=/lib/unlock:/bin:/sbin /scripts/local-top/cryptroot; then kill \\`ps | grep cryptroot | grep -v \"grep\" | awk '{print \\$1}'\\` # following line kill the remote shell right after the passphrase has # been entered. kill -9 \\`ps | grep \"\\-sh\" | grep -v \"grep\" | awk '{print \\$1}'\\` exit 0 fi exit 1 EOF chmod 755 \"${DESTDIR}/bin/unlock\" mkdir -p \"${DESTDIR}/lib/unlock\" cat > \"${DESTDIR}/lib/unlock/plymouth\" << EOF #!/bin/sh [ \"\\$1\" == \"--ping\" ] && exit 1 /bin/plymouth \"\\$@\" EOF chmod 755 \"${DESTDIR}/lib/unlock/plymouth\" echo To unlock root-partition run \"unlock\" >> ${DESTDIR}/etc/motd fi Get the unlock script: sudo wget -O /etc/initramfs-tools/hooks/crypt_unlock.sh https://gist.githubusercontent.com/gusennan/712d6e81f5cf9489bd9f/raw/fda73649d904ee0437fe3842227ad8ac8ca487d1/crypt_unlock.sh && \\ sudo chmod +x /etc/initramfs-tools/hooks/crypt_unlock.sh && \\ sudo update-initramfs -u && \\ sudo systemctl disable dropbear Add your ssh keys to the busybox authorized keys: cat << EOF | sudo tee /etc/dropbear-initramfs/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAgEAwVT82+FIbeVNjJ3Waa3Z0ysmG+DNhX6qUN5C2o3lT158WCcWgDU5qs/DgJDQFVK+m33cvozdaoV2sreSHmKLlM77k5zU+OTDswrEaJ53CRSu7tgT6ZRI2ggxzhvrw6xq1bmTlSuaojSmaJNDZllgFtrlG1XXGSgkgyDtyJuUk16MwKU4zLAWOluwrZBMIvlafNnJS4K385rI2NNIMUvWHjfxYTxAFAtqBZFacz/kQ9jm4UYT+v7YOXu48Cgul6S51eNbK0rUe7DU7+1xzusdhyqHq7FnFugvW6OYy3ft3y/ri/7qvKAhtwQSo6A8cgLVlPnMKdDWq/QAC6dLGcUEHJPJDYumMpM6ijrfd1DCpB+ELr/dFHgR5l6++OJM2/kl4f3ue1gp5b//6osnfMhWrQXbmk8WLF31IXmaZnwlcKKEvgNQL5O9U39HRuZBvXh5aib/vFtQ5ge6l1wG+eFLrMHjeLPDYCYuNliPisjmLNUb+0KyfDR2KnrqwZVXMOiKdh+S4OaXW7T+woykZ3u7FODfZwcRdnEgZFxYLSHRh8U/7fFzbAD4jJH29D9nHz46hx0OdEtiDJoeujf+GLXw4c7P2G+IYlPVg6sPJ5W+oky5gboQh13IOnFXFXd5kYuWnzOU/4ITy4vHw2WowbCYMFY5GNrRzRMpmcIj55OXrwM= 71:72:8d:23:dd:13:ea:90:17:35:4e:0a:2b:c7:d5:91 Philip Henning (mail@philip-henning.com) ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCZntAPXzfGddkOxodxRCv2zBgbqHo9aAqtvoiZD0NuuBkYj3tSMKELMi0corvtXHy3iTa6EAKVc/AQqsNrggOeIYHwCSXZZ67sa0YxItDD3+YBm/v65EK/sspvq+xPD8IyZyYWDy6CmK1HiBlv6TFnGlN5PuFKfPJFBYEkx0Dzjl3i1r+xSpPKOcVgtPDs3MIYvBB1Y8Sig+JZehBELiioBQaWjKDPBJYsLQzqjGPLcBb/h1H729P6B4oW7A1LYsStJd5UDfknOgdx4pPoSCFBE5aEDO/0efqPcN7jQWlrrsc+OEWRW7k7EA45+9x6vjjUCO8IgKQFAIiOJadDPEaNAJnza4IpCspePeITZ3iyXo2/w9/BrzyNnW+arJ1QWjZ79W9mPXg4CTvUsnMQ55BRw2meLBxQqgkr9H8Cf/IxCEB2bPYPecCcVZj4djjgVbzlY/2/vFPDmB3Idx+AagACJZoDoWqaqlloC+fPyovG9iCjA+7iMEg4OR7kD/GCKGRmNzPmKNgkBwp62eyP4L9197bhIywMkaVEofqzHNOFly1f7KTEK/Dgo6GHCCsFLnvnPyZDvJ8o7bG7svan4e1KmY5JLSKZrtkPMJzvNmEUGsGlwFMWtNEhiGG01YiTIBcG3Z7N8lpi8Bcoti2Lq5chzApAwhHkykasHq218QPnpQ== a0:ce:a9:b4:c1:e8:c7:0e:ed:02:15:a0:58:56:34:64 matze ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAgEAyhhxTowK157f2bZiV5W9Vy0wemmo07EuH2un6boKjzQ8oNDB3AKUeLgef76spBZZQ668kkwL+qDcCssPuRUdrxuclTw7bgf+RtYV1dkxRxCXfMqT4Gxsz2VOAClImWY9cmWSkigzZfS0/R2JTTO+H2ohOqRGqLH0dNjswRYW33mMMCy6ksZgv4Bin9B5j6u9fsj4AcwtEMiNVKXMX9z6FELo9/ayWwvnEmzL9Bs8qR9+7jLbhaJJeJNZEh/teZu3w5/ahHtj0rWHZ0F/XNmAKFCS9M/buExXw3RF0PAByAJN+J4uMzcqx64guKoe5J1Sz5OZy+Tn/IICLv0oKggnfT1BPXwUAHm+8jGW/q1NFKXc2IanhS6wkBlJUWawEupJHj2TIdTI55mscsUH9g9a0WI7dSiZkkER8HoJYg5vZZ9y7OoklK8zPuGWPeOcIStCROXkTT/o0W/S7SVPKXeXrj3FNzV2Ibw8V3YSMJpA9f52kMkVp1Jzr8/L0i7vSuLIU628rVj1QBvmE1funKMEa9uWdqSgOZyVYVBzXzlahA8D/lBK8cX2Qplq9Wt/pUGPS+OczPwDW2IcRIdkVt/crCgxiYOaZxh853zMR1BHL9bZcwnL6voSgCi0uRzfBA4wEGCiZN7qoIVAs1axraet3G95rASzLI4qzlc5vtiUq98= 54:7e:57:18:15:f4:59:0f:d1:81:69:d9:dc:53:6e:0a robin@beismann.biz EOF Regenerate the initramfs: sudo update-initramfs -u && \\ sudo update-grub && \\ sudo grub-install /dev/vda","title":"Install and configure busybox/dropbear"},{"location":"software/nextcloud/#mount-external-storage","text":"","title":"Mount external storage"},{"location":"software/nextcloud/#pre-requirements","text":"Install cifs-utils: sudo apt install -y cifs-utils","title":"pre requirements"},{"location":"software/nextcloud/#mount-mounts","text":"while true; do \\ unset pw; \\ unset pw_confirm; \\ read -p \"cifs user: \" cifs_user && \\ read -s -p \"cifs password: \" pw; echo \"\" && \\ read -s -p \"Confirm admin user password: \" pw_confirm; echo \"\" && \\ if [[ \"$pw\" == \"$pw_confirm\" ]]; then \\ break; \\ else \\ echo \"Your passwords don't match. Try again!\"; \\ echo \"\"; \\ fi; \\ done; \\ if [[ ! -d /mnt/.cifs ]]; then sudo mkdir /mnt/.cifs; fi; \\ sudo chmod 400 /mnt/.cifs; \\ cat << EOF | sudo tee -a /etc/fstab && \\ sudo mount -a # Cifs shared storage //io.servercow.de/home /mnt/.cifs cifs username=$cifs_user,password=$pw,uid=www-data,gid=www-data,file_mode=0660,dir_mode=0770 0 0 EOF","title":"Mount mounts"},{"location":"software/nextcloud/#install-rclone","text":"Install rclone: curl https://rclone.org/install.sh | sudo bash create mountpoint: sudo mkdir /mnt/cifs && \\ sudo chmod 400 /mnt/cifs","title":"Install rclone"},{"location":"software/nextcloud/#configure","text":"Open rclone configuration: if [[ ! -d /mnt/.cifs ]]; then sudo mkdir -p /var/www/.conf/rclone/; fi && \\ sudo chmod 700 /var/www/.conf/rclone/ && \\ sudo chown www-data:www-data /var/www/.conf/rclone/ && \\ sudo -u www-data rclone config --config /var/www/.conf/rclone/rclone.conf && \\ sudo chmod 600 /var/www/.conf/rclone/rclone.conf Configuration log: 2018/09/09 21:09:35 NOTICE: Config file \"/var/www/.conf/rclone/rclone.conf\" not found - using defaults No remotes found - make a new one n) New remote s) Set configuration password q) Quit config n/s/q> n name> cifs_crypt Type of storage to configure. Enter a string value. Press Enter for the default (\"\"). Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / JottaCloud \\ \"jottacloud\" 14 / Local Disk \\ \"local\" 15 / Mega \\ \"mega\" 16 / Microsoft Azure Blob Storage \\ \"azureblob\" 17 / Microsoft OneDrive \\ \"onedrive\" 18 / OpenDrive \\ \"opendrive\" 19 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 20 / Pcloud \\ \"pcloud\" 21 / QingCloud Object Storage \\ \"qingstor\" 22 / SSH/SFTP Connection \\ \"sftp\" 23 / Webdav \\ \"webdav\" 24 / Yandex Disk \\ \"yandex\" 25 / http Connection \\ \"http\" Storage> 8 Remote to encrypt/decrypt. Normally should contain a ':' and a path, eg \"myremote:path/to/dir\", \"myremote:bucket\" or maybe \"myremote:\" (not recommended). Enter a string value. Press Enter for the default (\"\"). remote> /mnt/.cifs How to encrypt the filenames. Enter a string value. Press Enter for the default (\"standard\"). Choose a number from below, or type in your own value 1 / Don't encrypt the file names. Adds a \".bin\" extension only. \\ \"off\" 2 / Encrypt the filenames see the docs for the details. \\ \"standard\" 3 / Very simple filename obfuscation. \\ \"obfuscate\" filename_encryption> 2 Option to either encrypt directory names or leave them intact. Enter a boolean value (true or false). Press Enter for the default (\"true\"). Choose a number from below, or type in your own value 1 / Encrypt directory names. \\ \"true\" 2 / Don't encrypt directory names, leave them intact. \\ \"false\" directory_name_encryption> 1 Password or pass phrase for encryption. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? Please note that an obscured version of this password (and not the password itself) will be stored under your configuration file, so keep this generated password in a safe place. y) Yes n) No y/n> y Password or pass phrase for salt. Optional but recommended. Should be different to the previous password. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? Please note that an obscured version of this password (and not the password itself) will be stored under your configuration file, so keep this generated password in a safe place. y) Yes n) No y/n> y Edit advanced config? (y/n) y) Yes n) No y/n> y For all files listed show how the names encrypt. Enter a boolean value (true or false). Press Enter for the default (\"false\"). show_mapping> Remote config -------------------- [cifs_crypt] type = crypt remote = /mnt/.cifs filename_encryption = standard directory_name_encryption = true password = *** ENCRYPTED *** password2 = *** ENCRYPTED *** -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== cifs_crypt crypt e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> q Test if Rclone can mount: screen -S 'rclone' sudo rclone mount --config /var/www/.conf/rclone/rclone.conf --uid $(id -u www-data) --gid $(id -g www-data) --umask 002 --allow-other cifs_crypt: /mnt/cifs Unmount it: sudo fusermount -uz /mnt/cifs Create systemd startup script /etc/systemd/system/rclone.service : cat << EOF | sudo tee /etc/systemd/system/rclone.service [Unit] Description=rclone encryption mount AssertPathIsDirectory=/mnt/cifs [Service] Type=simple ExecStart=/usr/bin/rclone mount --config /var/www/.conf/rclone/rclone.conf --uid $(id -u www-data) --gid $(id -g www-data) --umask 007 --allow-other cifs_crypt: /mnt/cifs ExecStop=/bin/fusermount -uz /mnt/cifs Restart=on-abort RestartSec=5 StartLimitInterval=60s StartLimitBurst=3 [Install] WantedBy=default.target EOF Refresh your daemons: sudo systemctl daemon-reload Activate the auto startup option and start the service: sudo systemctl enable rclone.service && \\ sudo systemctl start rclone.service","title":"configure"},{"location":"software/nextcloud/#install-nextcloud","text":"","title":"Install Nextcloud"},{"location":"software/nextcloud/#nginxcertnpt","text":"Install nginx: sudo apt update && \\ sudo apt install -y \\ nginx \\ python3 \\ python3-pip && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx","title":"Nginx/certnpt"},{"location":"software/nextcloud/#php-72","text":"Install php7.2: sudo apt install software-properties-common -y && \\ sudo add-apt-repository ppa:ondrej/php -y && \\ sudo apt install php7.2-fpm php7.2-curl php7.2-cli php7.2-mysql php7.2-gd php7.2-iconv php7.2-xsl php7.2-json php7.2-intl php-pear php-imagick php7.2-dev php7.2-common php7.2-mbstring php7.2-zip php7.2-soap php-apcu -y Restart php-fpm and nginx: sudo systemctl restart php7.2-fpm.service nginx.service Modify php.ini's: sudo sed -i -e 's/^;date.timezone =*$/date.timezone = Europe\\/Berlin/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*cgi\\.fix_pathinfo=.*$/cgi.fix_pathinfo=0/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.enable=.*$/opcache.enable=1/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.enable_cli=.*$/opcache.enable_cli=1/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.interned_strings_buffer=.*$/opcache.interned_strings_buffer=8/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.max_accelerated_files=.*$/opcache.max_accelerated_files=10000/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.memory_consumption=.*$/opcache.memory_consumption=128/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.save_comments=.*$/opcache.save_comments=1/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.revalidate_freq=.*$/opcache.revalidate_freq=1/' /etc/php/7.2/fpm/php.ini && \\ sudo sed -i -e 's/^;date.timezone =*$/date.timezone = Europe\\/Berlin/' /etc/php/7.2/cli/php.ini && \\ sudo sed -i -e 's/^.*cgi\\.fix_pathinfo=.*$/cgi.fix_pathinfo=0/' /etc/php/7.2/cli/php.ini Uncomment those lines below: vim /etc/php/7.1/fpm/pool.d/www.conf : env[HOSTNAME] = $HOSTNAME env[PATH] = /usr/local/bin:/usr/bin:/bin env[TMP] = /tmp env[TMPDIR] = /tmp env[TEMP] = /tmp Restart php-fpm: sudo systemctl restart php7.2-fpm && \\ sudo systemctl enable php7.2-fpm","title":"PHP 7.2"},{"location":"software/nextcloud/#mariadb","text":"Install MariaDB: sudo apt install mariadb-server mariadb-client -y Secure MariaDB installtion: sudo mysql_secure_installation Log: NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we'll need the current password for the root user. If you've just installed MariaDB, and you haven't set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MariaDB root user without the proper authorisation. Set root password? [Y/n] y New password: Re-enter new password: Password updated successfully! Reloading privilege tables.. ... Success! By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] y ... Success! By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! Login to MariaDB as root : sudo mysql -u root -p Warning CHANGE THE DEAFAULT PASSWORD! Create a Nextcloud DB: create database nextcloud; create user nextcloud@localhost identified by 'PASSWORD'; grant all privileges on nextcloud.* to nextcloud@localhost identified by 'PASSWORD'; flush privileges; Exit MariaDB client with CTRL+D .","title":"MariaDB"},{"location":"software/nextcloud/#nginx-config","text":"Remove alll current servers: sudo rm /etc/nginx/sites-enabled/* All general HTTP to HTTPS redirector: read -r -d '' read_tmp<<\"EOF\" server { \\tlisten 80 default_server; \\tlisten [::]:80 default_server; \\tserver_name _; \\treturn 301 https://$host$request_uri; } EOF echo -e \"$read_tmp\" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf Add ssl_params file: cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF Add nextcloud server: cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-cloud.pphg.tech.conf && \\ sudo ln -s ../sites-available/10-cloud.pphg.tech.conf /etc/nginx/sites-enabled/10-cloud.pphg.tech.conf upstream php-handler { \\t#server 127.0.0.1:9000; \\tserver unix:/run/php/php7.2-fpm.sock; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tcloud.pphg.tech; \\taccess_log\\t/var/log/nginx/cloud.pphg.tech_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/cloud.pphg.tech_error.log warn; \\t# Add headers to serve security related headers \\t# Before enabling Strict-Transport-Security headers please read into this \\t# topic first. \\t# add_header Strict-Transport-Security \"max-age=15552000; \\t# includeSubDomains; preload;\"; \\t# \\t# WARNING: Only add the preload option once you read about \\t# the consequences in https://hstspreload.org/. This option \\t# will add the domain to a hardcoded list that is shipped \\t# in all major browsers and getting removed from this list \\t# could take several months. \\tadd_header X-Content-Type-Options nosniff; \\tadd_header X-XSS-Protection \"1; mode=block\"; \\tadd_header X-Robots-Tag none; \\tadd_header X-Download-Options noopen; \\tadd_header X-Permitted-Cross-Domain-Policies none; \\tadd_header 'Referrer-Policy' 'strict-origin'; \\t# Path to the root of your installation \\troot /var/www/nextcloud/; \\tlocation = /data/htaccesstest.txt { \\t\\tallow all; \\t\\tlog_not_found off; \\t\\taccess_log off; \\t} \\tlocation = /robots.txt { \\t\\tallow all; \\t\\tlog_not_found off; \\t\\taccess_log off; \\t} \\tlocation = /.well-known/carddav { \\t\\treturn 301 \\$scheme://\\$host/remote.php/dav; \\t} \\tlocation = /.well-known/caldav { \\t\\treturn 301 \\$scheme://\\$host/remote.php/dav; \\t} \\t# set max upload size \\tclient_max_body_size 512M; \\tfastcgi_buffers 64 4K; \\t# Enable gzip but do not remove ETag headers \\tgzip on; \\tgzip_vary on; \\tgzip_comp_level 4; \\tgzip_min_length 256; \\tgzip_proxied expired no-cache no-store private no_last_modified no_etag auth; \\tgzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; \\tlocation / { \\t\\trewrite ^ /index.php\\$request_uri; \\t} \\tlocation ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ { \\t\\tdeny all; \\t} \\tlocation ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) { \\t\\tdeny all; \\t} \\tlocation ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+)\\.php(?:\\$|/) { \\t\\tfastcgi_split_path_info ^(.+?\\.php)(/.*)\\$; \\t\\tinclude fastcgi_params; \\t\\tfastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name; \\t\\tfastcgi_param PATH_INFO \\$fastcgi_path_info; \\t\\tfastcgi_param HTTPS on; \\t\\t#Avoid sending the security headers twice \\t\\tfastcgi_param modHeadersAvailable true; \\t\\tfastcgi_param front_controller_active true; \\t\\tfastcgi_pass php-handler; \\t\\tfastcgi_intercept_errors on; \\t\\tfastcgi_request_buffering off; \\t} \\tlocation ~ ^/(?:updater|ocs-provider)(?:\\$|/) { \\t\\ttry_files \\$uri/ =404; \\t\\tindex index.php; \\t} \\t# Adding the cache control header for js and css files \\t# Make sure it is BELOW the PHP block \\tlocation ~ \\.(?:css|js|woff|svg|gif)\\$ { \\t\\ttry_files \\$uri /index.php\\$request_uri; \\t\\tadd_header Cache-Control \"public, max-age=15778463\"; \\t\\t# Add headers to serve security related headers (It is intended to \\t\\t# have those duplicated to the ones above) \\t\\t# Before enabling Strict-Transport-Security headers please read into \\t\\t# this topic first. \\t\\t# add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\"; \\t\\t# \\t\\t# WARNING: Only add the preload option once you read about \\t\\t# the consequences in https://hstspreload.org/. This option \\t\\t# will add the domain to a hardcoded list that is shipped \\t\\t# in all major browsers and getting removed from this list \\t\\t# could take several months. \\t\\tadd_header X-Content-Type-Options nosniff; \\t\\tadd_header X-XSS-Protection \"1; mode=block\"; \\t\\tadd_header X-Robots-Tag none; \\t\\tadd_header X-Download-Options noopen; \\t\\tadd_header X-Permitted-Cross-Domain-Policies none; \\t\\t# Optional: Don't log access to assets \\t\\taccess_log off; \\t} \\tlocation ~ \\.(?:png|html|ttf|ico|jpg|jpeg)\\$ { \\t\\ttry_files \\$uri /index.php\\$request_uri; \\t\\t# Optional: Don't log access to other assets \\t\\taccess_log off; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if the nginx configuration is correct: sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. sudo certbot --nginx -d cloud.pphg.tech && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/cloud.pphg.tech/chain.pem;' /etc/nginx/sites-available/10-cloud.pphg.tech.conf && \\ sudo systemctl reload nginx.service Add cronjob for renewing cetificates: sudo crontab -e : 0 */12 * * * /usr/local/bin/certbot renew","title":"Nginx config"},{"location":"software/nextcloud/#download-nextcloud","text":"Install required packages: sudo apt install wget unzip zip -y Download newstest Nextcloud stable release into /var/www/ : cd /var/www/ && \\ sudo wget https://download.nextcloud.com/server/releases/latest.zip && \\ sudo unzip latest.zip && \\ sudo rm latest.zip && \\ sudo chown -R www-data:www-data /var/www/nextcloud/ Create a Nextcloud Data directory: sudo -u www-data mkdir /mnt/cifs/ncdata Add the following to the /var/www/nextcloud/config/config.php file: 'memcache.local' => '\\OC\\Memcache\\APCu',","title":"Download Nextcloud"},{"location":"software/nextcloud/#install-nextcloud_1","text":"Go to https://cloud.pphg.tech and use the following varaibles: * User: root * PW: *** * Data folder: /mnt/cifs/ncdata/ * Database user: nextcloud * Database pw: *** * Database name: nextcloud Enable the Audit / Logging App! Afterwards go to Settings > Basic settings and setup the email server: * Background jobs * Cron * Email server * to your needs","title":"Install NextCloud"},{"location":"software/nextcloud/#security","text":"","title":"Security"},{"location":"software/nextcloud/#iptables","text":"Explanation iptables rules # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow quassel incoming iptables -t filter -A INPUT -i ens3 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow ESTABLISHED and RELATED connection (important for outgoing connections!) iptables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on iptables -P INPUT DROP # Policy ACCEPT OUTPUT iptables -P OUTPUT ACCEPT Set up needed iptables rules: sudo iptables -A OUTPUT -o lo -j ACCEPT; \\ sudo iptables -A INPUT -i lo -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i ens3 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i ens3 -p icmp -j ACCEPT; \\ sudo iptables -P INPUT DROP; \\ sudo iptables -P OUTPUT ACCEPT Set up needed ip6tables rules: sudo ip6tables -A OUTPUT -o lo -j ACCEPT; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p ipv6-icmp -j ACCEPT; \\ sudo ip6tables -P INPUT DROP; \\ sudo ip6tables -P OUTPUT ACCEPT Persist iptables rules: sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"iptables"},{"location":"software/nextcloud/#fail2ban-sshnextcloud","text":"","title":"fail2Ban (SSH/Nextcloud)"},{"location":"software/nextcloud/#backup-nextcloud","text":"","title":"Backup Nextcloud"},{"location":"software/playonlinux/","text":"PlayOnLinux \u00b6 Install \u00b6 # sudo pacman -S playonlinux Register Browser protocol in Firefox \u00b6 open Confoguration with about:config Right Click -> New -> Boolean: network.protocol-handler.expose.playonlinux Value: false Click on the \"Thy this update\" button Choose the following application: /usr/share/playonlinux/bash/playonlinux-url_handler","title":"PlayOnLinux"},{"location":"software/playonlinux/#playonlinux","text":"","title":"PlayOnLinux"},{"location":"software/playonlinux/#install","text":"# sudo pacman -S playonlinux","title":"Install"},{"location":"software/playonlinux/#register-browser-protocol-in-firefox","text":"open Confoguration with about:config Right Click -> New -> Boolean: network.protocol-handler.expose.playonlinux Value: false Click on the \"Thy this update\" button Choose the following application: /usr/share/playonlinux/bash/playonlinux-url_handler","title":"Register Browser protocol in Firefox"},{"location":"software/quassel/","text":"Quassel-IRC \u00b6 OS: Ubuntu 18.04 LTS Initial Server setup \u00b6 Update System \u00b6 apt update && apt full-upgrade -y Fix locale \u00b6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF Edit .bashrc \u00b6 /root/.bashrc / /etc/skel/.bashrc : # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi Make vim colored with dark background settinfs \u00b6 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF Create a new user user \u00b6 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/ Change the SSH deamon to allow only SSH-keys \u00b6 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF Delete root's authorized_keys file \u00b6 Attention Please check before if you can login to the user user with your ssh-key! rm ~/.ssh/authorized_keys Important Log out and re login as user ! Install base packages \u00b6 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop quassel core \u00b6 Pre requirements \u00b6 Add the PPA for quassel to get the latest stable version: sudo add-apt-repository ppa:mamarley/quassel && \\ sudo apt update Install cerbot (needed for ssl): sudo apt install -y certbot Install quassel core \u00b6 sudo apt install -y quassel-core && \\ systemctl status quasselcore.service Setup Let's encrypt SSL \u00b6 sudo certbot certonly --standalone -d quassel.mischaufen.de && \\ sudo mv /var/lib/quassel/quasselCert.pem /var/lib/quassel/quasselCert.pem.old && \\ sudo cat /etc/letsencrypt/live/quassel.mischaufen.de/{fullchain,privkey}.pem | sudo tee -a /var/lib/quassel/quasselCert.pem && \\ sudo chown quasselcore:quassel /var/lib/quassel/quasselCert.pem && \\ sudo chmod 600 /var/lib/quassel/quasselCert.pem && \\ sudo systemctl restart quasselcore Setup automatic certificate renew \u00b6 Add a deploy hook script to /srv/certbot : deamon='quasselcore.service'; \\ target_domain='quassel.mischaufen.de'; \\ sudo mkdir -p /srv/cerbot && \\ sudo chmod 655 /srv/cerbot && \\ cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /srv/cerbot/deploy_hook.sh && \\ sudo chmod 744 /srv/cerbot/deploy_hook.sh #!/bin/bash set -e for domain in \\$RENEWED_DOMAINS; do \\tcase \\$domain in \\t$target_domain) \\t\\tdaemon_cert_root='/var/lib/quassel' \\t\\t# Make sure the certificate and private key files are \\t\\t# never world readable, even just for an instant while \\t\\t# we're copying them into daemon_cert_root. \\t\\tumask 177 \\t\\trm \\$daemon_cert_root/quasselCert.pem \\t\\tcat \\$RENEWED_LINEAGE/{fullchain,privkey}.pem >> \"\\$daemon_cert_root/quasselCert.pem\" \\t\\t# Apply the proper file ownership and permissions for \\t\\t# the $deamon daemon to read its certificate and key. \\t\\tchown quasselcore:quassel \"\\$daemon_cert_root/quasselCert.pem\" \\t\\tchmod 400 \\$daemon_cert_root/quasselCert.pem \\t\\tsystemctl restart $deamon >/dev/null \\t\\t;; \\tesac done EOF Add cronjob for renewing cetificates. sudo crontab -e Add at the end of the file: 0 */12 * * * /usr/local/bin/certbot renew --deploy-hook /srv/cerbot/deploy_hook.sh Add user management scripts \u00b6 Add user script \u00b6 quassel_add.sh : cat << EOF | sudo tee /usr/local/sbin/quassel_add && \\ sudo chmod 500 /usr/local/sbin/quassel_add #!/bin/sh sudo -u quasselcore quasselcore --configdir=/var/lib/quassel --add-user EOF quassel_change_pw.sh : cat << EOF | sudo tee /usr/local/sbin/quassel_change_pw && \\ sudo chmod 500 /usr/local/sbin/quassel_change_pw #!/bin/sh die () { echo >&2 \"\\$@\" exit 1 } [ \"\\$#\" -eq 1 ] || die \"Username required!\\n\\nRun:\\t'\\$0 <username>'\\ne.g.:\\t'\\$0 admin'\" systemctl stop quasselcore.service sudo -u quasselcore quasselcore --configdir=/var/lib/quassel --change-userpass=\\$1 systemctl start quasselcore.service EOF quassel_del.sh : if ! [ -x \"$(command -v sqlite3)\" ]; then sudo apt install -y sqlite3; fi && \\ cat << EOF | sudo tee /usr/local/sbin/quassel_del && \\ sudo chmod 500 /usr/local/sbin/quassel_del #!/bin/sh # # Delete Quasselcore users from your SQLite database # exeq() { # Execute SQL Query result=\\$(sqlite3 \"\\${QUASSELDB}\" \"\\${1}\") echo \"\\${result}\" } usage() { echo \"Usage: \\${SCRIPT} username [database]\" } print_users() { sqlite3 \"\\${QUASSELDB}\" \"SELECT quasseluser.userid, quasseluser.username FROM quasseluser ORDER BY quasseluser.userid;\" } # Main body SCRIPT=\"\\${0}\" QUASSELDB=\"\" USER=\"\" if [ -z \"\\${2}\" ] ; then # No file supplied. QUASSELDB=\"/var/lib/quassel/quassel-storage.sqlite\" else QUASSELDB=\"\\${2}\" fi if [ -z \"\\${1}\" ] ; then echo \"No user supplied.\" echo \"Pick one: \" print_users usage exit 1 else USER=\"${1}\" fi if [ -e \"\\${QUASSELDB}\" ] ; then echo \"SELECTED DB: \\${QUASSELDB}\" else echo \"SELECTED DB '\\${QUASSELDB}' does not exist.\" usage exit 2 fi if [ -z \\$(exeq \"SELECT quasseluser.username FROM quasseluser WHERE username = '\\${USER}';\") ] ; then echo \"SELECTED USER '\\${USER}' does not exist.\" print_users usage exit 3 else echo \"SELECTED USER: \\${USER}\" fi # Sadly SQLITE does not allow DELETE statements that JOIN tables. # All queries are written with a subquery. # Contact me if you know a better way. backlogq=\"DELETE FROM backlog WHERE backlog.bufferid in ( SELECT bufferid FROM buffer, quasseluser WHERE buffer.userid = quasseluser.userid AND quasseluser.username = '\\${USER}' );\" bufferq=\"DELETE FROM buffer WHERE buffer.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" ircserverq=\"DELETE FROM ircserver WHERE ircserver.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" identity_nickq=\"DELETE FROM identity_nick WHERE identity_nick.identityid in ( SELECT identityid FROM quasseluser, identity WHERE quasseluser.userid = identity.userid AND quasseluser.username = '\\${USER}' );\" identityq=\"DELETE FROM identity WHERE identity.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" networkq=\"DELETE FROM network WHERE network.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" usersettingq=\"DELETE FROM user_setting WHERE user_setting.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" quasseluserq=\"DELETE FROM quasseluser WHERE quasseluser.username = '\\${USER}' ;\" exeq \"\\${backlogq}\" exeq \"\\${bufferq}\" exeq \"\\${ircserverq}\" exeq \"\\${identity_nickq}\" exeq \"\\${identityq}\" exeq \"\\${networkq}\" exeq \"\\${usersettingq}\" exeq \"\\${quasseluserq}\" EOF Backup \u00b6 Pre requirements \u00b6 Install rclone: curl https://rclone.org/install.sh | sudo bash Configure rclone: sudo -H rclone config Config log: 2018/08/28 14:23:13 NOTICE: Config file \"/root/.config/rclone/rclone.conf\" not found - using defaults No remotes found - make a new one n) New remote s) Set configuration password q) Quit config n/s/q> n name> gteamdrive_quassel Type of storage to configure. Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / Local Disk \\ \"local\" 14 / Mega \\ \"mega\" 15 / Microsoft Azure Blob Storage \\ \"azureblob\" 16 / Microsoft OneDrive \\ \"onedrive\" 17 / OpenDrive \\ \"opendrive\" 18 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 19 / Pcloud \\ \"pcloud\" 20 / QingCloud Object Storage \\ \"qingstor\" 21 / SSH/SFTP Connection \\ \"sftp\" 22 / Webdav \\ \"webdav\" 23 / Yandex Disk \\ \"yandex\" 24 / http Connection \\ \"http\" Storage> 11 Google Application Client Id - leave blank normally. client_id> *** Google Application Client Secret - leave blank normally. client_secret> *** Scope that rclone should use when requesting access from drive. Choose a number from below, or type in your own value 1 / Full access all files, excluding Application Data Folder. \\ \"drive\" 2 / Read-only access to file metadata and file contents. \\ \"drive.readonly\" / Access to files created by rclone only. 3 | These are visible in the drive website. | File authorization is revoked when the user deauthorizes the app. \\ \"drive.file\" / Allows read and write access to the Application Data folder. 4 | This is not visible in the drive website. \\ \"drive.appfolder\" / Allows read-only access to file metadata but 5 | does not allow any access to read or download file content. \\ \"drive.metadata.readonly\" scope> 1 ID of the root folder - leave blank normally. Fill in to access \"Computers\" folders. (see docs). root_folder_id> Service Account Credentials JSON file path - leave blank normally. Needed only if you want use SA instead of interactive login. service_account_file> Remote config Use auto config? * Say Y if not sure * Say N if you are working on a remote or headless machine or Y didn't work y) Yes n) No y/n> n If your browser doesn't open automatically go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=offline&client_id=*** Log in and authorize rclone for access Enter verification code> *** Configure this as a team drive? y) Yes n) No y/n> y Fetching team drive list... Choose a number from below, or type in your own value 1 / *** \\ \"***\" 2 / *** \\ \"***\" 3 / quassel \\ \"***\" Enter a Team Drive ID> 3 -------------------- [gteamdrive_quassel] type = drive client_id = *** client_secret = *** scope = drive root_folder_id = service_account_file = token = *** team_drive = <drive id from quassel> -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== gteamdrive_quassel drive e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> n name> quassel_crypt Type of storage to configure. Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / Local Disk \\ \"local\" 14 / Mega \\ \"mega\" 15 / Microsoft Azure Blob Storage \\ \"azureblob\" 16 / Microsoft OneDrive \\ \"onedrive\" 17 / OpenDrive \\ \"opendrive\" 18 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 19 / Pcloud \\ \"pcloud\" 20 / QingCloud Object Storage \\ \"qingstor\" 21 / SSH/SFTP Connection \\ \"sftp\" 22 / Webdav \\ \"webdav\" 23 / Yandex Disk \\ \"yandex\" 24 / http Connection \\ \"http\" Storage> 8 Remote to encrypt/decrypt. Normally should contain a ':' and a path, eg \"myremote:path/to/dir\", \"myremote:bucket\" or maybe \"myremote:\" (not recommended). remote> gteamdrive_quassel:/ How to encrypt the filenames. Choose a number from below, or type in your own value 1 / Don't encrypt the file names. Adds a \".bin\" extension only. \\ \"off\" 2 / Encrypt the filenames see the docs for the details. \\ \"standard\" 3 / Very simple filename obfuscation. \\ \"obfuscate\" filename_encryption> 2 Option to either encrypt directory names or leave them intact. Choose a number from below, or type in your own value 1 / Encrypt directory names. \\ \"true\" 2 / Don't encrypt directory names, leave them intact. \\ \"false\" directory_name_encryption> 1 Password or pass phrase for encryption. y) Yes type in my own password g) Generate random password y/g> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? y) Yes n) No y/n> y Password or pass phrase for salt. Optional but recommended. Should be different to the previous password. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? y) Yes n) No y/n> y Remote config -------------------- [quassel_crypt] type = crypt remote = gteamdrive_quassel:/ filename_encryption = standard directory_name_encryption = true password = *** ENCRYPTED *** password2 = *** ENCRYPTED *** -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== gteamdrive_quassel drive quassel_crypt crypt e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> q Backup script \u00b6 cat << EOF | sudo tee /usr/local/sbin/quassel_backup && \\ sudo chmod 500 /usr/local/sbin/quassel_backup #!/bin/bash user='quasselcore' database='/var/lib/quassel/quassel-storage.sqlite' backup_target='/tmp' backup_name='quassel' date=\\$(date +\"%Y-%m-%d_%H:%m\") # Backup database sudo -u \\${user} sqlite3 \\${database} \".backup \\${backup_target}/\\${backup_name}_\\${date}.sqlite\" # Upload database to google rclone copy \\${backup_target}/\\${backup_name}_\\${date}.sqlite quassel_crypt: # remove local backup file rm \\${backup_target}/\\${backup_name}_\\${date}.sqlite EOF Cronjob \u00b6 sudo crontab -e Add at the end of the file: @hourly /usr/local/sbin/quassel_backup Security \u00b6 iptables \u00b6 Explanation iptables rules # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow quassel incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow ESTABLISHED and RELATED connection (important for outgoing connections!) iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on iptables -P INPUT DROP; # Policy ACCEPT OUTPUT iptables -P OUTPUT ACCEPT Set up needed iptables rules: sudo iptables -A OUTPUT -o lo -j ACCEPT; \\ sudo iptables -A INPUT -i lo -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p icmp -j ACCEPT; \\ sudo iptables -P INPUT DROP; \\ sudo iptables -P OUTPUT ACCEPT Set up needed ip6tables rules: sudo ip6tables -A OUTPUT -o lo -j ACCEPT; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p ipv6-icmp -j ACCEPT; \\ sudo ip6tables -P INPUT DROP; \\ sudo ip6tables -P OUTPUT ACCEPT Persist iptables rules: sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"Quassel-IRC"},{"location":"software/quassel/#quassel-irc","text":"OS: Ubuntu 18.04 LTS","title":"Quassel-IRC"},{"location":"software/quassel/#initial-server-setup","text":"","title":"Initial Server setup"},{"location":"software/quassel/#update-system","text":"apt update && apt full-upgrade -y","title":"Update System"},{"location":"software/quassel/#fix-locale","text":"cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF","title":"Fix locale"},{"location":"software/quassel/#edit-bashrc","text":"/root/.bashrc / /etc/skel/.bashrc : # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi","title":"Edit .bashrc"},{"location":"software/quassel/#make-vim-colored-with-dark-background-settinfs","text":"cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Make vim colored with dark background settinfs"},{"location":"software/quassel/#create-a-new-user-user","text":"adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/","title":"Create a new user user"},{"location":"software/quassel/#change-the-ssh-deamon-to-allow-only-ssh-keys","text":"cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF","title":"Change the SSH deamon to allow only SSH-keys"},{"location":"software/quassel/#delete-roots-authorized_keys-file","text":"Attention Please check before if you can login to the user user with your ssh-key! rm ~/.ssh/authorized_keys Important Log out and re login as user !","title":"Delete root's authorized_keys file"},{"location":"software/quassel/#install-base-packages","text":"sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop","title":"Install base packages"},{"location":"software/quassel/#quassel-core","text":"","title":"quassel core"},{"location":"software/quassel/#pre-requirements","text":"Add the PPA for quassel to get the latest stable version: sudo add-apt-repository ppa:mamarley/quassel && \\ sudo apt update Install cerbot (needed for ssl): sudo apt install -y certbot","title":"Pre requirements"},{"location":"software/quassel/#install-quassel-core","text":"sudo apt install -y quassel-core && \\ systemctl status quasselcore.service","title":"Install quassel core"},{"location":"software/quassel/#setup-lets-encrypt-ssl","text":"sudo certbot certonly --standalone -d quassel.mischaufen.de && \\ sudo mv /var/lib/quassel/quasselCert.pem /var/lib/quassel/quasselCert.pem.old && \\ sudo cat /etc/letsencrypt/live/quassel.mischaufen.de/{fullchain,privkey}.pem | sudo tee -a /var/lib/quassel/quasselCert.pem && \\ sudo chown quasselcore:quassel /var/lib/quassel/quasselCert.pem && \\ sudo chmod 600 /var/lib/quassel/quasselCert.pem && \\ sudo systemctl restart quasselcore","title":"Setup Let's encrypt SSL"},{"location":"software/quassel/#setup-automatic-certificate-renew","text":"Add a deploy hook script to /srv/certbot : deamon='quasselcore.service'; \\ target_domain='quassel.mischaufen.de'; \\ sudo mkdir -p /srv/cerbot && \\ sudo chmod 655 /srv/cerbot && \\ cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /srv/cerbot/deploy_hook.sh && \\ sudo chmod 744 /srv/cerbot/deploy_hook.sh #!/bin/bash set -e for domain in \\$RENEWED_DOMAINS; do \\tcase \\$domain in \\t$target_domain) \\t\\tdaemon_cert_root='/var/lib/quassel' \\t\\t# Make sure the certificate and private key files are \\t\\t# never world readable, even just for an instant while \\t\\t# we're copying them into daemon_cert_root. \\t\\tumask 177 \\t\\trm \\$daemon_cert_root/quasselCert.pem \\t\\tcat \\$RENEWED_LINEAGE/{fullchain,privkey}.pem >> \"\\$daemon_cert_root/quasselCert.pem\" \\t\\t# Apply the proper file ownership and permissions for \\t\\t# the $deamon daemon to read its certificate and key. \\t\\tchown quasselcore:quassel \"\\$daemon_cert_root/quasselCert.pem\" \\t\\tchmod 400 \\$daemon_cert_root/quasselCert.pem \\t\\tsystemctl restart $deamon >/dev/null \\t\\t;; \\tesac done EOF Add cronjob for renewing cetificates. sudo crontab -e Add at the end of the file: 0 */12 * * * /usr/local/bin/certbot renew --deploy-hook /srv/cerbot/deploy_hook.sh","title":"Setup automatic certificate renew"},{"location":"software/quassel/#add-user-management-scripts","text":"","title":"Add user management scripts"},{"location":"software/quassel/#add-user-script","text":"quassel_add.sh : cat << EOF | sudo tee /usr/local/sbin/quassel_add && \\ sudo chmod 500 /usr/local/sbin/quassel_add #!/bin/sh sudo -u quasselcore quasselcore --configdir=/var/lib/quassel --add-user EOF quassel_change_pw.sh : cat << EOF | sudo tee /usr/local/sbin/quassel_change_pw && \\ sudo chmod 500 /usr/local/sbin/quassel_change_pw #!/bin/sh die () { echo >&2 \"\\$@\" exit 1 } [ \"\\$#\" -eq 1 ] || die \"Username required!\\n\\nRun:\\t'\\$0 <username>'\\ne.g.:\\t'\\$0 admin'\" systemctl stop quasselcore.service sudo -u quasselcore quasselcore --configdir=/var/lib/quassel --change-userpass=\\$1 systemctl start quasselcore.service EOF quassel_del.sh : if ! [ -x \"$(command -v sqlite3)\" ]; then sudo apt install -y sqlite3; fi && \\ cat << EOF | sudo tee /usr/local/sbin/quassel_del && \\ sudo chmod 500 /usr/local/sbin/quassel_del #!/bin/sh # # Delete Quasselcore users from your SQLite database # exeq() { # Execute SQL Query result=\\$(sqlite3 \"\\${QUASSELDB}\" \"\\${1}\") echo \"\\${result}\" } usage() { echo \"Usage: \\${SCRIPT} username [database]\" } print_users() { sqlite3 \"\\${QUASSELDB}\" \"SELECT quasseluser.userid, quasseluser.username FROM quasseluser ORDER BY quasseluser.userid;\" } # Main body SCRIPT=\"\\${0}\" QUASSELDB=\"\" USER=\"\" if [ -z \"\\${2}\" ] ; then # No file supplied. QUASSELDB=\"/var/lib/quassel/quassel-storage.sqlite\" else QUASSELDB=\"\\${2}\" fi if [ -z \"\\${1}\" ] ; then echo \"No user supplied.\" echo \"Pick one: \" print_users usage exit 1 else USER=\"${1}\" fi if [ -e \"\\${QUASSELDB}\" ] ; then echo \"SELECTED DB: \\${QUASSELDB}\" else echo \"SELECTED DB '\\${QUASSELDB}' does not exist.\" usage exit 2 fi if [ -z \\$(exeq \"SELECT quasseluser.username FROM quasseluser WHERE username = '\\${USER}';\") ] ; then echo \"SELECTED USER '\\${USER}' does not exist.\" print_users usage exit 3 else echo \"SELECTED USER: \\${USER}\" fi # Sadly SQLITE does not allow DELETE statements that JOIN tables. # All queries are written with a subquery. # Contact me if you know a better way. backlogq=\"DELETE FROM backlog WHERE backlog.bufferid in ( SELECT bufferid FROM buffer, quasseluser WHERE buffer.userid = quasseluser.userid AND quasseluser.username = '\\${USER}' );\" bufferq=\"DELETE FROM buffer WHERE buffer.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" ircserverq=\"DELETE FROM ircserver WHERE ircserver.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" identity_nickq=\"DELETE FROM identity_nick WHERE identity_nick.identityid in ( SELECT identityid FROM quasseluser, identity WHERE quasseluser.userid = identity.userid AND quasseluser.username = '\\${USER}' );\" identityq=\"DELETE FROM identity WHERE identity.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" networkq=\"DELETE FROM network WHERE network.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" usersettingq=\"DELETE FROM user_setting WHERE user_setting.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" quasseluserq=\"DELETE FROM quasseluser WHERE quasseluser.username = '\\${USER}' ;\" exeq \"\\${backlogq}\" exeq \"\\${bufferq}\" exeq \"\\${ircserverq}\" exeq \"\\${identity_nickq}\" exeq \"\\${identityq}\" exeq \"\\${networkq}\" exeq \"\\${usersettingq}\" exeq \"\\${quasseluserq}\" EOF","title":"Add user script"},{"location":"software/quassel/#backup","text":"","title":"Backup"},{"location":"software/quassel/#pre-requirements_1","text":"Install rclone: curl https://rclone.org/install.sh | sudo bash Configure rclone: sudo -H rclone config Config log: 2018/08/28 14:23:13 NOTICE: Config file \"/root/.config/rclone/rclone.conf\" not found - using defaults No remotes found - make a new one n) New remote s) Set configuration password q) Quit config n/s/q> n name> gteamdrive_quassel Type of storage to configure. Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / Local Disk \\ \"local\" 14 / Mega \\ \"mega\" 15 / Microsoft Azure Blob Storage \\ \"azureblob\" 16 / Microsoft OneDrive \\ \"onedrive\" 17 / OpenDrive \\ \"opendrive\" 18 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 19 / Pcloud \\ \"pcloud\" 20 / QingCloud Object Storage \\ \"qingstor\" 21 / SSH/SFTP Connection \\ \"sftp\" 22 / Webdav \\ \"webdav\" 23 / Yandex Disk \\ \"yandex\" 24 / http Connection \\ \"http\" Storage> 11 Google Application Client Id - leave blank normally. client_id> *** Google Application Client Secret - leave blank normally. client_secret> *** Scope that rclone should use when requesting access from drive. Choose a number from below, or type in your own value 1 / Full access all files, excluding Application Data Folder. \\ \"drive\" 2 / Read-only access to file metadata and file contents. \\ \"drive.readonly\" / Access to files created by rclone only. 3 | These are visible in the drive website. | File authorization is revoked when the user deauthorizes the app. \\ \"drive.file\" / Allows read and write access to the Application Data folder. 4 | This is not visible in the drive website. \\ \"drive.appfolder\" / Allows read-only access to file metadata but 5 | does not allow any access to read or download file content. \\ \"drive.metadata.readonly\" scope> 1 ID of the root folder - leave blank normally. Fill in to access \"Computers\" folders. (see docs). root_folder_id> Service Account Credentials JSON file path - leave blank normally. Needed only if you want use SA instead of interactive login. service_account_file> Remote config Use auto config? * Say Y if not sure * Say N if you are working on a remote or headless machine or Y didn't work y) Yes n) No y/n> n If your browser doesn't open automatically go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=offline&client_id=*** Log in and authorize rclone for access Enter verification code> *** Configure this as a team drive? y) Yes n) No y/n> y Fetching team drive list... Choose a number from below, or type in your own value 1 / *** \\ \"***\" 2 / *** \\ \"***\" 3 / quassel \\ \"***\" Enter a Team Drive ID> 3 -------------------- [gteamdrive_quassel] type = drive client_id = *** client_secret = *** scope = drive root_folder_id = service_account_file = token = *** team_drive = <drive id from quassel> -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== gteamdrive_quassel drive e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> n name> quassel_crypt Type of storage to configure. Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / Local Disk \\ \"local\" 14 / Mega \\ \"mega\" 15 / Microsoft Azure Blob Storage \\ \"azureblob\" 16 / Microsoft OneDrive \\ \"onedrive\" 17 / OpenDrive \\ \"opendrive\" 18 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 19 / Pcloud \\ \"pcloud\" 20 / QingCloud Object Storage \\ \"qingstor\" 21 / SSH/SFTP Connection \\ \"sftp\" 22 / Webdav \\ \"webdav\" 23 / Yandex Disk \\ \"yandex\" 24 / http Connection \\ \"http\" Storage> 8 Remote to encrypt/decrypt. Normally should contain a ':' and a path, eg \"myremote:path/to/dir\", \"myremote:bucket\" or maybe \"myremote:\" (not recommended). remote> gteamdrive_quassel:/ How to encrypt the filenames. Choose a number from below, or type in your own value 1 / Don't encrypt the file names. Adds a \".bin\" extension only. \\ \"off\" 2 / Encrypt the filenames see the docs for the details. \\ \"standard\" 3 / Very simple filename obfuscation. \\ \"obfuscate\" filename_encryption> 2 Option to either encrypt directory names or leave them intact. Choose a number from below, or type in your own value 1 / Encrypt directory names. \\ \"true\" 2 / Don't encrypt directory names, leave them intact. \\ \"false\" directory_name_encryption> 1 Password or pass phrase for encryption. y) Yes type in my own password g) Generate random password y/g> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? y) Yes n) No y/n> y Password or pass phrase for salt. Optional but recommended. Should be different to the previous password. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? y) Yes n) No y/n> y Remote config -------------------- [quassel_crypt] type = crypt remote = gteamdrive_quassel:/ filename_encryption = standard directory_name_encryption = true password = *** ENCRYPTED *** password2 = *** ENCRYPTED *** -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== gteamdrive_quassel drive quassel_crypt crypt e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> q","title":"Pre requirements"},{"location":"software/quassel/#backup-script","text":"cat << EOF | sudo tee /usr/local/sbin/quassel_backup && \\ sudo chmod 500 /usr/local/sbin/quassel_backup #!/bin/bash user='quasselcore' database='/var/lib/quassel/quassel-storage.sqlite' backup_target='/tmp' backup_name='quassel' date=\\$(date +\"%Y-%m-%d_%H:%m\") # Backup database sudo -u \\${user} sqlite3 \\${database} \".backup \\${backup_target}/\\${backup_name}_\\${date}.sqlite\" # Upload database to google rclone copy \\${backup_target}/\\${backup_name}_\\${date}.sqlite quassel_crypt: # remove local backup file rm \\${backup_target}/\\${backup_name}_\\${date}.sqlite EOF","title":"Backup script"},{"location":"software/quassel/#cronjob","text":"sudo crontab -e Add at the end of the file: @hourly /usr/local/sbin/quassel_backup","title":"Cronjob"},{"location":"software/quassel/#security","text":"","title":"Security"},{"location":"software/quassel/#iptables","text":"Explanation iptables rules # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow quassel incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow ESTABLISHED and RELATED connection (important for outgoing connections!) iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on iptables -P INPUT DROP; # Policy ACCEPT OUTPUT iptables -P OUTPUT ACCEPT Set up needed iptables rules: sudo iptables -A OUTPUT -o lo -j ACCEPT; \\ sudo iptables -A INPUT -i lo -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo iptables -t filter -A INPUT -i eth0 -p icmp -j ACCEPT; \\ sudo iptables -P INPUT DROP; \\ sudo iptables -P OUTPUT ACCEPT Set up needed ip6tables rules: sudo ip6tables -A OUTPUT -o lo -j ACCEPT; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p ipv6-icmp -j ACCEPT; \\ sudo ip6tables -P INPUT DROP; \\ sudo ip6tables -P OUTPUT ACCEPT Persist iptables rules: sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"iptables"},{"location":"software/seedbox/","text":"Seedbox \u00b6 This Guide contains instructions to set up a seedbox based on QuickBox with Perferct Privacy as all outgoing VPN on a VPS or a bare metal server. This Guide is not sponsored by QuickBox nor by Perfect Privacy. This Guide also requires that the server is already installed and access via SSH is working. Mono \u00b6 We want to use the latest version of mono. So we add the official mono repositories. sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF sudo apt install apt-transport-https echo \"deb https://download.mono-project.com/repo/ubuntu stable-xenial main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt update && \\ sudo apt -y full-upgrade QuickBox \u00b6 QuickBox is an easy to setup seedbox 'script', which also allows you to add several services (e.g. Sonarr and Radarr ) just by clicking 'install' at the webinterface. Installation \u00b6 Run all commads as root You have to be logged in as root to install QuckBox! Now we will update all installed software and install git (for cloning the QuickBox repo) as well as lsb-release (a little tool to get the release version). apt update; apt -y full-upgrade; apt -y install git lsb-release; \\ git clone https://github.com/QuickBox/QB /etc/QuickBox; \\ bash /etc/QuickBox/setup/quickbox-setup If you get a locale warning like this one, just ignore it ;) perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_CTYPE = \"UTF-8\", LANG = \"en_US.UTF-8\" are supported and installed on your system. perl: warning: Falling back to a fallback locale (\"en_US.UTF-8\"). perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_CTYPE = \"UTF-8\", LANG = \"en_US.UTF-8\" are supported and installed on your system. perl: warning: Falling back to a fallback locale (\"en_US.UTF-8\"). When the installer opens install and configure QuickBox for your needs. This is my setup log: [QuickBox] QuickBox Seedbox Installation Heads Up! QuickBox works with the following Ubuntu 15.10 | 16.04 Checking distribution ... No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 16.04.4 LTS Release: 16.04 Codename: xenial Congrats! You're running as root. Let's continue ... Do you wish to write to a log file? (Default: Y) y Output is being sent to /root/quickbox.2175.log Please enter a hostname for this server (Hit ENTER to make no changes): No hostname supplied, no changes made!! Do you wish to use user quotas? (Default: Y) n Quotas will not be installed Press ENTER when you're ready to begin or Ctrl+Z to cancel Password is shown as clear text Please be aware that the password which you have to setup for the 'admin' account will be shown as clear text. Public Trackers needed? If you don't plan to use public trackers like The Pirate Bay, you should set the option Block Public Tracers to yes to protect yourself. FFmpeg needed? If you don't need FFmpeg (used for generating screen shots) don't install it, because it will be compiled from source which takes some time. Is this a 10 gigabit server? (Default: N) n Who can afford that stuff anyway? 1) rtorrent 0.9.6 2) rtorrent 0.9.4 3) rtorrent 0.9.3 What version of rtorrent do you want? (Default 1): 1 We will be using rtorrent-0.9.6/libtorrent-0.13.6 1) Deluge repo (fastest) 2) Deluge with libtorrent 1.0.11 (stable) 3) Deluge with libtorrent 1.1.3 (dev) 4) Do not install Deluge What version of Deluge do you want? (Default 1): 1 We will be using Deluge with Libtorrent REPO Would you like to install transmission? [y]es or [n]o: n 1) QuickBox - smoked :: Dark theme 2) QuickBox - defaulted :: Light theme Pick your QuickBox Dashboard Theme (Default 1): 1 We will be using QuickBox Theme : smoked Add a Master Account user to sudoers Username: dedibox Password: (hit enter to generate a password) *** setting password to *** Would you like to install ffmpeg? (Used for screenshots) [y]es or [n]o: y Please, write your public server IP (used for ftp) (Default: 0.0.0.0) Block Public Trackers?: [y]es or [n]o: y [ - Blocking public trackers - ] Would you like to install bbr? (Used for Congestion Control) [y]es or [n]o: y Wait until it's installed. On my machine it tooks 19 minuts. * 1 CPU (Intel Xeon - Skylake@2.1GHz) * 2GB RAM * SSD QuickBox will now install, this may take between 10 and 45 minutes depending on your systems specs Pulling QuickBox Ecosystem ... [ DONE ] Updating system ... [ DONE ] Installing all needed dependencies ... [ DONE ] Setting up system executables ... [ DONE ] Building required user directories ... [ DONE ] Setting up Limited Shell environment ... [ DONE ] Building ffmpeg from source for screenshots ... [ DONE ] Installing xmlrpc-c-1.33.12 ... [ DONE ] Installing libtorrent-0.13.6 ... [ DONE ] Installing rtorrent-0.9.6 ... [ DONE ] Installing rutorrent into /srv ... [ DONE ] Installing rutorrent plugins ... [ DONE ] Installing deluge ... [ DONE ] Installing mktorrent from source ... [ DONE ] Installing quickbox dashboard ... [ DONE ] Building system file indexer (h5ai) ... [ DONE ] Setting up seedbox.conf for apache ... [ DONE ] Fix SSL Cert for apache ... [ DONE ] Installing .rtorrent.rc for dedibox ... [ DONE ] Adjusting fileupload & filemanager plugins ... [ DONE ] Installing autodl-irssi ... [ DONE ] Making dedibox directory structure ... [ DONE ] Writing dedibox rutorrent config.php file ... [ DONE ] Installing vsftpd ... [ DONE ] Setting up vsftpd ... [ DONE ] Setting irssi/rtorrent to start on boot ... [ DONE ] Setting permissions on dedibox ... [ DONE ] install BBR ... [ DONE ] After finishing the installation don't reboot the machine, if you want to use port 22 for SSH. If you're fine to use port 4747 for SSH just reboot. [quickbox] Seedbox & GUI Installation Completed INSTALLATION COMPLETED in 19/min Valid Commands: ------------------- createSeedboxUser - creates a shelled seedbox user deleteSeedboxUser - deletes a created seedbox user and their directories changeUserpass - change users SSH/FTP/ruTorrent password setdisk - set your disk quota for any given user showspace - shows the amount of space used by all users on the server reload - restarts your seedbox services, i.e; rtorrent & irssi upgradeBTSync - upgrades BTSync when new version is available upgradeOmbi - upgrades Ombi when new version is available upgradePlex - upgrades Plex when new version is available box install letsencrypt - installs a valid SSL certificate to be used with a valid domain name. box - type 'box -h' for a summary of how to use box! ################################################################################################ # Seedbox can be found at https://dedibox:***@138.201.173.51 # (Also works for FTP:5757/SSH:4747) # If you need to restart rtorrent/irssi, you can type 'reload' # Reloading: sshd, apache, memcached, php7.0, vsftpd and fail2ban ################################################################################################ Do you wish to reboot (recommended!): (Default Y) N Optional set the SSH port back to 22 \u00b6 Because the install script forces a SSH port change we have to change it back to 22 manually. Just run this sed command to replace the port 4747 with 22. sed -i -e 's/^Port 4747$/Port 22/g' /etc/ssh/sshd_config Afterwards reboot the machine. Optional use 'Let's Encrypt' for a proper SSL certificate \u00b6 If you use a domain for your server you should set up an let's encrypt ssl certificate. Run the following command and follow the process. It's really straight forward. box install letsencrypt IPset \u00b6 With IPset (and Dnsmasq) we are able to filter on a \"DNS name\" basis. Installation \u00b6 apt install -y ipset Configuration \u00b6 First we have to create the IPsets which want to use. In our case we need 2 of them, the 1 st will store the IPs of the Perfect Privacy servers and the 2 nd will store the IPs of the letsencrypt acme challenge servers. ipset create perfect_privacy hash:ip family inet; \\ ipset create letsencrypt hash:ip family inet; \\ ipset create storagebox hash:ip family inet Afterwards we have to save our rules because they only configured in RAM. We will also write a little script which reloads the rules at startup. ipset save > /etc/ipset.up.rules; \\ cat > /etc/network/if-pre-up.d/loadrules <<-EOF; chmod 755 /etc/network/if-pre-up.d/loadrules #!/bin/sh /sbin/ipset restore -! < /etc/ipset.up.rules EOF Dnsmasq \u00b6 Dnsmasq is a tiny DNS server which we will use to resolve the dns addresses and store them to a IPset. Installation \u00b6 apt install -y dnsmasq Configuration \u00b6 We configure Dnsmasq to listen only on 127.0.0.1 and to store the IP addresses of specific domains in our IPsets. Uncomment the last line to activate reading the conf file in /etc/dnsmasq.d/ : sed -i -e 's/^#conf-dir=\\/etc\\/dnsmasq\\.d\\/,\\*\\.conf/conf-dir=\\/etc\\/dnsmasq\\.d\\/,\\*\\.conf/g' /etc/dnsmasq.conf Configure the interfaces which the DNS server should listen to: cat > /etc/dnsmasq.d/01_interfaces.conf <<-EOF # If you want dnsmasq to listen for DHCP and DNS requests only on # specified interfaces (and the loopback) give the name of the # interface (eg eth0) here. # Repeat the line for more than one interface. #interface= # Or you can specify which interface _not_ to listen on except-interface=tun0 # Or which to listen on by address (remember to include 127.0.0.1 if # you use this.) listen-address=127.0.0.1 # If you want dnsmasq to provide only DNS service on an interface, # configure it as shown above, and then use the following line to # disable DHCP and TFTP on it. #no-dhcp-interface= EOF Configure the server to store the matching IPs to the IPset: cat > /etc/dnsmasq.d/02_ipsets.conf <<-EOF # Add the IPs of all queries to yahoo.com, google.com, and their # subdomains to the vpn and search ipsets: #ipset=/yahoo.com/google.com/vpn,search ipset=/perfect-privacy.com/perfect_privacy ipset=/letsencrypt.org/letsencrypt ipset=/your-storagebox.de/storagebox EOF OpenVPN \u00b6 OpenVPN in an open source vpn software. Installation \u00b6 First install OpenVPN, go to the OpenVPN config directory ( /etc/openvpn ) and download the configuration files from Perfect Privacy. The script below also creates a password.txt with credentials and modifies the files so that they refer to the credentials. apt install -y openvpn && \\ cd /etc/openvpn/ && \\ clear; \\ echo \"Please enter your Perfect Privacy credentials\"; \\ read -p 'Username: ' username && \\ read -sp 'Password: ' password && \\ wget -v --post-data \"username=$username&password=$password&uri=/member/download/?file=linux_udp.tar.gz\" -O linux_udp.tar.gz \"https://www.perfect-privacy.com/member/\" && \\ echo \"$username\" > password.txt && \\ echo \"$password\" >> password.txt && \\ username=''; \\ password=''; \\ tar xfvz linux_udp.tar.gz && \\ mv ./linux_udp/* ./ && \\ rmdir ./linux_udp && \\ rm -f ./linux_udp.tar.gz && \\ chown root:root ./* && \\ chmod 400 password.txt && \\ for file in ./*.ovpn; do sed -i -e 's/^auth-user-pass.*$/auth-user-pass password.txt/g' $file; done && \\ sed -i -e '/echo -n \\\"\\$R\\\" \\| \\/sbin\\/resolvconf -a \\\"\\${dev}\\.openvpn\\\"/a \\ \\ \\ \\ \\ \\ \\ \\ \\/etc\\/openvpn\\/patch_ports\\.sh' /etc/openvpn/update-resolv-conf Afterwards link the config which you want to use to .conf (e.g. Rotterdam.ovpn to Rotterdam.conf ) and modify the defaults file for OpenVPN to start the VPN connection automatically. clear; \\ echo \"Enter the file name of the for your preferred server location.\"; \\ read -p \"File name (e.g. Rotterdam.ovpn): \" config_file && \\ if [ ! -f ./$config_file ]; \\ then echo \"File not found!\"; \\ else \\ config_name=$(echo $config_file | awk '{split($0,a,\".\"); print a[1]}'); \\ ln -s ./$config_file ./$config_name.conf; \\ sed -i -e \"/^#AUTOSTART=\\\"home office\\\"$/a AUTOSTART=\\\"$config_name\\\"\" /etc/default/openvpn; \\ fi && \\ systemctl daemon-reload Now we are adding a script to modify the torrent client ports. /etc/openvpn/patch_ports.sh : touch /etc/openvpn/patch_ports.sh && \\ chmod +x /etc/openvpn/patch_ports.sh; \\ vim /etc/openvpn/patch_ports.sh; #!/bin/bash vpn_tun_dev=\"tun0\" user=\"dedibox\" # Get VPN internal IP Address vpn_int_ip=$(ip -f inet a s $vpn_tun_dev | grep \"inet\\b\" | awk '{print $2}' | cut -d'/' -f1) # Check if tunnel device is available if [[ -z $vpn_int_ip ]]; then echo \"Shit there is no $vpn_tun_dev interface\" exit 1 fi # Generate ports blck3_ip=$(echo \"$vpn_int_ip\" | cut -f3 -d'.') blck4_ip=$(echo \"$vpn_int_ip\" | cut -f4 -d'.') blck3_prt=$(($(($blck3_ip%16))*256)) # Perfect Privacy port calculation for the 3rd octet -- (<3rd Block Number> mod 16) * 256 # PP port calcucaltion -- <Base port>+<generated 3rd block>+<4th block> vpn_port1=$((10000+$blck3_prt+$blck4_ip)) vpn_port2=$((20000+$blck3_prt+$blck4_ip)) vpn_port3=$((30000+$blck3_prt+$blck4_ip)) # Change rtorrent incoming port sed -i -E \"s/^network\\.port_range\\.set = [0-9]{1,5}-[0-9]{1,5}$/network\\.port_range\\.set = $vpn_port1-$vpn_port1/g\" /home/$user/.rtorrent.rc systemctl restart rtorrent@dedibox.service # Change Deluge incoming port systemctl stop deluged@dedibox.service deluge_line=$(grep -n 'listen_ports' /home/$user/.config/deluge/core.conf | cut -d\":\" -f1) sed -i \"$(($deluge_line+1))s/.*/ $vpn_port2,/\" /home/$user/.config/deluge/core.conf sed -i \"$(($deluge_line+2))s/.*/ $vpn_port2/\" /home/$user/.config/deluge/core.conf systemctl start deluged@dedibox.service iptables \u00b6 iptables is a userpace program to configure the firewall. Configuration \u00b6 Explanation iptables rules # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED,RELATED -j ACCEPT # DROP storage box traffic via tun0 iptables -t filter -A OUTPUT -o tun0 -m set --match-set storagebox dst -j DROP iptables -t filter -A INPUT -i tun0 -m set --match-set storagebox src -j DROP # Allow DNS outgoing iptables -t filter -A INPUT -i eth0 -p udp --sport 53 -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p udp --dport 53 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow OpenVPN outgoing only to perfect-privacy servers iptables -t filter -A OUTPUT -o eth0 -p udp -m set --match-set perfect_privacy dst -m multiport --dports 148,149,150,151,1148,1149,1150,1151 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m set --match-set perfect_privacy dst -m multiport --dports 300,301,142,152,1142,1152 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 148,149,150,151,1148,1149,1150,1151 -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 300,301,142,152,1142,1152 -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443,10354 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --sports 80,443,10354 -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow StorageBox outgoing iptables -t filter -A OUTPUT -o eth0 -p udp -m multiport --dports 137,138 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --dports 139,445 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 137,138 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 139,445 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow traffic through OpenVPN iptables -t filter -A OUTPUT -o tun0 -j ACCEPT iptables -t filter -A INPUT -i tun0 -j ACCEPT # Policy DROP (everything else) iptables -t filter -P OUTPUT DROP iptables -t filter -P INPUT DROP Set up needed iptables rules: iptables -A OUTPUT -o lo -j ACCEPT; \\ iptables -A INPUT -i lo -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p udp --sport 53 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p udp --dport 53 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p udp -m set --match-set perfect_privacy dst -m multiport --dports 148,149,150,151,1148,1149,1150,1151 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m set --match-set perfect_privacy dst -m multiport --dports 300,301,142,152,1142,1152 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 148,149,150,151,1148,1149,1150,1151 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 300,301,142,152,1142,1152 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443,10354 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --sports 80,443,10354 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p udp -m multiport --dports 137,138 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --dports 139,445 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 137,138 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 139,445 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o tun0 -j ACCEPT; \\ iptables -t filter -A INPUT -i tun0 -j ACCEPT; \\ iptables -t filter -P OUTPUT DROP; \\ iptables -t filter -P INPUT DROP If you use fail2ban If you use fail to ban you have to delete the fail2ban rules from the config file! Save iptables rules because they also only configured in RAM: iptables-save > /etc/iptables.up.rules; \\ echo \"/sbin/iptables-restore < /etc/iptables.up.rules\" >> /etc/network/if-pre-up.d/loadrules ip rule/route \u00b6 Configuration \u00b6 Add the following at the end of the block for the eth0 device. Replace 1.2.3.4 with the public IP from your server: vim /etc/network/interfaces post-up ip route add 172.31.1.1/32 dev eth0 proto kernel scope link src 1.2.3.4 table 1 post-up ip route add default via 172.31.1.1 table 1 post-up ip route add 195.201.107.35/32 via 172.31.1.1 dev eth0 post-up ip rule add table 1 from 1.2.3.4 post-up ip rule add fwmark 1 table 1 Afterwards apply the routes/rules: clear; \\ ip a; \\ read -p 'Local interface name (e.g. eth0): ' intname && \\ intip=$(ip -f inet a s $intname | grep \"inet\\b\" | awk '{print $2}' | cut -d'/' -f1) && \\ ip route add 172.31.1.1/32 dev eth0 proto kernel scope link src $intip table 1 && \\ ip route add default via 172.31.1.1 table 1 && \\ storageboxip=$(dig +noall +answer +nocomments +short u177197.your-storagebox.de) && \\ ip route add $storageboxip/32 via 172.31.1.1 dev eth0 && \\ ip rule add table 1 from $intip && \\ ip rule add fwmark 1 table 1 Mount storage box \u00b6 Install cifs-utils : apt install -y cifs-utils Create directory within /mnt : mkdir /mnt/.nas && \\ chmod 444 /mnt/.nas Add a group for storage access and nice the group id: addgroup storage && \\ usermod -aG storage dedibox Add mount to fstab: clear; \\ echo \"Please enter your Storage Box credentials\"; \\ read -p 'Storage Box Username: ' sbusername && \\ read -sp 'Storage Box Password: ' sbpassword && \\ echo \"\" && \\ read -p 'Mount User ID: ' muid && \\ read -p 'Mount Group ID: ' mgid && \\ echo \"\" >> /etc/fstab && \\ echo \"# Storage Box - dedibox\" >> /etc/fstab && \\ echo \"//$sbusername.your-storagebox.de/backup /mnt/.nas cifs iocharset=utf8,credentials=/root/.smbcredentials,uid=$muid,gid=$mgid,rw,file_mode=0775,dir_mode=0775 0 0\" >> /etc/fstab && \\ echo \"username=$sbusername\" > /root/.smbcredentials && \\ echo \"password=$sbpassword\" >> /root/.smbcredentials && \\ chmod 600 /root/.smbcredentials && \\ cat << EOF > /root/mount.sh && chmod 700 /root/mount.sh #!/bin/bash # Check if script runs as root if [ $UID != 0 ]; then echo \"You have to run this script as root.\" exit 1 fi # Add route to storage box storageboxip=$(dig +noall +answer +nocomments +short u177197.your-storagebox.de) if [[ -z $(ip route | grep \"$storageboxip via 172.31.1.1 dev eth0\") ]]; then ip route add $storageboxip/32 via 172.31.1.1 dev eth0 fi # Mount all unmounted mounts mount -a # Mount Crypto read -sp 'rclone config password: ' RCLONE_CONFIG_PASS echo \"\" export RCLONE_CONFIG_PASS screen -dmS rclone rclone mount --ask-password=false --uid $muid --gid $mgid --umask 002 --allow-other storage_box_crypt: /mnt/nas unset RCLONE_CONFIG_PASS EOF Mount NAS storage: mount -a rclone \u00b6 rclone is tiny tool to mount cloud storages. It also provides a strong encryption. Installation \u00b6 curl https://rclone.org/install.sh | sudo bash Configuration \u00b6 Open rclone configuration: rclone config Select 'n' (new remote) Name: storage_box_crypt Storage Type: '7' (Encrypt/Decrypt a remote) \"crypt\" remote: /mnt/.nas Filename encryption: '2' (Encrypt the filenames see the docs for the details.) \"standard\" Encrypt directories: '1' (Encrypt directory names.) \"true\" Password: 'y' (Yes type in my own password) Salt: 'y' (Yes type in my own password) Confirm configuration: 'y' (Yes this is OK) Set configuration password: 's' Add Password: 'a' Quit to main menu: 'q' Quit configuration: 'q' Create mount point: mkdir /mnt/nas && \\ chmod 444 /mnt/nas Mount rclone share: ./mount.sh","title":"SeedBox"},{"location":"software/seedbox/#seedbox","text":"This Guide contains instructions to set up a seedbox based on QuickBox with Perferct Privacy as all outgoing VPN on a VPS or a bare metal server. This Guide is not sponsored by QuickBox nor by Perfect Privacy. This Guide also requires that the server is already installed and access via SSH is working.","title":"Seedbox"},{"location":"software/seedbox/#mono","text":"We want to use the latest version of mono. So we add the official mono repositories. sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF sudo apt install apt-transport-https echo \"deb https://download.mono-project.com/repo/ubuntu stable-xenial main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt update && \\ sudo apt -y full-upgrade","title":"Mono"},{"location":"software/seedbox/#quickbox","text":"QuickBox is an easy to setup seedbox 'script', which also allows you to add several services (e.g. Sonarr and Radarr ) just by clicking 'install' at the webinterface.","title":"QuickBox"},{"location":"software/seedbox/#installation","text":"Run all commads as root You have to be logged in as root to install QuckBox! Now we will update all installed software and install git (for cloning the QuickBox repo) as well as lsb-release (a little tool to get the release version). apt update; apt -y full-upgrade; apt -y install git lsb-release; \\ git clone https://github.com/QuickBox/QB /etc/QuickBox; \\ bash /etc/QuickBox/setup/quickbox-setup If you get a locale warning like this one, just ignore it ;) perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_CTYPE = \"UTF-8\", LANG = \"en_US.UTF-8\" are supported and installed on your system. perl: warning: Falling back to a fallback locale (\"en_US.UTF-8\"). perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_CTYPE = \"UTF-8\", LANG = \"en_US.UTF-8\" are supported and installed on your system. perl: warning: Falling back to a fallback locale (\"en_US.UTF-8\"). When the installer opens install and configure QuickBox for your needs. This is my setup log: [QuickBox] QuickBox Seedbox Installation Heads Up! QuickBox works with the following Ubuntu 15.10 | 16.04 Checking distribution ... No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 16.04.4 LTS Release: 16.04 Codename: xenial Congrats! You're running as root. Let's continue ... Do you wish to write to a log file? (Default: Y) y Output is being sent to /root/quickbox.2175.log Please enter a hostname for this server (Hit ENTER to make no changes): No hostname supplied, no changes made!! Do you wish to use user quotas? (Default: Y) n Quotas will not be installed Press ENTER when you're ready to begin or Ctrl+Z to cancel Password is shown as clear text Please be aware that the password which you have to setup for the 'admin' account will be shown as clear text. Public Trackers needed? If you don't plan to use public trackers like The Pirate Bay, you should set the option Block Public Tracers to yes to protect yourself. FFmpeg needed? If you don't need FFmpeg (used for generating screen shots) don't install it, because it will be compiled from source which takes some time. Is this a 10 gigabit server? (Default: N) n Who can afford that stuff anyway? 1) rtorrent 0.9.6 2) rtorrent 0.9.4 3) rtorrent 0.9.3 What version of rtorrent do you want? (Default 1): 1 We will be using rtorrent-0.9.6/libtorrent-0.13.6 1) Deluge repo (fastest) 2) Deluge with libtorrent 1.0.11 (stable) 3) Deluge with libtorrent 1.1.3 (dev) 4) Do not install Deluge What version of Deluge do you want? (Default 1): 1 We will be using Deluge with Libtorrent REPO Would you like to install transmission? [y]es or [n]o: n 1) QuickBox - smoked :: Dark theme 2) QuickBox - defaulted :: Light theme Pick your QuickBox Dashboard Theme (Default 1): 1 We will be using QuickBox Theme : smoked Add a Master Account user to sudoers Username: dedibox Password: (hit enter to generate a password) *** setting password to *** Would you like to install ffmpeg? (Used for screenshots) [y]es or [n]o: y Please, write your public server IP (used for ftp) (Default: 0.0.0.0) Block Public Trackers?: [y]es or [n]o: y [ - Blocking public trackers - ] Would you like to install bbr? (Used for Congestion Control) [y]es or [n]o: y Wait until it's installed. On my machine it tooks 19 minuts. * 1 CPU (Intel Xeon - Skylake@2.1GHz) * 2GB RAM * SSD QuickBox will now install, this may take between 10 and 45 minutes depending on your systems specs Pulling QuickBox Ecosystem ... [ DONE ] Updating system ... [ DONE ] Installing all needed dependencies ... [ DONE ] Setting up system executables ... [ DONE ] Building required user directories ... [ DONE ] Setting up Limited Shell environment ... [ DONE ] Building ffmpeg from source for screenshots ... [ DONE ] Installing xmlrpc-c-1.33.12 ... [ DONE ] Installing libtorrent-0.13.6 ... [ DONE ] Installing rtorrent-0.9.6 ... [ DONE ] Installing rutorrent into /srv ... [ DONE ] Installing rutorrent plugins ... [ DONE ] Installing deluge ... [ DONE ] Installing mktorrent from source ... [ DONE ] Installing quickbox dashboard ... [ DONE ] Building system file indexer (h5ai) ... [ DONE ] Setting up seedbox.conf for apache ... [ DONE ] Fix SSL Cert for apache ... [ DONE ] Installing .rtorrent.rc for dedibox ... [ DONE ] Adjusting fileupload & filemanager plugins ... [ DONE ] Installing autodl-irssi ... [ DONE ] Making dedibox directory structure ... [ DONE ] Writing dedibox rutorrent config.php file ... [ DONE ] Installing vsftpd ... [ DONE ] Setting up vsftpd ... [ DONE ] Setting irssi/rtorrent to start on boot ... [ DONE ] Setting permissions on dedibox ... [ DONE ] install BBR ... [ DONE ] After finishing the installation don't reboot the machine, if you want to use port 22 for SSH. If you're fine to use port 4747 for SSH just reboot. [quickbox] Seedbox & GUI Installation Completed INSTALLATION COMPLETED in 19/min Valid Commands: ------------------- createSeedboxUser - creates a shelled seedbox user deleteSeedboxUser - deletes a created seedbox user and their directories changeUserpass - change users SSH/FTP/ruTorrent password setdisk - set your disk quota for any given user showspace - shows the amount of space used by all users on the server reload - restarts your seedbox services, i.e; rtorrent & irssi upgradeBTSync - upgrades BTSync when new version is available upgradeOmbi - upgrades Ombi when new version is available upgradePlex - upgrades Plex when new version is available box install letsencrypt - installs a valid SSL certificate to be used with a valid domain name. box - type 'box -h' for a summary of how to use box! ################################################################################################ # Seedbox can be found at https://dedibox:***@138.201.173.51 # (Also works for FTP:5757/SSH:4747) # If you need to restart rtorrent/irssi, you can type 'reload' # Reloading: sshd, apache, memcached, php7.0, vsftpd and fail2ban ################################################################################################ Do you wish to reboot (recommended!): (Default Y) N","title":"Installation"},{"location":"software/seedbox/#optional-set-the-ssh-port-back-to-22","text":"Because the install script forces a SSH port change we have to change it back to 22 manually. Just run this sed command to replace the port 4747 with 22. sed -i -e 's/^Port 4747$/Port 22/g' /etc/ssh/sshd_config Afterwards reboot the machine.","title":"Optional set the SSH port back to 22"},{"location":"software/seedbox/#optional-use-lets-encrypt-for-a-proper-ssl-certificate","text":"If you use a domain for your server you should set up an let's encrypt ssl certificate. Run the following command and follow the process. It's really straight forward. box install letsencrypt","title":"Optional use 'Let's Encrypt' for a proper SSL certificate"},{"location":"software/seedbox/#ipset","text":"With IPset (and Dnsmasq) we are able to filter on a \"DNS name\" basis.","title":"IPset"},{"location":"software/seedbox/#installation_1","text":"apt install -y ipset","title":"Installation"},{"location":"software/seedbox/#configuration","text":"First we have to create the IPsets which want to use. In our case we need 2 of them, the 1 st will store the IPs of the Perfect Privacy servers and the 2 nd will store the IPs of the letsencrypt acme challenge servers. ipset create perfect_privacy hash:ip family inet; \\ ipset create letsencrypt hash:ip family inet; \\ ipset create storagebox hash:ip family inet Afterwards we have to save our rules because they only configured in RAM. We will also write a little script which reloads the rules at startup. ipset save > /etc/ipset.up.rules; \\ cat > /etc/network/if-pre-up.d/loadrules <<-EOF; chmod 755 /etc/network/if-pre-up.d/loadrules #!/bin/sh /sbin/ipset restore -! < /etc/ipset.up.rules EOF","title":"Configuration"},{"location":"software/seedbox/#dnsmasq","text":"Dnsmasq is a tiny DNS server which we will use to resolve the dns addresses and store them to a IPset.","title":"Dnsmasq"},{"location":"software/seedbox/#installation_2","text":"apt install -y dnsmasq","title":"Installation"},{"location":"software/seedbox/#configuration_1","text":"We configure Dnsmasq to listen only on 127.0.0.1 and to store the IP addresses of specific domains in our IPsets. Uncomment the last line to activate reading the conf file in /etc/dnsmasq.d/ : sed -i -e 's/^#conf-dir=\\/etc\\/dnsmasq\\.d\\/,\\*\\.conf/conf-dir=\\/etc\\/dnsmasq\\.d\\/,\\*\\.conf/g' /etc/dnsmasq.conf Configure the interfaces which the DNS server should listen to: cat > /etc/dnsmasq.d/01_interfaces.conf <<-EOF # If you want dnsmasq to listen for DHCP and DNS requests only on # specified interfaces (and the loopback) give the name of the # interface (eg eth0) here. # Repeat the line for more than one interface. #interface= # Or you can specify which interface _not_ to listen on except-interface=tun0 # Or which to listen on by address (remember to include 127.0.0.1 if # you use this.) listen-address=127.0.0.1 # If you want dnsmasq to provide only DNS service on an interface, # configure it as shown above, and then use the following line to # disable DHCP and TFTP on it. #no-dhcp-interface= EOF Configure the server to store the matching IPs to the IPset: cat > /etc/dnsmasq.d/02_ipsets.conf <<-EOF # Add the IPs of all queries to yahoo.com, google.com, and their # subdomains to the vpn and search ipsets: #ipset=/yahoo.com/google.com/vpn,search ipset=/perfect-privacy.com/perfect_privacy ipset=/letsencrypt.org/letsencrypt ipset=/your-storagebox.de/storagebox EOF","title":"Configuration"},{"location":"software/seedbox/#openvpn","text":"OpenVPN in an open source vpn software.","title":"OpenVPN"},{"location":"software/seedbox/#installation_3","text":"First install OpenVPN, go to the OpenVPN config directory ( /etc/openvpn ) and download the configuration files from Perfect Privacy. The script below also creates a password.txt with credentials and modifies the files so that they refer to the credentials. apt install -y openvpn && \\ cd /etc/openvpn/ && \\ clear; \\ echo \"Please enter your Perfect Privacy credentials\"; \\ read -p 'Username: ' username && \\ read -sp 'Password: ' password && \\ wget -v --post-data \"username=$username&password=$password&uri=/member/download/?file=linux_udp.tar.gz\" -O linux_udp.tar.gz \"https://www.perfect-privacy.com/member/\" && \\ echo \"$username\" > password.txt && \\ echo \"$password\" >> password.txt && \\ username=''; \\ password=''; \\ tar xfvz linux_udp.tar.gz && \\ mv ./linux_udp/* ./ && \\ rmdir ./linux_udp && \\ rm -f ./linux_udp.tar.gz && \\ chown root:root ./* && \\ chmod 400 password.txt && \\ for file in ./*.ovpn; do sed -i -e 's/^auth-user-pass.*$/auth-user-pass password.txt/g' $file; done && \\ sed -i -e '/echo -n \\\"\\$R\\\" \\| \\/sbin\\/resolvconf -a \\\"\\${dev}\\.openvpn\\\"/a \\ \\ \\ \\ \\ \\ \\ \\ \\/etc\\/openvpn\\/patch_ports\\.sh' /etc/openvpn/update-resolv-conf Afterwards link the config which you want to use to .conf (e.g. Rotterdam.ovpn to Rotterdam.conf ) and modify the defaults file for OpenVPN to start the VPN connection automatically. clear; \\ echo \"Enter the file name of the for your preferred server location.\"; \\ read -p \"File name (e.g. Rotterdam.ovpn): \" config_file && \\ if [ ! -f ./$config_file ]; \\ then echo \"File not found!\"; \\ else \\ config_name=$(echo $config_file | awk '{split($0,a,\".\"); print a[1]}'); \\ ln -s ./$config_file ./$config_name.conf; \\ sed -i -e \"/^#AUTOSTART=\\\"home office\\\"$/a AUTOSTART=\\\"$config_name\\\"\" /etc/default/openvpn; \\ fi && \\ systemctl daemon-reload Now we are adding a script to modify the torrent client ports. /etc/openvpn/patch_ports.sh : touch /etc/openvpn/patch_ports.sh && \\ chmod +x /etc/openvpn/patch_ports.sh; \\ vim /etc/openvpn/patch_ports.sh; #!/bin/bash vpn_tun_dev=\"tun0\" user=\"dedibox\" # Get VPN internal IP Address vpn_int_ip=$(ip -f inet a s $vpn_tun_dev | grep \"inet\\b\" | awk '{print $2}' | cut -d'/' -f1) # Check if tunnel device is available if [[ -z $vpn_int_ip ]]; then echo \"Shit there is no $vpn_tun_dev interface\" exit 1 fi # Generate ports blck3_ip=$(echo \"$vpn_int_ip\" | cut -f3 -d'.') blck4_ip=$(echo \"$vpn_int_ip\" | cut -f4 -d'.') blck3_prt=$(($(($blck3_ip%16))*256)) # Perfect Privacy port calculation for the 3rd octet -- (<3rd Block Number> mod 16) * 256 # PP port calcucaltion -- <Base port>+<generated 3rd block>+<4th block> vpn_port1=$((10000+$blck3_prt+$blck4_ip)) vpn_port2=$((20000+$blck3_prt+$blck4_ip)) vpn_port3=$((30000+$blck3_prt+$blck4_ip)) # Change rtorrent incoming port sed -i -E \"s/^network\\.port_range\\.set = [0-9]{1,5}-[0-9]{1,5}$/network\\.port_range\\.set = $vpn_port1-$vpn_port1/g\" /home/$user/.rtorrent.rc systemctl restart rtorrent@dedibox.service # Change Deluge incoming port systemctl stop deluged@dedibox.service deluge_line=$(grep -n 'listen_ports' /home/$user/.config/deluge/core.conf | cut -d\":\" -f1) sed -i \"$(($deluge_line+1))s/.*/ $vpn_port2,/\" /home/$user/.config/deluge/core.conf sed -i \"$(($deluge_line+2))s/.*/ $vpn_port2/\" /home/$user/.config/deluge/core.conf systemctl start deluged@dedibox.service","title":"Installation"},{"location":"software/seedbox/#iptables","text":"iptables is a userpace program to configure the firewall.","title":"iptables"},{"location":"software/seedbox/#configuration_2","text":"Explanation iptables rules # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED,RELATED -j ACCEPT # DROP storage box traffic via tun0 iptables -t filter -A OUTPUT -o tun0 -m set --match-set storagebox dst -j DROP iptables -t filter -A INPUT -i tun0 -m set --match-set storagebox src -j DROP # Allow DNS outgoing iptables -t filter -A INPUT -i eth0 -p udp --sport 53 -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p udp --dport 53 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow OpenVPN outgoing only to perfect-privacy servers iptables -t filter -A OUTPUT -o eth0 -p udp -m set --match-set perfect_privacy dst -m multiport --dports 148,149,150,151,1148,1149,1150,1151 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m set --match-set perfect_privacy dst -m multiport --dports 300,301,142,152,1142,1152 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 148,149,150,151,1148,1149,1150,1151 -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 300,301,142,152,1142,1152 -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443,10354 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --sports 80,443,10354 -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow StorageBox outgoing iptables -t filter -A OUTPUT -o eth0 -p udp -m multiport --dports 137,138 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --dports 139,445 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 137,138 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 139,445 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow traffic through OpenVPN iptables -t filter -A OUTPUT -o tun0 -j ACCEPT iptables -t filter -A INPUT -i tun0 -j ACCEPT # Policy DROP (everything else) iptables -t filter -P OUTPUT DROP iptables -t filter -P INPUT DROP Set up needed iptables rules: iptables -A OUTPUT -o lo -j ACCEPT; \\ iptables -A INPUT -i lo -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p udp --sport 53 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p udp --dport 53 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p udp -m set --match-set perfect_privacy dst -m multiport --dports 148,149,150,151,1148,1149,1150,1151 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m set --match-set perfect_privacy dst -m multiport --dports 300,301,142,152,1142,1152 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 148,149,150,151,1148,1149,1150,1151 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 300,301,142,152,1142,1152 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80,443,10354 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --sports 80,443,10354 -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p udp -m multiport --dports 137,138 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --dports 139,445 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 137,138 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 139,445 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT; \\ iptables -t filter -A OUTPUT -o tun0 -j ACCEPT; \\ iptables -t filter -A INPUT -i tun0 -j ACCEPT; \\ iptables -t filter -P OUTPUT DROP; \\ iptables -t filter -P INPUT DROP If you use fail2ban If you use fail to ban you have to delete the fail2ban rules from the config file! Save iptables rules because they also only configured in RAM: iptables-save > /etc/iptables.up.rules; \\ echo \"/sbin/iptables-restore < /etc/iptables.up.rules\" >> /etc/network/if-pre-up.d/loadrules","title":"Configuration"},{"location":"software/seedbox/#ip-ruleroute","text":"","title":"ip rule/route"},{"location":"software/seedbox/#configuration_3","text":"Add the following at the end of the block for the eth0 device. Replace 1.2.3.4 with the public IP from your server: vim /etc/network/interfaces post-up ip route add 172.31.1.1/32 dev eth0 proto kernel scope link src 1.2.3.4 table 1 post-up ip route add default via 172.31.1.1 table 1 post-up ip route add 195.201.107.35/32 via 172.31.1.1 dev eth0 post-up ip rule add table 1 from 1.2.3.4 post-up ip rule add fwmark 1 table 1 Afterwards apply the routes/rules: clear; \\ ip a; \\ read -p 'Local interface name (e.g. eth0): ' intname && \\ intip=$(ip -f inet a s $intname | grep \"inet\\b\" | awk '{print $2}' | cut -d'/' -f1) && \\ ip route add 172.31.1.1/32 dev eth0 proto kernel scope link src $intip table 1 && \\ ip route add default via 172.31.1.1 table 1 && \\ storageboxip=$(dig +noall +answer +nocomments +short u177197.your-storagebox.de) && \\ ip route add $storageboxip/32 via 172.31.1.1 dev eth0 && \\ ip rule add table 1 from $intip && \\ ip rule add fwmark 1 table 1","title":"Configuration"},{"location":"software/seedbox/#mount-storage-box","text":"Install cifs-utils : apt install -y cifs-utils Create directory within /mnt : mkdir /mnt/.nas && \\ chmod 444 /mnt/.nas Add a group for storage access and nice the group id: addgroup storage && \\ usermod -aG storage dedibox Add mount to fstab: clear; \\ echo \"Please enter your Storage Box credentials\"; \\ read -p 'Storage Box Username: ' sbusername && \\ read -sp 'Storage Box Password: ' sbpassword && \\ echo \"\" && \\ read -p 'Mount User ID: ' muid && \\ read -p 'Mount Group ID: ' mgid && \\ echo \"\" >> /etc/fstab && \\ echo \"# Storage Box - dedibox\" >> /etc/fstab && \\ echo \"//$sbusername.your-storagebox.de/backup /mnt/.nas cifs iocharset=utf8,credentials=/root/.smbcredentials,uid=$muid,gid=$mgid,rw,file_mode=0775,dir_mode=0775 0 0\" >> /etc/fstab && \\ echo \"username=$sbusername\" > /root/.smbcredentials && \\ echo \"password=$sbpassword\" >> /root/.smbcredentials && \\ chmod 600 /root/.smbcredentials && \\ cat << EOF > /root/mount.sh && chmod 700 /root/mount.sh #!/bin/bash # Check if script runs as root if [ $UID != 0 ]; then echo \"You have to run this script as root.\" exit 1 fi # Add route to storage box storageboxip=$(dig +noall +answer +nocomments +short u177197.your-storagebox.de) if [[ -z $(ip route | grep \"$storageboxip via 172.31.1.1 dev eth0\") ]]; then ip route add $storageboxip/32 via 172.31.1.1 dev eth0 fi # Mount all unmounted mounts mount -a # Mount Crypto read -sp 'rclone config password: ' RCLONE_CONFIG_PASS echo \"\" export RCLONE_CONFIG_PASS screen -dmS rclone rclone mount --ask-password=false --uid $muid --gid $mgid --umask 002 --allow-other storage_box_crypt: /mnt/nas unset RCLONE_CONFIG_PASS EOF Mount NAS storage: mount -a","title":"Mount storage box"},{"location":"software/seedbox/#rclone","text":"rclone is tiny tool to mount cloud storages. It also provides a strong encryption.","title":"rclone"},{"location":"software/seedbox/#installation_4","text":"curl https://rclone.org/install.sh | sudo bash","title":"Installation"},{"location":"software/seedbox/#configuration_4","text":"Open rclone configuration: rclone config Select 'n' (new remote) Name: storage_box_crypt Storage Type: '7' (Encrypt/Decrypt a remote) \"crypt\" remote: /mnt/.nas Filename encryption: '2' (Encrypt the filenames see the docs for the details.) \"standard\" Encrypt directories: '1' (Encrypt directory names.) \"true\" Password: 'y' (Yes type in my own password) Salt: 'y' (Yes type in my own password) Confirm configuration: 'y' (Yes this is OK) Set configuration password: 's' Add Password: 'a' Quit to main menu: 'q' Quit configuration: 'q' Create mount point: mkdir /mnt/nas && \\ chmod 444 /mnt/nas Mount rclone share: ./mount.sh","title":"Configuration"},{"location":"software/znc_irc_bouncer/","text":"ZNC \u00b6 ZNC is an advanced IRC bouncer that is left connected so an IRC client can disconnect/reconnect without losing the chat session. OS: Ubuntu 18.04 LTS (Bionic Beaver) Initial Server setup \u00b6 Update System \u00b6 apt update && apt full-upgrade -y && \\ apt autoremove -y Make vim colored with dark background settings \u00b6 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF Fix locale \u00b6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF Edit .bashrc \u00b6 /root/.bashrc / /etc/skel/.bashrc : # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi Create a new user user \u00b6 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/ Change the SSH deamon to allow only SSH-keys \u00b6 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF Delete root's authorized_keys file \u00b6 Attention Please check before if you can login to the user user with your ssh-key! rm ~/.ssh/authorized_keys Important Log out and re login as user ! Install base packages \u00b6 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ zip \\ unzip \\ unrar \\ screen \\ tmux \\ htop Install ZNC \u00b6 You can find a detailed install instruction here: https://wiki.znc.in/Installation#Ubuntu Pre-requiemetns \u00b6 Install python-software-properties: sudo apt install -y software-properties-common Create user for running znc: sudo useradd -r -s /usr/sbin/nologin znc Create a config directory for znc: sudo mkdir /etc/znc && \\ sudo chown znc:znc /etc/znc; \\ sudo chmod 750 /etc/znc Install ZNC \u00b6 Add PPA and install: sudo add-apt-repository ppa:teward/znc && \\ sudo apt update && \\ sudo apt install -y znc znc-dev znc-perl znc-python znc-tcl Configure ZNC \u00b6 sudo -u znc znc -c -d /etc/znc Configuration Options: [ .. ] Checking for list of available modules... [ ** ] [ ** ] -- Global settings -- [ ** ] [ ?? ] Listen on port (1025 to 65534): 6667 [ !! ] WARNING: Some web browsers reject port 6667. If you intend to [ !! ] use ZNC's web interface, you might want to use another port. [ ?? ] Proceed with port 6667 anyway? (yes/no) [yes]: [ ?? ] Listen using SSL (yes/no) [no]: yes [ ?? ] Listen using both IPv4 and IPv6 (yes/no) [yes]: [ .. ] Verifying the listener... [ ** ] Unable to locate pem file: [/etc/znc/znc.pem], creating it [ .. ] Writing Pem file [/etc/znc/znc.pem]... [ ** ] Enabled global modules [webadmin] [ ** ] [ ** ] -- Admin user settings -- [ ** ] [ ?? ] Username (alphanumeric): admin [ ?? ] Enter password: [ ?? ] Confirm password: [ ?? ] Nick [admin]: [ ?? ] Alternate nick [admin_]: [ ?? ] Ident [admin]: [ ?? ] Real name (optional): [ ?? ] Bind host (optional): [ ** ] Enabled user modules [chansaver, controlpanel] [ ** ] [ ?? ] Set up a network? (yes/no) [yes]: [ ** ] [ ** ] -- Network settings -- [ ** ] [ ?? ] Name [freenode]: [ ?? ] Server host [chat.freenode.net]: ^C user@znc /etc $ sudo -u znc znc -c -d /etc/znc [ .. ] Checking for list of available modules... [ ** ] [ ** ] -- Global settings -- [ ** ] [ ?? ] Listen on port (1025 to 65534): 6667 [ !! ] WARNING: Some web browsers reject port 6667. If you intend to [ !! ] use ZNC's web interface, you might want to use another port. [ ?? ] Proceed with port 6667 anyway? (yes/no) [yes]: [ ?? ] Listen using SSL (yes/no) [no]: yes [ ?? ] Listen using both IPv4 and IPv6 (yes/no) [yes]: [ .. ] Verifying the listener... [ ** ] Enabled global modules [webadmin] [ ** ] [ ** ] -- Admin user settings -- [ ** ] [ ?? ] Username (alphanumeric): admin [ ?? ] Enter password: [ ?? ] Confirm password: [ ?? ] Nick [admin]: [ ?? ] Alternate nick [admin_]: [ ?? ] Ident [admin]: [ ?? ] Real name (optional): [ ?? ] Bind host (optional): [ ** ] Enabled user modules [chansaver, controlpanel] [ ** ] [ ?? ] Set up a network? (yes/no) [yes]: no [ ** ] [ .. ] Writing config [/etc/znc/configs/znc.conf]... [ ** ] [ ** ] To connect to this ZNC you need to connect to it as your IRC server [ ** ] using the port that you supplied. You have to supply your login info [ ** ] as the IRC server password like this: user/network:pass. [ ** ] [ ** ] Try something like this in your IRC client... [ ** ] /server <znc_server_ip> +6667 admin:<pass> [ ** ] [ ** ] To manage settings, users and networks, point your web browser to [ ** ] https://<znc_server_ip>:6667/ [ ** ] [ ?? ] Launch ZNC now? (yes/no) [yes]: no ZNC service \u00b6 cat << EOF | sudo tee /etc/systemd/system/znc.service && \\ sudo systemctl daemon-reload && \\ sudo systemctl enable znc [Unit] Description=ZNC, an advanced IRC bouncer After=network-online.target [Service] ExecStart=/usr/bin/znc -f --datadir=/etc/znc User=znc [Install] WantedBy=multi-user.target EOF Nginx \u00b6 Install \u00b6 Install all needed Packages for nginx tasks: sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx Configure \u00b6 Delete default entry \u00b6 sudo rm /etc/nginx/sites-enabled/default Add ssl_params \u00b6 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF General HTTP to HTTPS redirector \u00b6 This nginx entry will rewrite all traffic from HTTP to HTTPS. read -r -d '' read_tmp<<\"EOF\" server { \\tlisten 80 default_server; \\tlisten [::]:80 default_server; \\tserver_name _; \\treturn 301 https://$host$request_uri; } EOF echo -e \"$read_tmp\" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf ZNC web interface on Port 443 \u00b6 Add server directive for Portainer: cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-znc.mischaufen.de.conf && \\ sudo ln -s ../sites-available/10-znc.mischaufen.de.conf /etc/nginx/sites-enabled/10-znc.mischaufen.de.conf server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tznc.mischaufen.de; \\taccess_log\\t/var/log/nginx/znc.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/znc.mischaufen.de_error.log warn; \\tlocation / { \\t\\tproxy_pass\\t\\thttps://[::1]:6667/; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tproxy_set_header\\tX-Forwarded-For \\$proxy_add_x_forwarded_for; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. sudo certbot --nginx -d znc.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/znc.mischaufen.de/chain.pem;' /etc/nginx/sites-available/10-znc.mischaufen.de.conf && \\ sudo systemctl reload nginx.service Add cronjob for renewing cetificates \u00b6 This cronjob renews the certificat and create one for znc. sudo crontab -e : 0 */12 * * * /usr/local/bin/certbot renew && cat /etc/letsencrypt/live/znc.mischaufen.de/{privkey,cert,chain}.pem > /etc/znc/znc.pem ZNC SSL config \u00b6 Initial copy of our let's encrypt certificates to znc \u00b6 sudo cat /etc/letsencrypt/live/znc.mischaufen.de/{privkey,cert,chain}.pem | sudo tee /etc/znc/znc.pem Run ZNC for the 1 st time \u00b6 sudo systemctl start znc.service","title":"ZNC"},{"location":"software/znc_irc_bouncer/#znc","text":"ZNC is an advanced IRC bouncer that is left connected so an IRC client can disconnect/reconnect without losing the chat session. OS: Ubuntu 18.04 LTS (Bionic Beaver)","title":"ZNC"},{"location":"software/znc_irc_bouncer/#initial-server-setup","text":"","title":"Initial Server setup"},{"location":"software/znc_irc_bouncer/#update-system","text":"apt update && apt full-upgrade -y && \\ apt autoremove -y","title":"Update System"},{"location":"software/znc_irc_bouncer/#make-vim-colored-with-dark-background-settings","text":"cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Make vim colored with dark background settings"},{"location":"software/znc_irc_bouncer/#fix-locale","text":"cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF","title":"Fix locale"},{"location":"software/znc_irc_bouncer/#edit-bashrc","text":"/root/.bashrc / /etc/skel/.bashrc : # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi","title":"Edit .bashrc"},{"location":"software/znc_irc_bouncer/#create-a-new-user-user","text":"adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/","title":"Create a new user user"},{"location":"software/znc_irc_bouncer/#change-the-ssh-deamon-to-allow-only-ssh-keys","text":"cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF","title":"Change the SSH deamon to allow only SSH-keys"},{"location":"software/znc_irc_bouncer/#delete-roots-authorized_keys-file","text":"Attention Please check before if you can login to the user user with your ssh-key! rm ~/.ssh/authorized_keys Important Log out and re login as user !","title":"Delete root's authorized_keys file"},{"location":"software/znc_irc_bouncer/#install-base-packages","text":"sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ zip \\ unzip \\ unrar \\ screen \\ tmux \\ htop","title":"Install base packages"},{"location":"software/znc_irc_bouncer/#install-znc","text":"You can find a detailed install instruction here: https://wiki.znc.in/Installation#Ubuntu","title":"Install ZNC"},{"location":"software/znc_irc_bouncer/#pre-requiemetns","text":"Install python-software-properties: sudo apt install -y software-properties-common Create user for running znc: sudo useradd -r -s /usr/sbin/nologin znc Create a config directory for znc: sudo mkdir /etc/znc && \\ sudo chown znc:znc /etc/znc; \\ sudo chmod 750 /etc/znc","title":"Pre-requiemetns"},{"location":"software/znc_irc_bouncer/#install-znc_1","text":"Add PPA and install: sudo add-apt-repository ppa:teward/znc && \\ sudo apt update && \\ sudo apt install -y znc znc-dev znc-perl znc-python znc-tcl","title":"Install ZNC"},{"location":"software/znc_irc_bouncer/#configure-znc","text":"sudo -u znc znc -c -d /etc/znc Configuration Options: [ .. ] Checking for list of available modules... [ ** ] [ ** ] -- Global settings -- [ ** ] [ ?? ] Listen on port (1025 to 65534): 6667 [ !! ] WARNING: Some web browsers reject port 6667. If you intend to [ !! ] use ZNC's web interface, you might want to use another port. [ ?? ] Proceed with port 6667 anyway? (yes/no) [yes]: [ ?? ] Listen using SSL (yes/no) [no]: yes [ ?? ] Listen using both IPv4 and IPv6 (yes/no) [yes]: [ .. ] Verifying the listener... [ ** ] Unable to locate pem file: [/etc/znc/znc.pem], creating it [ .. ] Writing Pem file [/etc/znc/znc.pem]... [ ** ] Enabled global modules [webadmin] [ ** ] [ ** ] -- Admin user settings -- [ ** ] [ ?? ] Username (alphanumeric): admin [ ?? ] Enter password: [ ?? ] Confirm password: [ ?? ] Nick [admin]: [ ?? ] Alternate nick [admin_]: [ ?? ] Ident [admin]: [ ?? ] Real name (optional): [ ?? ] Bind host (optional): [ ** ] Enabled user modules [chansaver, controlpanel] [ ** ] [ ?? ] Set up a network? (yes/no) [yes]: [ ** ] [ ** ] -- Network settings -- [ ** ] [ ?? ] Name [freenode]: [ ?? ] Server host [chat.freenode.net]: ^C user@znc /etc $ sudo -u znc znc -c -d /etc/znc [ .. ] Checking for list of available modules... [ ** ] [ ** ] -- Global settings -- [ ** ] [ ?? ] Listen on port (1025 to 65534): 6667 [ !! ] WARNING: Some web browsers reject port 6667. If you intend to [ !! ] use ZNC's web interface, you might want to use another port. [ ?? ] Proceed with port 6667 anyway? (yes/no) [yes]: [ ?? ] Listen using SSL (yes/no) [no]: yes [ ?? ] Listen using both IPv4 and IPv6 (yes/no) [yes]: [ .. ] Verifying the listener... [ ** ] Enabled global modules [webadmin] [ ** ] [ ** ] -- Admin user settings -- [ ** ] [ ?? ] Username (alphanumeric): admin [ ?? ] Enter password: [ ?? ] Confirm password: [ ?? ] Nick [admin]: [ ?? ] Alternate nick [admin_]: [ ?? ] Ident [admin]: [ ?? ] Real name (optional): [ ?? ] Bind host (optional): [ ** ] Enabled user modules [chansaver, controlpanel] [ ** ] [ ?? ] Set up a network? (yes/no) [yes]: no [ ** ] [ .. ] Writing config [/etc/znc/configs/znc.conf]... [ ** ] [ ** ] To connect to this ZNC you need to connect to it as your IRC server [ ** ] using the port that you supplied. You have to supply your login info [ ** ] as the IRC server password like this: user/network:pass. [ ** ] [ ** ] Try something like this in your IRC client... [ ** ] /server <znc_server_ip> +6667 admin:<pass> [ ** ] [ ** ] To manage settings, users and networks, point your web browser to [ ** ] https://<znc_server_ip>:6667/ [ ** ] [ ?? ] Launch ZNC now? (yes/no) [yes]: no","title":"Configure ZNC"},{"location":"software/znc_irc_bouncer/#znc-service","text":"cat << EOF | sudo tee /etc/systemd/system/znc.service && \\ sudo systemctl daemon-reload && \\ sudo systemctl enable znc [Unit] Description=ZNC, an advanced IRC bouncer After=network-online.target [Service] ExecStart=/usr/bin/znc -f --datadir=/etc/znc User=znc [Install] WantedBy=multi-user.target EOF","title":"ZNC service"},{"location":"software/znc_irc_bouncer/#nginx","text":"","title":"Nginx"},{"location":"software/znc_irc_bouncer/#install","text":"Install all needed Packages for nginx tasks: sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx","title":"Install"},{"location":"software/znc_irc_bouncer/#configure","text":"","title":"Configure"},{"location":"software/znc_irc_bouncer/#delete-default-entry","text":"sudo rm /etc/nginx/sites-enabled/default","title":"Delete default entry"},{"location":"software/znc_irc_bouncer/#add-ssl_params","text":"cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF","title":"Add ssl_params"},{"location":"software/znc_irc_bouncer/#general-http-to-https-redirector","text":"This nginx entry will rewrite all traffic from HTTP to HTTPS. read -r -d '' read_tmp<<\"EOF\" server { \\tlisten 80 default_server; \\tlisten [::]:80 default_server; \\tserver_name _; \\treturn 301 https://$host$request_uri; } EOF echo -e \"$read_tmp\" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf","title":"General HTTP to HTTPS redirector"},{"location":"software/znc_irc_bouncer/#znc-web-interface-on-port-443","text":"Add server directive for Portainer: cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-znc.mischaufen.de.conf && \\ sudo ln -s ../sites-available/10-znc.mischaufen.de.conf /etc/nginx/sites-enabled/10-znc.mischaufen.de.conf server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tznc.mischaufen.de; \\taccess_log\\t/var/log/nginx/znc.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/znc.mischaufen.de_error.log warn; \\tlocation / { \\t\\tproxy_pass\\t\\thttps://[::1]:6667/; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tproxy_set_header\\tX-Forwarded-For \\$proxy_add_x_forwarded_for; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. sudo certbot --nginx -d znc.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/znc.mischaufen.de/chain.pem;' /etc/nginx/sites-available/10-znc.mischaufen.de.conf && \\ sudo systemctl reload nginx.service","title":"ZNC web interface on Port 443"},{"location":"software/znc_irc_bouncer/#add-cronjob-for-renewing-cetificates","text":"This cronjob renews the certificat and create one for znc. sudo crontab -e : 0 */12 * * * /usr/local/bin/certbot renew && cat /etc/letsencrypt/live/znc.mischaufen.de/{privkey,cert,chain}.pem > /etc/znc/znc.pem","title":"Add cronjob for renewing cetificates"},{"location":"software/znc_irc_bouncer/#znc-ssl-config","text":"","title":"ZNC SSL config"},{"location":"software/znc_irc_bouncer/#initial-copy-of-our-lets-encrypt-certificates-to-znc","text":"sudo cat /etc/letsencrypt/live/znc.mischaufen.de/{privkey,cert,chain}.pem | sudo tee /etc/znc/znc.pem","title":"Initial copy of our let's encrypt certificates to znc"},{"location":"software/znc_irc_bouncer/#run-znc-for-the-1st-time","text":"sudo systemctl start znc.service","title":"Run ZNC for the 1st time"}]}