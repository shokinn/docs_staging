{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome my Docs \u00b6 These docs are written in Markdown and generated to a Wiki with MkDocs . The used theme is Material for MkDocs . Here you can find the docs to my Projects. Sincerely Yours, Philip","title":"Home"},{"location":"#welcome-my-docs","text":"These docs are written in Markdown and generated to a Wiki with MkDocs . The used theme is Material for MkDocs . Here you can find the docs to my Projects. Sincerely Yours, Philip","title":"Welcome my Docs"},{"location":"datenschutzerklaerung/","text":"Datenschutzerkl\u00e4rung \u00b6 Diese Datenschutzerkl\u00e4rung kl\u00e4rt Sie \u00fcber die Art, den Umfang und Zweck der Verarbeitung von personenbezogenen Daten (nachfolgend kurz \u201eDaten\u201c) im Rahmen der Erbringung unserer Leistungen sowie innerhalb unseres Onlineangebotes und der mit ihm verbundenen Webseiten, Funktionen und Inhalte sowie externen Onlinepr\u00e4senzen, wie z.B. unser Social Media Profile auf (nachfolgend gemeinsam bezeichnet als \u201eOnlineangebot\u201c). Im Hinblick auf die verwendeten Begrifflichkeiten, wie z.B. \u201eVerarbeitung\u201c oder \u201eVerantwortlicher\u201c verweisen wir auf die Definitionen im Art. 4 der Datenschutzgrundverordnung (DSGVO). Verantwortlicher \u00b6 Philip Henning Hallesches Ufer 28 10963 Berlin GERMANY E-Mailadresse: mail+imprint@philip-henning.com Impressum: https://docs.pphg.tech/imprint/ Arten der verarbeiteten Daten \u00b6 - Bestandsdaten (z.B., Personen-Stammdaten, Namen oder Adressen). - Kontaktdaten (z.B., E-Mail, Telefonnummern). - Inhaltsdaten (z.B., Texteingaben, Fotografien, Videos). - Nutzungsdaten (z.B., besuchte Webseiten, Interesse an Inhalten, Zugriffszeiten). - Meta-/Kommunikationsdaten (z.B., Ger\u00e4te-Informationen, IP-Adressen). Kategorien betroffener Personen \u00b6 Besucher und Nutzer des Onlineangebotes (Nachfolgend bezeichnen wir die betroffenen Personen zusammenfassend auch als \u201eNutzer\u201c). Zweck der Verarbeitung \u00b6 - Zurverf\u00fcgungstellung des Onlineangebotes, seiner Funktionen und Inhalte. - Beantwortung von Kontaktanfragen und Kommunikation mit Nutzern. - Sicherheitsma\u00dfnahmen. - Reichweitenmessung/Marketing Verwendete Begrifflichkeiten \u00b6 \u201ePersonenbezogene Daten\u201c sind alle Informationen, die sich auf eine identifizierte oder identifizierbare nat\u00fcrliche Person (im Folgenden \u201ebetroffene Person\u201c) beziehen; als identifizierbar wird eine nat\u00fcrliche Person angesehen, die direkt oder indirekt, insbesondere mittels Zuordnung zu einer Kennung wie einem Namen, zu einer Kennnummer, zu Standortdaten, zu einer Online-Kennung (z.B. Cookie) oder zu einem oder mehreren besonderen Merkmalen identifiziert werden kann, die Ausdruck der physischen, physiologischen, genetischen, psychischen, wirtschaftlichen, kulturellen oder sozialen Identit\u00e4t dieser nat\u00fcrlichen Person sind. \u201eVerarbeitung\u201c ist jeder mit oder ohne Hilfe automatisierter Verfahren ausgef\u00fchrte Vorgang oder jede solche Vorgangsreihe im Zusammenhang mit personenbezogenen Daten. Der Begriff reicht weit und umfasst praktisch jeden Umgang mit Daten. \u201ePseudonymisierung\u201c die Verarbeitung personenbezogener Daten in einer Weise, dass die personenbezogenen Daten ohne Hinzuziehung zus\u00e4tzlicher Informationen nicht mehr einer spezifischen betroffenen Person zugeordnet werden k\u00f6nnen, sofern diese zus\u00e4tzlichen Informationen gesondert aufbewahrt werden und technischen und organisatorischen Ma\u00dfnahmen unterliegen, die gew\u00e4hrleisten, dass die personenbezogenen Daten nicht einer identifizierten oder identifizierbaren nat\u00fcrlichen Person zugewiesen werden. \u201eProfiling\u201c jede Art der automatisierten Verarbeitung personenbezogener Daten, die darin besteht, dass diese personenbezogenen Daten verwendet werden, um bestimmte pers\u00f6nliche Aspekte, die sich auf eine nat\u00fcrliche Person beziehen, zu bewerten, insbesondere um Aspekte bez\u00fcglich Arbeitsleistung, wirtschaftliche Lage, Gesundheit, pers\u00f6nliche Vorlieben, Interessen, Zuverl\u00e4ssigkeit, Verhalten, Aufenthaltsort oder Ortswechsel dieser nat\u00fcrlichen Person zu analysieren oder vorherzusagen. Als \u201eVerantwortlicher\u201c wird die nat\u00fcrliche oder juristische Person, Beh\u00f6rde, Einrichtung oder andere Stelle, die allein oder gemeinsam mit anderen \u00fcber die Zwecke und Mittel der Verarbeitung von personenbezogenen Daten entscheidet, bezeichnet. \u201eAuftragsverarbeiter\u201c eine nat\u00fcrliche oder juristische Person, Beh\u00f6rde, Einrichtung oder andere Stelle, die personenbezogene Daten im Auftrag des Verantwortlichen verarbeitet. Ma\u00dfgebliche Rechtsgrundlagen \u00b6 Nach Ma\u00dfgabe des Art. 13 DSGVO teilen wir Ihnen die Rechtsgrundlagen unserer Datenverarbeitungen mit. F\u00fcr Nutzer aus dem Geltungsbereich der Datenschutzgrundverordnung (DSGVO), d.h. der EU und des EWG gilt, sofern die Rechtsgrundlage in der Datenschutzerkl\u00e4rung nicht genannt wird, Folgendes: Die Rechtsgrundlage f\u00fcr die Einholung von Einwilligungen ist Art. 6 Abs. 1 lit. a und Art. 7 DSGVO; Die Rechtsgrundlage f\u00fcr die Verarbeitung zur Erf\u00fcllung unserer Leistungen und Durchf\u00fchrung vertraglicher Ma\u00dfnahmen sowie Beantwortung von Anfragen ist Art. 6 Abs. 1 lit. b DSGVO; Die Rechtsgrundlage f\u00fcr die Verarbeitung zur Erf\u00fcllung unserer rechtlichen Verpflichtungen ist Art. 6 Abs. 1 lit. c DSGVO; F\u00fcr den Fall, dass lebenswichtige Interessen der betroffenen Person oder einer anderen nat\u00fcrlichen Person eine Verarbeitung personenbezogener Daten erforderlich machen, dient Art. 6 Abs. 1 lit. d DSGVO als Rechtsgrundlage. Die Rechtsgrundlage f\u00fcr die erforderliche Verarbeitung zur Wahrnehmung einer Aufgabe, die im \u00f6ffentlichen Interesse liegt oder in Aus\u00fcbung \u00f6ffentlicher Gewalt erfolgt, die dem Verantwortlichen \u00fcbertragen wurde ist Art. 6 Abs. 1 lit. e DSGVO. Die Rechtsgrundlage f\u00fcr die Verarbeitung zur Wahrung unserer berechtigten Interessen ist Art. 6 Abs. 1 lit. f DSGVO. Die Verarbeitung von Daten zu anderen Zwecken als denen, zu denen sie ehoben wurden, bestimmt sich nach den Vorgaben des Art 6 Abs. 4 DSGVO. Die Verarbeitung von besonderen Kategorien von Daten (entsprechend Art. 9 Abs. 1 DSGVO) bestimmt sich nach den Vorgaben des Art. 9 Abs. 2 DSGVO. Sicherheitsma\u00dfnahmen \u00b6 Wir treffen nach Ma\u00dfgabe der gesetzlichen Vorgabenunter Ber\u00fccksichtigung des Stands der Technik, der Implementierungskosten und der Art, des Umfangs, der Umst\u00e4nde und der Zwecke der Verarbeitung sowie der unterschiedlichen Eintrittswahrscheinlichkeit und Schwere des Risikos f\u00fcr die Rechte und Freiheiten nat\u00fcrlicher Personen, geeignete technische und organisatorische Ma\u00dfnahmen, um ein dem Risiko angemessenes Schutzniveau zu gew\u00e4hrleisten. Zu den Ma\u00dfnahmen geh\u00f6ren insbesondere die Sicherung der Vertraulichkeit, Integrit\u00e4t und Verf\u00fcgbarkeit von Daten durch Kontrolle des physischen Zugangs zu den Daten, als auch des sie betreffenden Zugriffs, der Eingabe, Weitergabe, der Sicherung der Verf\u00fcgbarkeit und ihrer Trennung. Des Weiteren haben wir Verfahren eingerichtet, die eine Wahrnehmung von Betroffenenrechten, L\u00f6schung von Daten und Reaktion auf Gef\u00e4hrdung der Daten gew\u00e4hrleisten. Ferner ber\u00fccksichtigen wir den Schutz personenbezogener Daten bereits bei der Entwicklung, bzw. Auswahl von Hardware, Software sowie Verfahren, entsprechend dem Prinzip des Datenschutzes durch Technikgestaltung und durch datenschutzfreundliche Voreinstellungen. Zusammenarbeit mit Auftragsverarbeitern, gemeinsam Verantwortlichen und Dritten \u00b6 Sofern wir im Rahmen unserer Verarbeitung Daten gegen\u00fcber anderen Personen und Unternehmen (Auftragsverarbeitern, gemeinsam Verantwortlichen oder Dritten) offenbaren, sie an diese \u00fcbermitteln oder ihnen sonst Zugriff auf die Daten gew\u00e4hren, erfolgt dies nur auf Grundlage einer gesetzlichen Erlaubnis (z.B. wenn eine \u00dcbermittlung der Daten an Dritte, wie an Zahlungsdienstleister, zur Vertragserf\u00fcllung erforderlich ist), Nutzer eingewilligt haben, eine rechtliche Verpflichtung dies vorsieht oder auf Grundlage unserer berechtigten Interessen (z.B. beim Einsatz von Beauftragten, Webhostern, etc.). Sofern wir Daten anderen Unternehmen unserer Unternehmensgruppe offenbaren, \u00fcbermitteln oder ihnen sonst den Zugriff gew\u00e4hren, erfolgt dies insbesondere zu administrativen Zwecken als berechtigtes Interesse und dar\u00fcberhinausgehend auf einer den gesetzlichen Vorgaben entsprechenden Grundlage. \u00dcbermittlungen in Drittl\u00e4nder \u00b6 Sofern wir Daten in einem Drittland (d.h. au\u00dferhalb der Europ\u00e4ischen Union (EU), des Europ\u00e4ischen Wirtschaftsraums (EWR) oder der Schweizer Eidgenossenschaft) verarbeiten oder dies im Rahmen der Inanspruchnahme von Diensten Dritter oder Offenlegung, bzw. \u00dcbermittlung von Daten an andere Personen oder Unternehmen geschieht, erfolgt dies nur, wenn es zur Erf\u00fcllung unserer (vor)vertraglichen Pflichten, auf Grundlage Ihrer Einwilligung, aufgrund einer rechtlichen Verpflichtung oder auf Grundlage unserer berechtigten Interessen geschieht. Vorbehaltlich gesetzlicher oder vertraglicher Erlaubnisse, verarbeiten oder lassen wir die Daten in einem Drittland nur beim Vorliegen der gesetzlichen Voraussetzungen. D.h. die Verarbeitung erfolgt z.B. auf Grundlage besonderer Garantien, wie der offiziell anerkannten Feststellung eines der EU entsprechenden Datenschutzniveaus (z.B. f\u00fcr die USA durch das \u201ePrivacy Shield\u201c) oder Beachtung offiziell anerkannter spezieller vertraglicher Verpflichtungen. Rechte der betroffenen Personen \u00b6 Sie haben das Recht, eine Best\u00e4tigung dar\u00fcber zu verlangen, ob betreffende Daten verarbeitet werden und auf Auskunft \u00fcber diese Daten sowie auf weitere Informationen und Kopie der Daten entsprechend den gesetzlichen Vorgaben. Sie haben entsprechend. den gesetzlichen Vorgaben das Recht, die Vervollst\u00e4ndigung der Sie betreffenden Daten oder die Berichtigung der Sie betreffenden unrichtigen Daten zu verlangen. Sie haben nach Ma\u00dfgabe der gesetzlichen Vorgaben das Recht zu verlangen, dass betreffende Daten unverz\u00fcglich gel\u00f6scht werden, bzw. alternativ nach Ma\u00dfgabe der gesetzlichen Vorgaben eine Einschr\u00e4nkung der Verarbeitung der Daten zu verlangen. Sie haben das Recht zu verlangen, dass die Sie betreffenden Daten, die Sie uns bereitgestellt haben nach Ma\u00dfgabe der gesetzlichen Vorgaben zu erhalten und deren \u00dcbermittlung an andere Verantwortliche zu fordern. Sie haben ferner nach Ma\u00dfgabe der gesetzlichen Vorgaben das Recht, eine Beschwerde bei der zust\u00e4ndigen Aufsichtsbeh\u00f6rde einzureichen. Widerrufsrecht \u00b6 Sie haben das Recht, erteilte Einwilligungen mit Wirkung f\u00fcr die Zukunft zu widerrufen. Widerspruchsrecht \u00b6 Sie k\u00f6nnen der k\u00fcnftigen Verarbeitung der Sie betreffenden Daten nach Ma\u00dfgabe der gesetzlichen Vorgaben jederzeit widersprechen. Der Widerspruch kann insbesondere gegen die Verarbeitung f\u00fcr Zwecke der Direktwerbung erfolgen. Cookies und Widerspruchsrecht bei Direktwerbung \u00b6 Als \u201eCookies\u201c werden kleine Dateien bezeichnet, die auf Rechnern der Nutzer gespeichert werden. Innerhalb der Cookies k\u00f6nnen unterschiedliche Angaben gespeichert werden. Ein Cookie dient prim\u00e4r dazu, die Angaben zu einem Nutzer (bzw. dem Ger\u00e4t auf dem das Cookie gespeichert ist) w\u00e4hrend oder auch nach seinem Besuch innerhalb eines Onlineangebotes zu speichern. Als tempor\u00e4re Cookies, bzw. \u201eSession-Cookies\u201c oder \u201etransiente Cookies\u201c, werden Cookies bezeichnet, die gel\u00f6scht werden, nachdem ein Nutzer ein Onlineangebot verl\u00e4sst und seinen Browser schlie\u00dft. In einem solchen Cookie kann z.B. der Inhalt eines Warenkorbs in einem Onlineshop oder ein Login-Status gespeichert werden. Als \u201epermanent\u201c oder \u201epersistent\u201c werden Cookies bezeichnet, die auch nach dem Schlie\u00dfen des Browsers gespeichert bleiben. So kann z.B. der Login-Status gespeichert werden, wenn die Nutzer diese nach mehreren Tagen aufsuchen. Ebenso k\u00f6nnen in einem solchen Cookie die Interessen der Nutzer gespeichert werden, die f\u00fcr Reichweitenmessung oder Marketingzwecke verwendet werden. Als \u201eThird-Party-Cookie\u201c werden Cookies bezeichnet, die von anderen Anbietern als dem Verantwortlichen, der das Onlineangebot betreibt, angeboten werden (andernfalls, wenn es nur dessen Cookies sind spricht man von \u201eFirst-Party Cookies\u201c). Wir k\u00f6nnen tempor\u00e4re und permanente Cookies einsetzen und kl\u00e4ren hier\u00fcber im Rahmen unserer Datenschutzerkl\u00e4rung auf. Falls die Nutzer nicht m\u00f6chten, dass Cookies auf ihrem Rechner gespeichert werden, werden sie gebeten die entsprechende Option in den Systemeinstellungen ihres Browsers zu deaktivieren. Gespeicherte Cookies k\u00f6nnen in den Systemeinstellungen des Browsers gel\u00f6scht werden. Der Ausschluss von Cookies kann zu Funktionseinschr\u00e4nkungen dieses Onlineangebotes f\u00fchren. Ein genereller Widerspruch gegen den Einsatz der zu Zwecken des Onlinemarketing eingesetzten Cookies kann bei einer Vielzahl der Dienste, vor allem im Fall des Trackings, \u00fcber die US-amerikanische Seite http://www.aboutads.info/choices/ oder die EU-Seite http://www.youronlinechoices.com/ erkl\u00e4rt werden. Des Weiteren kann die Speicherung von Cookies mittels deren Abschaltung in den Einstellungen des Browsers erreicht werden. Bitte beachten Sie, dass dann gegebenenfalls nicht alle Funktionen dieses Onlineangebotes genutzt werden k\u00f6nnen. L\u00f6schung von Daten \u00b6 Die von uns verarbeiteten Daten werden nach Ma\u00dfgabe der gesetzlichen Vorgaben gel\u00f6scht oder in ihrer Verarbeitung eingeschr\u00e4nkt. Sofern nicht im Rahmen dieser Datenschutzerkl\u00e4rung ausdr\u00fccklich angegeben, werden die bei uns gespeicherten Daten gel\u00f6scht, sobald sie f\u00fcr ihre Zweckbestimmung nicht mehr erforderlich sind und der L\u00f6schung keine gesetzlichen Aufbewahrungspflichten entgegenstehen. Sofern die Daten nicht gel\u00f6scht werden, weil sie f\u00fcr andere und gesetzlich zul\u00e4ssige Zwecke erforderlich sind, wird deren Verarbeitung eingeschr\u00e4nkt. D.h. die Daten werden gesperrt und nicht f\u00fcr andere Zwecke verarbeitet. Das gilt z.B. f\u00fcr Daten, die aus handels- oder steuerrechtlichen Gr\u00fcnden aufbewahrt werden m\u00fcssen. \u00c4nderungen und Aktualisierungen der Datenschutzerkl\u00e4rung \u00b6 Wir bitten Sie sich regelm\u00e4\u00dfig \u00fcber den Inhalt unserer Datenschutzerkl\u00e4rung zu informieren. Wir passen die Datenschutzerkl\u00e4rung an, sobald die \u00c4nderungen der von uns durchgef\u00fchrten Datenverarbeitungen dies erforderlich machen. Wir informieren Sie, sobald durch die \u00c4nderungen eine Mitwirkungshandlung Ihrerseits (z.B. Einwilligung) oder eine sonstige individuelle Benachrichtigung erforderlich wird. Hosting und E-Mail-Versand \u00b6 Die von uns in Anspruch genommenen Hosting-Leistungen dienen der Zurverf\u00fcgungstellung der folgenden Leistungen: Infrastruktur- und Plattformdienstleistungen, Rechenkapazit\u00e4t, Speicherplatz und Datenbankdienste, E-Mail-Versand, Sicherheitsleistungen sowie technische Wartungsleistungen, die wir zum Zwecke des Betriebs dieses Onlineangebotes einsetzen. Hierbei verarbeiten wir, bzw. unser Hostinganbieter Bestandsdaten, Kontaktdaten, Inhaltsdaten, Vertragsdaten, Nutzungsdaten, Meta- und Kommunikationsdaten von Kunden, Interessenten und Besuchern dieses Onlineangebotes auf Grundlage unserer berechtigten Interessen an einer effizienten und sicheren Zurverf\u00fcgungstellung dieses Onlineangebotes gem. Art. 6 Abs. 1 lit. f DSGVO i.V.m. Art. 28 DSGVO (Abschluss Auftragsverarbeitungsvertrag). Erhebung von Zugriffsdaten und Logfiles \u00b6 Wir, bzw. unser Hostinganbieter, erhebt auf Grundlage unserer berechtigten Interessen im Sinne des Art. 6 Abs. 1 lit. f. DSGVO Daten \u00fcber jeden Zugriff auf den Server, auf dem sich dieser Dienst befindet (sogenannte Serverlogfiles). Zu den Zugriffsdaten geh\u00f6ren Name der abgerufenen Webseite, Datei, Datum und Uhrzeit des Abrufs, \u00fcbertragene Datenmenge, Meldung \u00fcber erfolgreichen Abruf, Browsertyp nebst Version, das Betriebssystem des Nutzers, Referrer URL (die zuvor besuchte Seite), IP-Adresse und der anfragende Provider. Logfile-Informationen werden aus Sicherheitsgr\u00fcnden (z.B. zur Aufkl\u00e4rung von Missbrauchs- oder Betrugshandlungen) f\u00fcr die Dauer von maximal 7 Tagen gespeichert und danach gel\u00f6scht. Daten, deren weitere Aufbewahrung zu Beweiszwecken erforderlich ist, sind bis zur endg\u00fcltigen Kl\u00e4rung des jeweiligen Vorfalls von der L\u00f6schung ausgenommen. Daten-Erhebung durch die Nutzung von GitHub Pages \u00b6 Diese Website wird auf Servern von Github Inc., 88 Colin P Kelly Jr St, San Francisco, CA 94107, USA gehostet. Beachten Sie daher auch die GitHub Privacy Policy und GitHub Global Privacy Practices . Github verf\u00fcgt \u00fcber eine Zertifizierung nach dem EU-US-Privacy-Shield. Der Privacy-Shield ist ein \u00dcbereinkommen zwischen der Europ\u00e4ischen Union (EU) und den USA, das die Einhaltung europ\u00e4ischer Datenschutzstandards in den USA gew\u00e4hrleisten soll. Siehe dazu die Privacy Shield Compliance Erkl\u00e4rung von Github. Einbindung von Diensten und Inhalten Dritter \u00b6 Wir setzen innerhalb unseres Onlineangebotes auf Grundlage unserer berechtigten Interessen (d.h. Interesse an der Analyse, Optimierung und wirtschaftlichem Betrieb unseres Onlineangebotes im Sinne des Art. 6 Abs. 1 lit. f. DSGVO) Inhalts- oder Serviceangebote von Drittanbietern ein, um deren Inhalte und Services, wie z.B. Videos oder Schriftarten einzubinden (nachfolgend einheitlich bezeichnet als \u201cInhalte\u201d). Dies setzt immer voraus, dass die Drittanbieter dieser Inhalte, die IP-Adresse der Nutzer wahrnehmen, da sie ohne die IP-Adresse die Inhalte nicht an deren Browser senden k\u00f6nnten. Die IP-Adresse ist damit f\u00fcr die Darstellung dieser Inhalte erforderlich. Wir bem\u00fchen uns nur solche Inhalte zu verwenden, deren jeweilige Anbieter die IP-Adresse lediglich zur Auslieferung der Inhalte verwenden. Drittanbieter k\u00f6nnen ferner so genannte Pixel-Tags (unsichtbare Grafiken, auch als \"Web Beacons\" bezeichnet) f\u00fcr statistische oder Marketingzwecke verwenden. Durch die \"Pixel-Tags\" k\u00f6nnen Informationen, wie der Besucherverkehr auf den Seiten dieser Website ausgewertet werden. Die pseudonymen Informationen k\u00f6nnen ferner in Cookies auf dem Ger\u00e4t der Nutzer gespeichert werden und unter anderem technische Informationen zum Browser und Betriebssystem, verweisende Webseiten, Besuchszeit sowie weitere Angaben zur Nutzung unseres Onlineangebotes enthalten, als auch mit solchen Informationen aus anderen Quellen verbunden werden. Vimeo \u00b6 Wir k\u00f6nnen die Videos der Plattform \u201cVimeo\u201d des Anbieters Vimeo Inc., Attention: Legal Department, 555 West 18 th Street New York, New York 10011, USA, einbinden. Datenschutzerkl\u00e4rung: https://vimeo.com/privacy . Wir weisen darauf hin, dass Vimeo Google Analytics einsetzen kann und verweisen hierzu auf die Datenschutzerkl\u00e4rung ( https://policies.google.com/privacy ) sowie Opt-Out-M\u00f6glichkeiten f\u00fcr Google-Analytics ( http://tools.google.com/dlpage/gaoptout?hl=de ) oder die Einstellungen von Google f\u00fcr die Datennutzung zu Marketingzwecken ( https://adssettings.google.com/ ). Youtube \u00b6 Wir binden die Videos der Plattform \u201cYouTube\u201d des Anbieters Google LLC, 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA, ein. Datenschutzerkl\u00e4rung: https://www.google.com/policies/privacy/ , Opt-Out: https://adssettings.google.com/authenticated . Google Fonts \u00b6 Wir binden die Schriftarten (\"Google Fonts\") des Anbieters Google LLC, 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA, ein. Datenschutzerkl\u00e4rung: https://www.google.com/policies/privacy/ , Opt-Out: https://adssettings.google.com/authenticated . Vom Websiteinhaber angepasst Erstellt mit Datenschutz-Generator.de von RA Dr. Thomas Schwenke","title":"Datenschutzerkl\u00e4rung"},{"location":"datenschutzerklaerung/#datenschutzerklarung","text":"Diese Datenschutzerkl\u00e4rung kl\u00e4rt Sie \u00fcber die Art, den Umfang und Zweck der Verarbeitung von personenbezogenen Daten (nachfolgend kurz \u201eDaten\u201c) im Rahmen der Erbringung unserer Leistungen sowie innerhalb unseres Onlineangebotes und der mit ihm verbundenen Webseiten, Funktionen und Inhalte sowie externen Onlinepr\u00e4senzen, wie z.B. unser Social Media Profile auf (nachfolgend gemeinsam bezeichnet als \u201eOnlineangebot\u201c). Im Hinblick auf die verwendeten Begrifflichkeiten, wie z.B. \u201eVerarbeitung\u201c oder \u201eVerantwortlicher\u201c verweisen wir auf die Definitionen im Art. 4 der Datenschutzgrundverordnung (DSGVO).","title":"Datenschutzerkl\u00e4rung"},{"location":"datenschutzerklaerung/#verantwortlicher","text":"Philip Henning Hallesches Ufer 28 10963 Berlin GERMANY E-Mailadresse: mail+imprint@philip-henning.com Impressum: https://docs.pphg.tech/imprint/","title":"Verantwortlicher"},{"location":"datenschutzerklaerung/#arten-der-verarbeiteten-daten","text":"- Bestandsdaten (z.B., Personen-Stammdaten, Namen oder Adressen). - Kontaktdaten (z.B., E-Mail, Telefonnummern). - Inhaltsdaten (z.B., Texteingaben, Fotografien, Videos). - Nutzungsdaten (z.B., besuchte Webseiten, Interesse an Inhalten, Zugriffszeiten). - Meta-/Kommunikationsdaten (z.B., Ger\u00e4te-Informationen, IP-Adressen).","title":"Arten der verarbeiteten Daten"},{"location":"datenschutzerklaerung/#kategorien-betroffener-personen","text":"Besucher und Nutzer des Onlineangebotes (Nachfolgend bezeichnen wir die betroffenen Personen zusammenfassend auch als \u201eNutzer\u201c).","title":"Kategorien betroffener Personen"},{"location":"datenschutzerklaerung/#zweck-der-verarbeitung","text":"- Zurverf\u00fcgungstellung des Onlineangebotes, seiner Funktionen und Inhalte. - Beantwortung von Kontaktanfragen und Kommunikation mit Nutzern. - Sicherheitsma\u00dfnahmen. - Reichweitenmessung/Marketing","title":"Zweck der Verarbeitung"},{"location":"datenschutzerklaerung/#verwendete-begrifflichkeiten","text":"\u201ePersonenbezogene Daten\u201c sind alle Informationen, die sich auf eine identifizierte oder identifizierbare nat\u00fcrliche Person (im Folgenden \u201ebetroffene Person\u201c) beziehen; als identifizierbar wird eine nat\u00fcrliche Person angesehen, die direkt oder indirekt, insbesondere mittels Zuordnung zu einer Kennung wie einem Namen, zu einer Kennnummer, zu Standortdaten, zu einer Online-Kennung (z.B. Cookie) oder zu einem oder mehreren besonderen Merkmalen identifiziert werden kann, die Ausdruck der physischen, physiologischen, genetischen, psychischen, wirtschaftlichen, kulturellen oder sozialen Identit\u00e4t dieser nat\u00fcrlichen Person sind. \u201eVerarbeitung\u201c ist jeder mit oder ohne Hilfe automatisierter Verfahren ausgef\u00fchrte Vorgang oder jede solche Vorgangsreihe im Zusammenhang mit personenbezogenen Daten. Der Begriff reicht weit und umfasst praktisch jeden Umgang mit Daten. \u201ePseudonymisierung\u201c die Verarbeitung personenbezogener Daten in einer Weise, dass die personenbezogenen Daten ohne Hinzuziehung zus\u00e4tzlicher Informationen nicht mehr einer spezifischen betroffenen Person zugeordnet werden k\u00f6nnen, sofern diese zus\u00e4tzlichen Informationen gesondert aufbewahrt werden und technischen und organisatorischen Ma\u00dfnahmen unterliegen, die gew\u00e4hrleisten, dass die personenbezogenen Daten nicht einer identifizierten oder identifizierbaren nat\u00fcrlichen Person zugewiesen werden. \u201eProfiling\u201c jede Art der automatisierten Verarbeitung personenbezogener Daten, die darin besteht, dass diese personenbezogenen Daten verwendet werden, um bestimmte pers\u00f6nliche Aspekte, die sich auf eine nat\u00fcrliche Person beziehen, zu bewerten, insbesondere um Aspekte bez\u00fcglich Arbeitsleistung, wirtschaftliche Lage, Gesundheit, pers\u00f6nliche Vorlieben, Interessen, Zuverl\u00e4ssigkeit, Verhalten, Aufenthaltsort oder Ortswechsel dieser nat\u00fcrlichen Person zu analysieren oder vorherzusagen. Als \u201eVerantwortlicher\u201c wird die nat\u00fcrliche oder juristische Person, Beh\u00f6rde, Einrichtung oder andere Stelle, die allein oder gemeinsam mit anderen \u00fcber die Zwecke und Mittel der Verarbeitung von personenbezogenen Daten entscheidet, bezeichnet. \u201eAuftragsverarbeiter\u201c eine nat\u00fcrliche oder juristische Person, Beh\u00f6rde, Einrichtung oder andere Stelle, die personenbezogene Daten im Auftrag des Verantwortlichen verarbeitet.","title":"Verwendete Begrifflichkeiten"},{"location":"datenschutzerklaerung/#magebliche-rechtsgrundlagen","text":"Nach Ma\u00dfgabe des Art. 13 DSGVO teilen wir Ihnen die Rechtsgrundlagen unserer Datenverarbeitungen mit. F\u00fcr Nutzer aus dem Geltungsbereich der Datenschutzgrundverordnung (DSGVO), d.h. der EU und des EWG gilt, sofern die Rechtsgrundlage in der Datenschutzerkl\u00e4rung nicht genannt wird, Folgendes: Die Rechtsgrundlage f\u00fcr die Einholung von Einwilligungen ist Art. 6 Abs. 1 lit. a und Art. 7 DSGVO; Die Rechtsgrundlage f\u00fcr die Verarbeitung zur Erf\u00fcllung unserer Leistungen und Durchf\u00fchrung vertraglicher Ma\u00dfnahmen sowie Beantwortung von Anfragen ist Art. 6 Abs. 1 lit. b DSGVO; Die Rechtsgrundlage f\u00fcr die Verarbeitung zur Erf\u00fcllung unserer rechtlichen Verpflichtungen ist Art. 6 Abs. 1 lit. c DSGVO; F\u00fcr den Fall, dass lebenswichtige Interessen der betroffenen Person oder einer anderen nat\u00fcrlichen Person eine Verarbeitung personenbezogener Daten erforderlich machen, dient Art. 6 Abs. 1 lit. d DSGVO als Rechtsgrundlage. Die Rechtsgrundlage f\u00fcr die erforderliche Verarbeitung zur Wahrnehmung einer Aufgabe, die im \u00f6ffentlichen Interesse liegt oder in Aus\u00fcbung \u00f6ffentlicher Gewalt erfolgt, die dem Verantwortlichen \u00fcbertragen wurde ist Art. 6 Abs. 1 lit. e DSGVO. Die Rechtsgrundlage f\u00fcr die Verarbeitung zur Wahrung unserer berechtigten Interessen ist Art. 6 Abs. 1 lit. f DSGVO. Die Verarbeitung von Daten zu anderen Zwecken als denen, zu denen sie ehoben wurden, bestimmt sich nach den Vorgaben des Art 6 Abs. 4 DSGVO. Die Verarbeitung von besonderen Kategorien von Daten (entsprechend Art. 9 Abs. 1 DSGVO) bestimmt sich nach den Vorgaben des Art. 9 Abs. 2 DSGVO.","title":"Ma\u00dfgebliche Rechtsgrundlagen"},{"location":"datenschutzerklaerung/#sicherheitsmanahmen","text":"Wir treffen nach Ma\u00dfgabe der gesetzlichen Vorgabenunter Ber\u00fccksichtigung des Stands der Technik, der Implementierungskosten und der Art, des Umfangs, der Umst\u00e4nde und der Zwecke der Verarbeitung sowie der unterschiedlichen Eintrittswahrscheinlichkeit und Schwere des Risikos f\u00fcr die Rechte und Freiheiten nat\u00fcrlicher Personen, geeignete technische und organisatorische Ma\u00dfnahmen, um ein dem Risiko angemessenes Schutzniveau zu gew\u00e4hrleisten. Zu den Ma\u00dfnahmen geh\u00f6ren insbesondere die Sicherung der Vertraulichkeit, Integrit\u00e4t und Verf\u00fcgbarkeit von Daten durch Kontrolle des physischen Zugangs zu den Daten, als auch des sie betreffenden Zugriffs, der Eingabe, Weitergabe, der Sicherung der Verf\u00fcgbarkeit und ihrer Trennung. Des Weiteren haben wir Verfahren eingerichtet, die eine Wahrnehmung von Betroffenenrechten, L\u00f6schung von Daten und Reaktion auf Gef\u00e4hrdung der Daten gew\u00e4hrleisten. Ferner ber\u00fccksichtigen wir den Schutz personenbezogener Daten bereits bei der Entwicklung, bzw. Auswahl von Hardware, Software sowie Verfahren, entsprechend dem Prinzip des Datenschutzes durch Technikgestaltung und durch datenschutzfreundliche Voreinstellungen.","title":"Sicherheitsma\u00dfnahmen"},{"location":"datenschutzerklaerung/#zusammenarbeit-mit-auftragsverarbeitern-gemeinsam-verantwortlichen-und-dritten","text":"Sofern wir im Rahmen unserer Verarbeitung Daten gegen\u00fcber anderen Personen und Unternehmen (Auftragsverarbeitern, gemeinsam Verantwortlichen oder Dritten) offenbaren, sie an diese \u00fcbermitteln oder ihnen sonst Zugriff auf die Daten gew\u00e4hren, erfolgt dies nur auf Grundlage einer gesetzlichen Erlaubnis (z.B. wenn eine \u00dcbermittlung der Daten an Dritte, wie an Zahlungsdienstleister, zur Vertragserf\u00fcllung erforderlich ist), Nutzer eingewilligt haben, eine rechtliche Verpflichtung dies vorsieht oder auf Grundlage unserer berechtigten Interessen (z.B. beim Einsatz von Beauftragten, Webhostern, etc.). Sofern wir Daten anderen Unternehmen unserer Unternehmensgruppe offenbaren, \u00fcbermitteln oder ihnen sonst den Zugriff gew\u00e4hren, erfolgt dies insbesondere zu administrativen Zwecken als berechtigtes Interesse und dar\u00fcberhinausgehend auf einer den gesetzlichen Vorgaben entsprechenden Grundlage.","title":"Zusammenarbeit mit Auftragsverarbeitern, gemeinsam Verantwortlichen und Dritten"},{"location":"datenschutzerklaerung/#ubermittlungen-in-drittlander","text":"Sofern wir Daten in einem Drittland (d.h. au\u00dferhalb der Europ\u00e4ischen Union (EU), des Europ\u00e4ischen Wirtschaftsraums (EWR) oder der Schweizer Eidgenossenschaft) verarbeiten oder dies im Rahmen der Inanspruchnahme von Diensten Dritter oder Offenlegung, bzw. \u00dcbermittlung von Daten an andere Personen oder Unternehmen geschieht, erfolgt dies nur, wenn es zur Erf\u00fcllung unserer (vor)vertraglichen Pflichten, auf Grundlage Ihrer Einwilligung, aufgrund einer rechtlichen Verpflichtung oder auf Grundlage unserer berechtigten Interessen geschieht. Vorbehaltlich gesetzlicher oder vertraglicher Erlaubnisse, verarbeiten oder lassen wir die Daten in einem Drittland nur beim Vorliegen der gesetzlichen Voraussetzungen. D.h. die Verarbeitung erfolgt z.B. auf Grundlage besonderer Garantien, wie der offiziell anerkannten Feststellung eines der EU entsprechenden Datenschutzniveaus (z.B. f\u00fcr die USA durch das \u201ePrivacy Shield\u201c) oder Beachtung offiziell anerkannter spezieller vertraglicher Verpflichtungen.","title":"\u00dcbermittlungen in Drittl\u00e4nder"},{"location":"datenschutzerklaerung/#rechte-der-betroffenen-personen","text":"Sie haben das Recht, eine Best\u00e4tigung dar\u00fcber zu verlangen, ob betreffende Daten verarbeitet werden und auf Auskunft \u00fcber diese Daten sowie auf weitere Informationen und Kopie der Daten entsprechend den gesetzlichen Vorgaben. Sie haben entsprechend. den gesetzlichen Vorgaben das Recht, die Vervollst\u00e4ndigung der Sie betreffenden Daten oder die Berichtigung der Sie betreffenden unrichtigen Daten zu verlangen. Sie haben nach Ma\u00dfgabe der gesetzlichen Vorgaben das Recht zu verlangen, dass betreffende Daten unverz\u00fcglich gel\u00f6scht werden, bzw. alternativ nach Ma\u00dfgabe der gesetzlichen Vorgaben eine Einschr\u00e4nkung der Verarbeitung der Daten zu verlangen. Sie haben das Recht zu verlangen, dass die Sie betreffenden Daten, die Sie uns bereitgestellt haben nach Ma\u00dfgabe der gesetzlichen Vorgaben zu erhalten und deren \u00dcbermittlung an andere Verantwortliche zu fordern. Sie haben ferner nach Ma\u00dfgabe der gesetzlichen Vorgaben das Recht, eine Beschwerde bei der zust\u00e4ndigen Aufsichtsbeh\u00f6rde einzureichen.","title":"Rechte der betroffenen Personen"},{"location":"datenschutzerklaerung/#widerrufsrecht","text":"Sie haben das Recht, erteilte Einwilligungen mit Wirkung f\u00fcr die Zukunft zu widerrufen.","title":"Widerrufsrecht"},{"location":"datenschutzerklaerung/#widerspruchsrecht","text":"Sie k\u00f6nnen der k\u00fcnftigen Verarbeitung der Sie betreffenden Daten nach Ma\u00dfgabe der gesetzlichen Vorgaben jederzeit widersprechen. Der Widerspruch kann insbesondere gegen die Verarbeitung f\u00fcr Zwecke der Direktwerbung erfolgen.","title":"Widerspruchsrecht"},{"location":"datenschutzerklaerung/#cookies-und-widerspruchsrecht-bei-direktwerbung","text":"Als \u201eCookies\u201c werden kleine Dateien bezeichnet, die auf Rechnern der Nutzer gespeichert werden. Innerhalb der Cookies k\u00f6nnen unterschiedliche Angaben gespeichert werden. Ein Cookie dient prim\u00e4r dazu, die Angaben zu einem Nutzer (bzw. dem Ger\u00e4t auf dem das Cookie gespeichert ist) w\u00e4hrend oder auch nach seinem Besuch innerhalb eines Onlineangebotes zu speichern. Als tempor\u00e4re Cookies, bzw. \u201eSession-Cookies\u201c oder \u201etransiente Cookies\u201c, werden Cookies bezeichnet, die gel\u00f6scht werden, nachdem ein Nutzer ein Onlineangebot verl\u00e4sst und seinen Browser schlie\u00dft. In einem solchen Cookie kann z.B. der Inhalt eines Warenkorbs in einem Onlineshop oder ein Login-Status gespeichert werden. Als \u201epermanent\u201c oder \u201epersistent\u201c werden Cookies bezeichnet, die auch nach dem Schlie\u00dfen des Browsers gespeichert bleiben. So kann z.B. der Login-Status gespeichert werden, wenn die Nutzer diese nach mehreren Tagen aufsuchen. Ebenso k\u00f6nnen in einem solchen Cookie die Interessen der Nutzer gespeichert werden, die f\u00fcr Reichweitenmessung oder Marketingzwecke verwendet werden. Als \u201eThird-Party-Cookie\u201c werden Cookies bezeichnet, die von anderen Anbietern als dem Verantwortlichen, der das Onlineangebot betreibt, angeboten werden (andernfalls, wenn es nur dessen Cookies sind spricht man von \u201eFirst-Party Cookies\u201c). Wir k\u00f6nnen tempor\u00e4re und permanente Cookies einsetzen und kl\u00e4ren hier\u00fcber im Rahmen unserer Datenschutzerkl\u00e4rung auf. Falls die Nutzer nicht m\u00f6chten, dass Cookies auf ihrem Rechner gespeichert werden, werden sie gebeten die entsprechende Option in den Systemeinstellungen ihres Browsers zu deaktivieren. Gespeicherte Cookies k\u00f6nnen in den Systemeinstellungen des Browsers gel\u00f6scht werden. Der Ausschluss von Cookies kann zu Funktionseinschr\u00e4nkungen dieses Onlineangebotes f\u00fchren. Ein genereller Widerspruch gegen den Einsatz der zu Zwecken des Onlinemarketing eingesetzten Cookies kann bei einer Vielzahl der Dienste, vor allem im Fall des Trackings, \u00fcber die US-amerikanische Seite http://www.aboutads.info/choices/ oder die EU-Seite http://www.youronlinechoices.com/ erkl\u00e4rt werden. Des Weiteren kann die Speicherung von Cookies mittels deren Abschaltung in den Einstellungen des Browsers erreicht werden. Bitte beachten Sie, dass dann gegebenenfalls nicht alle Funktionen dieses Onlineangebotes genutzt werden k\u00f6nnen.","title":"Cookies und Widerspruchsrecht bei Direktwerbung"},{"location":"datenschutzerklaerung/#loschung-von-daten","text":"Die von uns verarbeiteten Daten werden nach Ma\u00dfgabe der gesetzlichen Vorgaben gel\u00f6scht oder in ihrer Verarbeitung eingeschr\u00e4nkt. Sofern nicht im Rahmen dieser Datenschutzerkl\u00e4rung ausdr\u00fccklich angegeben, werden die bei uns gespeicherten Daten gel\u00f6scht, sobald sie f\u00fcr ihre Zweckbestimmung nicht mehr erforderlich sind und der L\u00f6schung keine gesetzlichen Aufbewahrungspflichten entgegenstehen. Sofern die Daten nicht gel\u00f6scht werden, weil sie f\u00fcr andere und gesetzlich zul\u00e4ssige Zwecke erforderlich sind, wird deren Verarbeitung eingeschr\u00e4nkt. D.h. die Daten werden gesperrt und nicht f\u00fcr andere Zwecke verarbeitet. Das gilt z.B. f\u00fcr Daten, die aus handels- oder steuerrechtlichen Gr\u00fcnden aufbewahrt werden m\u00fcssen.","title":"L\u00f6schung von Daten"},{"location":"datenschutzerklaerung/#anderungen-und-aktualisierungen-der-datenschutzerklarung","text":"Wir bitten Sie sich regelm\u00e4\u00dfig \u00fcber den Inhalt unserer Datenschutzerkl\u00e4rung zu informieren. Wir passen die Datenschutzerkl\u00e4rung an, sobald die \u00c4nderungen der von uns durchgef\u00fchrten Datenverarbeitungen dies erforderlich machen. Wir informieren Sie, sobald durch die \u00c4nderungen eine Mitwirkungshandlung Ihrerseits (z.B. Einwilligung) oder eine sonstige individuelle Benachrichtigung erforderlich wird.","title":"\u00c4nderungen und Aktualisierungen der Datenschutzerkl\u00e4rung"},{"location":"datenschutzerklaerung/#hosting-und-e-mail-versand","text":"Die von uns in Anspruch genommenen Hosting-Leistungen dienen der Zurverf\u00fcgungstellung der folgenden Leistungen: Infrastruktur- und Plattformdienstleistungen, Rechenkapazit\u00e4t, Speicherplatz und Datenbankdienste, E-Mail-Versand, Sicherheitsleistungen sowie technische Wartungsleistungen, die wir zum Zwecke des Betriebs dieses Onlineangebotes einsetzen. Hierbei verarbeiten wir, bzw. unser Hostinganbieter Bestandsdaten, Kontaktdaten, Inhaltsdaten, Vertragsdaten, Nutzungsdaten, Meta- und Kommunikationsdaten von Kunden, Interessenten und Besuchern dieses Onlineangebotes auf Grundlage unserer berechtigten Interessen an einer effizienten und sicheren Zurverf\u00fcgungstellung dieses Onlineangebotes gem. Art. 6 Abs. 1 lit. f DSGVO i.V.m. Art. 28 DSGVO (Abschluss Auftragsverarbeitungsvertrag).","title":"Hosting und E-Mail-Versand"},{"location":"datenschutzerklaerung/#erhebung-von-zugriffsdaten-und-logfiles","text":"Wir, bzw. unser Hostinganbieter, erhebt auf Grundlage unserer berechtigten Interessen im Sinne des Art. 6 Abs. 1 lit. f. DSGVO Daten \u00fcber jeden Zugriff auf den Server, auf dem sich dieser Dienst befindet (sogenannte Serverlogfiles). Zu den Zugriffsdaten geh\u00f6ren Name der abgerufenen Webseite, Datei, Datum und Uhrzeit des Abrufs, \u00fcbertragene Datenmenge, Meldung \u00fcber erfolgreichen Abruf, Browsertyp nebst Version, das Betriebssystem des Nutzers, Referrer URL (die zuvor besuchte Seite), IP-Adresse und der anfragende Provider. Logfile-Informationen werden aus Sicherheitsgr\u00fcnden (z.B. zur Aufkl\u00e4rung von Missbrauchs- oder Betrugshandlungen) f\u00fcr die Dauer von maximal 7 Tagen gespeichert und danach gel\u00f6scht. Daten, deren weitere Aufbewahrung zu Beweiszwecken erforderlich ist, sind bis zur endg\u00fcltigen Kl\u00e4rung des jeweiligen Vorfalls von der L\u00f6schung ausgenommen.","title":"Erhebung von Zugriffsdaten und Logfiles"},{"location":"datenschutzerklaerung/#daten-erhebung-durch-die-nutzung-von-github-pages","text":"Diese Website wird auf Servern von Github Inc., 88 Colin P Kelly Jr St, San Francisco, CA 94107, USA gehostet. Beachten Sie daher auch die GitHub Privacy Policy und GitHub Global Privacy Practices . Github verf\u00fcgt \u00fcber eine Zertifizierung nach dem EU-US-Privacy-Shield. Der Privacy-Shield ist ein \u00dcbereinkommen zwischen der Europ\u00e4ischen Union (EU) und den USA, das die Einhaltung europ\u00e4ischer Datenschutzstandards in den USA gew\u00e4hrleisten soll. Siehe dazu die Privacy Shield Compliance Erkl\u00e4rung von Github.","title":"Daten-Erhebung durch die Nutzung von GitHub Pages"},{"location":"datenschutzerklaerung/#einbindung-von-diensten-und-inhalten-dritter","text":"Wir setzen innerhalb unseres Onlineangebotes auf Grundlage unserer berechtigten Interessen (d.h. Interesse an der Analyse, Optimierung und wirtschaftlichem Betrieb unseres Onlineangebotes im Sinne des Art. 6 Abs. 1 lit. f. DSGVO) Inhalts- oder Serviceangebote von Drittanbietern ein, um deren Inhalte und Services, wie z.B. Videos oder Schriftarten einzubinden (nachfolgend einheitlich bezeichnet als \u201cInhalte\u201d). Dies setzt immer voraus, dass die Drittanbieter dieser Inhalte, die IP-Adresse der Nutzer wahrnehmen, da sie ohne die IP-Adresse die Inhalte nicht an deren Browser senden k\u00f6nnten. Die IP-Adresse ist damit f\u00fcr die Darstellung dieser Inhalte erforderlich. Wir bem\u00fchen uns nur solche Inhalte zu verwenden, deren jeweilige Anbieter die IP-Adresse lediglich zur Auslieferung der Inhalte verwenden. Drittanbieter k\u00f6nnen ferner so genannte Pixel-Tags (unsichtbare Grafiken, auch als \"Web Beacons\" bezeichnet) f\u00fcr statistische oder Marketingzwecke verwenden. Durch die \"Pixel-Tags\" k\u00f6nnen Informationen, wie der Besucherverkehr auf den Seiten dieser Website ausgewertet werden. Die pseudonymen Informationen k\u00f6nnen ferner in Cookies auf dem Ger\u00e4t der Nutzer gespeichert werden und unter anderem technische Informationen zum Browser und Betriebssystem, verweisende Webseiten, Besuchszeit sowie weitere Angaben zur Nutzung unseres Onlineangebotes enthalten, als auch mit solchen Informationen aus anderen Quellen verbunden werden.","title":"Einbindung von Diensten und Inhalten Dritter"},{"location":"datenschutzerklaerung/#vimeo","text":"Wir k\u00f6nnen die Videos der Plattform \u201cVimeo\u201d des Anbieters Vimeo Inc., Attention: Legal Department, 555 West 18 th Street New York, New York 10011, USA, einbinden. Datenschutzerkl\u00e4rung: https://vimeo.com/privacy . Wir weisen darauf hin, dass Vimeo Google Analytics einsetzen kann und verweisen hierzu auf die Datenschutzerkl\u00e4rung ( https://policies.google.com/privacy ) sowie Opt-Out-M\u00f6glichkeiten f\u00fcr Google-Analytics ( http://tools.google.com/dlpage/gaoptout?hl=de ) oder die Einstellungen von Google f\u00fcr die Datennutzung zu Marketingzwecken ( https://adssettings.google.com/ ).","title":"Vimeo"},{"location":"datenschutzerklaerung/#youtube","text":"Wir binden die Videos der Plattform \u201cYouTube\u201d des Anbieters Google LLC, 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA, ein. Datenschutzerkl\u00e4rung: https://www.google.com/policies/privacy/ , Opt-Out: https://adssettings.google.com/authenticated .","title":"Youtube"},{"location":"datenschutzerklaerung/#google-fonts","text":"Wir binden die Schriftarten (\"Google Fonts\") des Anbieters Google LLC, 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA, ein. Datenschutzerkl\u00e4rung: https://www.google.com/policies/privacy/ , Opt-Out: https://adssettings.google.com/authenticated . Vom Websiteinhaber angepasst Erstellt mit Datenschutz-Generator.de von RA Dr. Thomas Schwenke","title":"Google Fonts"},{"location":"imprint/","text":"Impressum \u00b6 Angaben gem\u00e4\u00df \u00a7 5 TMG \u00b6 Philip Henning Hallesches Ufer 28 10963 Berlin GERMANY Kontakt \u00b6 Telefon: +49 (0) 172 724 1337 Telefax: +49 (0) 3222 9349378 E-Mail: mail+imprint@philip-henning.com Verantwortlich f\u00fcr den Inhalt nach \u00a7 55 Abs. 2 RStV \u00b6 Philip Henning Hallesches Ufer 28 10963 Berlin GERMANY Haftung f\u00fcr Inhalte \u00b6 Als Diensteanbieter sind wir gem\u00e4\u00df \u00a7 7 Abs.1 TMG f\u00fcr eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach \u00a7\u00a7 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, \u00fcbermittelte oder gespeicherte fremde Informationen zu \u00fcberwachen oder nach Umst\u00e4nden zu forschen, die auf eine rechtswidrige T\u00e4tigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unber\u00fchrt. Eine diesbez\u00fcgliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung m\u00f6glich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen. Haftung f\u00fcr Links \u00b6 Unser Angebot enth\u00e4lt Links zu externen Websites Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb k\u00f6nnen wir f\u00fcr diese fremden Inhalte auch keine Gew\u00e4hr \u00fcbernehmen. F\u00fcr die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf m\u00f6gliche Rechtsverst\u00f6\u00dfe \u00fcberpr\u00fcft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen. Urheberrecht \u00b6 Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielf\u00e4ltigung, Bearbeitung, Verbreitung und jede Art der Verwertung au\u00dferhalb der Grenzen des Urheberrechtes bed\u00fcrfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur f\u00fcr den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen. Quelle: e-recht24.de","title":"Impressum"},{"location":"imprint/#impressum","text":"","title":"Impressum"},{"location":"imprint/#angaben-gema-5-tmg","text":"Philip Henning Hallesches Ufer 28 10963 Berlin GERMANY","title":"Angaben gem\u00e4\u00df \u00a7 5 TMG"},{"location":"imprint/#kontakt","text":"Telefon: +49 (0) 172 724 1337 Telefax: +49 (0) 3222 9349378 E-Mail: mail+imprint@philip-henning.com","title":"Kontakt"},{"location":"imprint/#verantwortlich-fur-den-inhalt-nach-55-abs-2-rstv","text":"Philip Henning Hallesches Ufer 28 10963 Berlin GERMANY","title":"Verantwortlich f\u00fcr den Inhalt nach \u00a7 55 Abs. 2 RStV"},{"location":"imprint/#haftung-fur-inhalte","text":"Als Diensteanbieter sind wir gem\u00e4\u00df \u00a7 7 Abs.1 TMG f\u00fcr eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach \u00a7\u00a7 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, \u00fcbermittelte oder gespeicherte fremde Informationen zu \u00fcberwachen oder nach Umst\u00e4nden zu forschen, die auf eine rechtswidrige T\u00e4tigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unber\u00fchrt. Eine diesbez\u00fcgliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung m\u00f6glich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.","title":"Haftung f\u00fcr Inhalte"},{"location":"imprint/#haftung-fur-links","text":"Unser Angebot enth\u00e4lt Links zu externen Websites Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb k\u00f6nnen wir f\u00fcr diese fremden Inhalte auch keine Gew\u00e4hr \u00fcbernehmen. F\u00fcr die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf m\u00f6gliche Rechtsverst\u00f6\u00dfe \u00fcberpr\u00fcft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.","title":"Haftung f\u00fcr Links"},{"location":"imprint/#urheberrecht","text":"Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielf\u00e4ltigung, Bearbeitung, Verbreitung und jede Art der Verwertung au\u00dferhalb der Grenzen des Urheberrechtes bed\u00fcrfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur f\u00fcr den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen. Quelle: e-recht24.de","title":"Urheberrecht"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2017 Philip Henning Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2017 Philip Henning Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/","text":"Arch Linux Dell XPS 15 (9560) \u00b6 Pre-installation \u00b6 UEFI \u00b6 Before installing it is necessary to modify some UEFI Settings. They can be accessed by pressing the F2 key repeatedly when booting. Change the SATA Mode from the default \"RAID\" to \"AHCI\". This will allow Linux to detect the NVME SSD. If dual booting with an existing Windows installation, Windows will not boot after the change but this can be fixed without a reinstallation. Change Fastboot to \"Thorough\" in \"POST Behaviour\". This prevents intermittent boot failures. Disable secure boot to allow Linux to boot. Installation of Arch Linux can proceed normally. Refer to the Installation guide for more information. Change Keyboard layout \u00b6 If you don't have an EN:Intl. Keyboard layout you should change it to your layout. In my case it is de-latin1-nodeadkeys1 . 1 loadkeys de-latin1-nodeadkeys1 Connect to a wireless network during installation (temporary) \u00b6 Change to TTY2 with ALT + F2 and use the following example to connect to your network. 1 wpa_supplicant -D nl80211,ext -i wlp2s0 -c < ( wpa_passphrase 'YourWififNetwork' 'YourWifiPassword' ) Afterwards you establish the connection change back to TTY1 with ALT + F1 . Run dhclient to reciev an ip via dhcp: 1 dhclient wlp2s0 Update the system clock \u00b6 Use timedatectl(1) to ensure the system clock is accurate: 1 2 # timedatectl set-ntp true # systemctl start systemd-timesyncd To check the service status, use timedatectl status. Installation \u00b6 Preparing Disks \u00b6 I'll encrypt my Data so my Partition layout looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 +----------------+----------------+----------------+-----------------------------------------------------------------------------------------------+ | | | | | | | | | | | | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | | | | | /dev/mapper/swap | /dev/mapper/tmp | /dev/mapper/root | /dev/mapper/home | | | | |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | | | | | | | | | | | | 16 GiB | 30 GiB | 50 GiB | 100%FREE | | | | | Logical volume1 | Logical volume2 | Logical volume3 | Logical volume4 | | | | | /dev/mapper/osvg-swap | /dev/mapper/osvg-tmp | /dev/mapper/osvg-root | /dev/mapper/osvg-home | | | | EF02 |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | EF00 | 8300 | 8 MiB | | | 550 MiB | 500 MiB | BIOS | 8E00 | | EFI partition | boot partition | Boot partition | 100%FREE | | /dev/nvme0n1p1 | /dev/nvme0n1p2 | /dev/nvme0n1p3 | /dev/nvme0n1p4 | +----------------+----------------+----------------+-----------------------------------------------------------------------------------------------+ Create these partitions with gdisk so that you have GPT instead of MBR . Wipe Data on all partitions \u00b6 1 2 3 4 # dd if=/dev/zero of=/dev/nvme0n1p1 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p2 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p3 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p4 bs=1M status=progress Preparing the logical volumes \u00b6 1 2 3 4 5 6 # pvcreate /dev/nvme0n1p4 # vgcreate osvg /dev/nvme0n1p4 # lvcreate -L 16G -n swap osvg # lvcreate -L 30G -n tmp osvg # lvcreate -L 50G -n root osvg # lvcreate -l 100%FREE -n home osvg Setup LUKS for our partitions \u00b6 Create an encrypted root with a key you can remember. 1 # cryptsetup luksFormat /dev/mapper/osvg-root Open the root filesystem to create an encryption key for all other partitions. 1 2 3 4 5 6 # cryptsetup luksOpen /dev/mapper/osvg-root root # mkfs.ext4 /dev/mapper/root # mnt /dev/mapper/root /mnt # mkdir -pm 700 /mnt/etc/luks-keys # dd if=/dev/random of=/mnt/etc/luks-keys/home bs=1 count=1024 status=progress # chmod 000 /mnt/etc/luks-keys/home Use the encrypted key to create our encrypted home and add a pass phrase for emergency access: 1 2 # cryptsetup luksFormat /dev/mapper/osvg-home # cryptsetup luksAddKey /dev/mapper/osvg-home --key-file=/mnt/etc/luks-keys/home Now we open home, make a filesystem and mount it to /mnt/home . 1 2 3 4 # cryptsetup luksOpen --key-file=/mnt/etc/luks-keys/home /dev/mapper/osvg-home home # mkfs.ext4 /dev/mapper/home # mkdir -p /mnt/home # mount /dev/mapper/home /mnt/home and rebuild the EFI and boot partition: 1 2 # mkfs.vfat /dev/nvme0n1p1 # mkfs.ext4 /dev/nvme0n1p2 Setup and mount the boot/EFI partition: 1 2 3 4 5 # mkdir /mnt/boot # mount /dev/nvme0n1p2 /mnt/boot # mkdir /mnt/boot/EFI # mkdir /mnt/esp # mount /dev/nvme0n1p1 /mnt/esp Install Arch \u00b6 Sort mirrors by speed \u00b6 The pacman package provides a Bash script, /usr/bin/rankmirrors , which can be used to rank the mirrors according to their connection and opening speeds to take advantage of using the fastest local mirror. Back up the existing /etc/pacman.d/mirrorlist : 1 # cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak Edit /etc/pacman.d/mirrorlist.bak and uncomment mirrors for testing with rankmirrors . Run the following sed line to uncomment every mirror: 1 # sed -i 's/^Server/#Server/' /etc/pacman.d/mirrorlist.bak Finally, rank the mirrors. Operand -n 6 means only output the 6 fastest mirrors: 1 # rankmirrors -n 6 /etc/pacman.d/mirrorlist.bak > /etc/pacman.d/mirrorlist Install the base packages \u00b6 Use the pacstrap script to install the base package group: 1 # pacstrap /mnt base This group does not include all tools from the live installation, such as btrfs-progs or specific wireless firmware; see packages.both for comparison. To install packages and other groups such as base-devel , append the names to pacstrap (space separated) or to individual pacman commands after the #Chroot step. Configure the system \u00b6 Gen fstab \u00b6 Generate an fstab file (use -U or -L to define by UUID or labels, respectively): 1 # genfstab -U /mnt >> /mnt/etc/fstab Check the resulting file in /mnt/etc/fstab afterwards, and edit it in case of errors. Add the following at the end of the /mnt/etc/fstab configuration. 1 2 3 /dev/mapper/tmp /tmp tmpfs defaults 0 0 /dev/mapper/swap none swap sw 0 0 /esp/EFI /boot/EFI none defaults,bind 0 0 Modify /mnt/etc/crypttab \u00b6 Add these at the end to the /mnt/etc/crypttab . 1 2 3 swap /dev/mapper/MyVol-swap /dev/urandom swap,cipher=aes-xts-plain64,size=256 tmp /dev/mapper/MyVol-tmp /dev/urandom tmp,cipher=aes-xts-plain64,size=256 home /dev/mapper/MyVol-home /etc/luks-keys/home Chroot \u00b6 Change root into the new system: 1 # arch-chroot /mnt Uncomment pacman multilib option \u00b6 In /etc/pacman.conf uncomment the following lines. 1 2 3 4 [...] [multilib] Include = /etc/pacman.d/mirrorlist [...] Install Packages \u00b6 1 2 pacman -Sy pacman -S base-devel grub efibootmgr dialog networkmanager network-manager-applet wireless_tools intel-ucode zsh w3m vim powertop bc Create my User \u00b6 1 2 3 useradd -m -G wheel,audio,video,users,uucp,disk,optical,storage,rfkill -s /bin/zsh phg passwd phg Disable root login \u00b6 1 # passwd -l root Allow group wheel so user sudo \u00b6 Uncomment %wheel ALL=(ALL) ALL . Use visudo to edit the /etc/sudoers file. Keep http_proxy variables \u00b6 Add the following at the end of the 'Defaults' section. 1 2 Defaults env_keep += \"http_proxy\" Defaults env_keep += \"https_proxy\" Install yaourt \u00b6 Zuerst muss das Paket package-query installiert werden, denn yaourt beruht darauf: 1 2 3 4 # curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/package-query.tar.gz # tar -xvzf package-query.tar.gz # cd package-query # sudo -u phg makepkg -si Danach wechselt man wieder ins n\u00e4chst h\u00f6here Verzeichnis und installiert yaourt: 1 2 3 4 5 # cd .. # curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/yaourt.tar.gz # tar -xvzf yaourt.tar.gz # cd yaourt # sudo -u phg makepkg -si Time zone \u00b6 Set the time zone: 1 # ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime Run hwclock(8) to generate /etc/adjtime: 1 # hwclock --systohc This command assumes the hardware clock is set to UTC. See Time#Time standard for details. Enable timedated service: 1 # systemctl enable sysdemd-timesyncd Locale \u00b6 Uncomment the following localizations in /etc/locale.gen : 1 2 3 4 5 6 7 [...] de_DE.UTF-8 UTF-8 de_DE ISO-8859-1 [...] en_US.UTF-8 UTF-8 en_US ISO-8859-1 [...] and generate them with: 1 # locale-gen Set the LANG variable in locale.conf(5) accordingly, for example: /etc/locale.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_TIME=de_DE.UTF-8 LC_CTYPE=en_US.UTF-8 LC_COLLATE=C LC_MONETARY=de_DE.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=de_DE.UTF-8 LC_NAME=de_DE.UTF-8 LC_ADDRESS=de_DE.UTF-8 LC_TELEPHONE=de_DE.UTF-8 LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=de_DE.UTF-8 Setup console \u00b6 Install console powerline font \u00b6 Install the console powerline fonts. 1 # yaourt -S powerline-console-fonts ttf-ms-fonts Edit the /etc/vconsole.conf file and add the following to the TOP of the file: 1 2 FONT=ter-powerline-v14n [...] Set keymap \u00b6 If you set the keyboard layout, make the changes persistent in vconsole.conf(5) : /etc/vconsole.conf 1 2 [ ... ] KEYMAP = de-latin1-nodeadkeys Hostname \u00b6 Create the hostname(5) file: /etc/hostname 1 yoetunheimr Consider adding a matching entry to hosts(5) : 1 2 3 4 5 /etc/hosts 127.0.0.1 localhost.localdomain localhost ::1 localhost.localdomain localhost 127.0.1.1 yoetunheimr.sao.local yoetunheimr See also Network configuration#Set the hostname . Edit mkinitpico \u00b6 Add the keyboard , keymap , lvm2 and encrypt hooks to mkinitcpio.conf : /etc/mkinitcpio.conf : 1 HOOKS =( ... keyboard keymap block lvm2 encrypt ... filesystems ... ) Generate initramfs \u00b6 1 # mkinitcpio -p linux Install GRUB \u00b6 1 # grub-install --target=x86_64-efi --efi-directory=/esp --bootloader-id=grub 1 # mount --bind /esp/EFI /boot/EFI Configuring the boot loader \u00b6 In order to unlock the encrypted root partition at boot, the following kernel parameters need to be set by the boot loader ( /etc/default/grub ): 1 2 GRUB_CMDLINE_LINUX_DEFAULT=\"quiet acpi_rev_override=1 pci=nommconf\" GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root\" ??? Note 'Command explanation' * acpi_rev_override=1 is needed to get the NVIDIA graphics card working resp. to disable it. * The kernel option pci=nommconf disables Memory-Mapped PCI Configuration Space, which is available in Linux since kernel 2.6. Very roughly, all PCI devices have an area that describe this device (which you see with lspci -vv), and the originally method to access this area involves going through I/O ports, while PCIe allows this space to be mapped to memory for simpler access. * cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root configures the crypt device. Generate GRUB config \u00b6 1 # grub-mkconfig -o /boot/grub/grub.cfg See Dm-crypt/System configuration#Boot loader for details. Reboot into the installed system \u00b6 Leave the chroot environment. 1 exit Unmount all partitions and reboot. 1 2 # umount -R /mnt # reboot Post installation configuration \u00b6 Get graphicscard and X working \u00b6 ACPI Override \u00b6 Add these to the kernel parameter in the /etc/default/grub configuration. 1 GRUB_CMDLINE_LINUX_DEFAULT=\"[...] acpi_rev_override=1\" Now rebuild the GRUB configuration. 1 # grub-mkconfig -o /boot/grub/grub.cfg Install graphic card tools \u00b6 1 # pacman -S bbswitch bumblebee primus lib32-primus Use libglvnd as libgl provider. Enable the bumblebee service. 1 # systemctl enable bumblebeed.service Afterwards reboot the system. Tip You may need to reboot twice for the firmware to notice acpi_rev_override . Graphics card drivers/utils \u00b6 1 2 # yaourt -Sy # yaourt -S nvidia-beta nvidia-utils-beta lib32-nvidia-utils-beta Install X \u00b6 1 # pacman -S xorg xorg-xinit xf86-input-synaptics Install login manager \u00b6 1 2 3 # pacman -S lightdm # yaourt -S lightdm-webkit-theme-litarvan # systemctl enable lightdm Enable Webkit2 greeter \u00b6 Create the lightdm.conf.d folder: 1 # mkdir /etc/lightdm/lightdm.conf.d/ Set the default greeter by adding the following LightDM configuration file, like so: /etc/lightdm/lightdm.conf.d/50-lightdm-webkit2-greeter.conf 1 2 [Seat:*] greeter-session=lightdm-webkit2-greeter LightDM Webkit2 theme 'litarvan' \u00b6 Edit the file /etc/lightdm/lightdm-webkit2-greeter.conf and set the \" webkit-theme \" property to \" litarvan \", like so: 1 2 3 [...] webkit_theme = litarvan [...] BSPWM Session \u00b6 Change X keyboard layout to german \u00b6 /etc/X11/xorg.conf.d/00-keyboard.conf 1 2 3 4 5 6 Section \"InputClass\" Identifier \"keyboard\" MatchIsKeyboard \"yes\" Option \"XkbLayout\" \"de\" Option \"XkbVariant\" \"nodeadkeys\" EndSection Add Touchpad options \u00b6 /etc/X11/xorg.conf.d/50-synaptics.conf : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 Section \"InputClass\" Identifier \"touchpad catchall\" Driver \"synaptics\" MatchIsTouchpad \"on\" # enable clik zone and configure 3 buttons on bottom Option \"ClickPad\" \"1\" Option \"SoftButtonAreas\" \"60% 0 82% 0 40% 60% 82% 0\" # other commons options than you may want to configure # scroll with two fingers (enabled vertically, disabled horizontally) Option \"VertTwoFingerScroll\" \"1\" Option \"HorizTwoFingerScroll\" \"0\" # enable natural scrolling Option \"VertScrollDelta\" \"-111\" Option \"HorizScrollDelta\" \"-111\" # enable tap as click: 1 finger -> left button, 2 fingers -> right, 3 fingers -> middle Option \"TapButton1\" \"1\" Option \"TapButton2\" \"3\" Option \"TapButton3\" \"2\" # idem but for click with 1,2,3 fingers. Use \"0\" to disable. Option \"ClickFinger1\" \"1\" Option \"ClickFinger2\" \"3\" Option \"ClickFinger3\" \"2\" # palm detection. These parameters somehow works, YMMV. Option \"PalmDetect\" \"1\" Option \"PalmMinWidth\" \"10\" Option \"PalmMinZ\" \"200\" EndSection Install xorg-xbacklight replacement \u00b6 Note xorg-xbacklight does not work with the modesetting driver! 1 # yaourt -S acpilight Add the following file /etc/udev/rules.d/90-backlight.rules : 1 2 3 SUBSYSTEM==\"backlight\", ACTION==\"add\", \\ RUN+=\"/bin/chgrp video %S%p/brightness\", \\ RUN+=\"/bin/chmod g+w %S%p/brightness\" Window manager \u00b6 Install bspwm, sxhkd, feh and fonts + dependencies. 1 2 # pacman -S bspwm sxhkd feh i3lock # yaourt -S polybar Get my dot files \u00b6 Clone my dotfiles. 1 2 3 4 5 6 7 8 # pacman -Sy # pacman -S git python-pip # cd ~ # git clone git@github.com:shokinn/.files.git ~/.files # cd .files # sudo pip install -r dotdrop/requirements.txt # alias dotdrop='eval $(grep -v \"^#\" ~/dotfiles/.env.public) ~/dotfiles/dotdrop.sh' # dotdrop install Enable lockscreen at suspend \u00b6 Create a service file /etc/systemd/system/i3lock@.service : 1 2 3 4 5 6 7 8 9 10 11 12 [Unit] Description=Lock the screen on resume from suspend Before=sleep.target [Service] User=%I Type=forking Environment=DISPLAY=:0 ExecStart=/home/%I/.config/bspwm/lock.sh [Install] WantedBy=suspend.target Enable the service 1 2 # systemctl daemon-reload # systemctl enable i3lock@phg Make powertop optimazations permanent \u00b6 /etc/systemd/system/powertop.service : 1 2 3 4 5 6 7 8 9 10 [ Unit ] Description = PowerTOP auto tune [ Service ] Type = idle Environment = \"TERM=dumb\" ExecStart = /usr/sbin/powertop --auto-tune [ Install ] WantedBy = multi-user.target 1 2 # systemctl daemon-reload # systemctl enable powertop.service Enable network manager \u00b6 1 # systemctl enable NetworkManager Install packages \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 # pacman -S firefox \\ alsa-utils \\ alsa-tools \\ alsa-plagins \\ pulseaudio \\ pulseaudio-alsa \\ exfat-utils \\ openssh \\ net-tools \\ keepass \\ keepass-plugin-keeagent \\ inkscape \\ gimp \\ vlc \\ qt4 \\ libsecret \\ gnome-keyring \\ libgnome-keyring \\ thunderbird \\ pinentry \\ gpa \\ dmenu \\ mc \\ nemo \\ nemo-fileroller \\ nemo-image-converter \\ nemo-preview \\ nemo-seahorse \\ nemo-share \\ linux-headers \\ wireguard-dkms \\ wireguard-tools \\ wmname # gpg --recv-keys --keyserver sks-keyservers.net 0xDB1187B9DD5F693B # yay -S tldr \\ keepass-plugin-rpc \\ keepass-plugin-haveibeenpwned \\ keepass-plugin-http \\ keepass2-plugin-tray-icon \\ nextcloud-client-git \\ franz-bin \\ thunderbird-enigmail \\ gtkhash-nemo \\ nemo-compare Enable SSH-Agent Serive \u00b6 1 2 3 # systemctl --user daemon-reload # systemctl --user enable ssh-agent.service # systemctl --user start ssh-agent.service TODO \u00b6 Crypto fixen Use an Hardware device for 2 nd Factor authentication Maybe use TOTP as 2 nd Factor? Audio (Mic) Get external Microphones working!","title":"Arch Linux"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#arch-linux-dell-xps-15-9560","text":"","title":"Arch Linux Dell XPS 15 (9560)"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#pre-installation","text":"","title":"Pre-installation"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#uefi","text":"Before installing it is necessary to modify some UEFI Settings. They can be accessed by pressing the F2 key repeatedly when booting. Change the SATA Mode from the default \"RAID\" to \"AHCI\". This will allow Linux to detect the NVME SSD. If dual booting with an existing Windows installation, Windows will not boot after the change but this can be fixed without a reinstallation. Change Fastboot to \"Thorough\" in \"POST Behaviour\". This prevents intermittent boot failures. Disable secure boot to allow Linux to boot. Installation of Arch Linux can proceed normally. Refer to the Installation guide for more information.","title":"UEFI"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#change-keyboard-layout","text":"If you don't have an EN:Intl. Keyboard layout you should change it to your layout. In my case it is de-latin1-nodeadkeys1 . 1 loadkeys de-latin1-nodeadkeys1","title":"Change Keyboard layout"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#connect-to-a-wireless-network-during-installation-temporary","text":"Change to TTY2 with ALT + F2 and use the following example to connect to your network. 1 wpa_supplicant -D nl80211,ext -i wlp2s0 -c < ( wpa_passphrase 'YourWififNetwork' 'YourWifiPassword' ) Afterwards you establish the connection change back to TTY1 with ALT + F1 . Run dhclient to reciev an ip via dhcp: 1 dhclient wlp2s0","title":"Connect to a wireless network during installation (temporary)"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#update-the-system-clock","text":"Use timedatectl(1) to ensure the system clock is accurate: 1 2 # timedatectl set-ntp true # systemctl start systemd-timesyncd To check the service status, use timedatectl status.","title":"Update the system clock"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#installation","text":"","title":"Installation"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#preparing-disks","text":"I'll encrypt my Data so my Partition layout looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 +----------------+----------------+----------------+-----------------------------------------------------------------------------------------------+ | | | | | | | | | | | | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | | | | | /dev/mapper/swap | /dev/mapper/tmp | /dev/mapper/root | /dev/mapper/home | | | | |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | | | | | | | | | | | | 16 GiB | 30 GiB | 50 GiB | 100%FREE | | | | | Logical volume1 | Logical volume2 | Logical volume3 | Logical volume4 | | | | | /dev/mapper/osvg-swap | /dev/mapper/osvg-tmp | /dev/mapper/osvg-root | /dev/mapper/osvg-home | | | | EF02 |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | EF00 | 8300 | 8 MiB | | | 550 MiB | 500 MiB | BIOS | 8E00 | | EFI partition | boot partition | Boot partition | 100%FREE | | /dev/nvme0n1p1 | /dev/nvme0n1p2 | /dev/nvme0n1p3 | /dev/nvme0n1p4 | +----------------+----------------+----------------+-----------------------------------------------------------------------------------------------+ Create these partitions with gdisk so that you have GPT instead of MBR .","title":"Preparing Disks"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#wipe-data-on-all-partitions","text":"1 2 3 4 # dd if=/dev/zero of=/dev/nvme0n1p1 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p2 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p3 bs=1M status=progress # dd if=/dev/zero of=/dev/nvme0n1p4 bs=1M status=progress","title":"Wipe Data on all partitions"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#preparing-the-logical-volumes","text":"1 2 3 4 5 6 # pvcreate /dev/nvme0n1p4 # vgcreate osvg /dev/nvme0n1p4 # lvcreate -L 16G -n swap osvg # lvcreate -L 30G -n tmp osvg # lvcreate -L 50G -n root osvg # lvcreate -l 100%FREE -n home osvg","title":"Preparing the logical volumes"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#setup-luks-for-our-partitions","text":"Create an encrypted root with a key you can remember. 1 # cryptsetup luksFormat /dev/mapper/osvg-root Open the root filesystem to create an encryption key for all other partitions. 1 2 3 4 5 6 # cryptsetup luksOpen /dev/mapper/osvg-root root # mkfs.ext4 /dev/mapper/root # mnt /dev/mapper/root /mnt # mkdir -pm 700 /mnt/etc/luks-keys # dd if=/dev/random of=/mnt/etc/luks-keys/home bs=1 count=1024 status=progress # chmod 000 /mnt/etc/luks-keys/home Use the encrypted key to create our encrypted home and add a pass phrase for emergency access: 1 2 # cryptsetup luksFormat /dev/mapper/osvg-home # cryptsetup luksAddKey /dev/mapper/osvg-home --key-file=/mnt/etc/luks-keys/home Now we open home, make a filesystem and mount it to /mnt/home . 1 2 3 4 # cryptsetup luksOpen --key-file=/mnt/etc/luks-keys/home /dev/mapper/osvg-home home # mkfs.ext4 /dev/mapper/home # mkdir -p /mnt/home # mount /dev/mapper/home /mnt/home and rebuild the EFI and boot partition: 1 2 # mkfs.vfat /dev/nvme0n1p1 # mkfs.ext4 /dev/nvme0n1p2 Setup and mount the boot/EFI partition: 1 2 3 4 5 # mkdir /mnt/boot # mount /dev/nvme0n1p2 /mnt/boot # mkdir /mnt/boot/EFI # mkdir /mnt/esp # mount /dev/nvme0n1p1 /mnt/esp","title":"Setup LUKS for our partitions"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-arch","text":"","title":"Install Arch"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#sort-mirrors-by-speed","text":"The pacman package provides a Bash script, /usr/bin/rankmirrors , which can be used to rank the mirrors according to their connection and opening speeds to take advantage of using the fastest local mirror. Back up the existing /etc/pacman.d/mirrorlist : 1 # cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak Edit /etc/pacman.d/mirrorlist.bak and uncomment mirrors for testing with rankmirrors . Run the following sed line to uncomment every mirror: 1 # sed -i 's/^Server/#Server/' /etc/pacman.d/mirrorlist.bak Finally, rank the mirrors. Operand -n 6 means only output the 6 fastest mirrors: 1 # rankmirrors -n 6 /etc/pacman.d/mirrorlist.bak > /etc/pacman.d/mirrorlist","title":"Sort mirrors by speed"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-the-base-packages","text":"Use the pacstrap script to install the base package group: 1 # pacstrap /mnt base This group does not include all tools from the live installation, such as btrfs-progs or specific wireless firmware; see packages.both for comparison. To install packages and other groups such as base-devel , append the names to pacstrap (space separated) or to individual pacman commands after the #Chroot step.","title":"Install the base packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#configure-the-system","text":"","title":"Configure the system"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#gen-fstab","text":"Generate an fstab file (use -U or -L to define by UUID or labels, respectively): 1 # genfstab -U /mnt >> /mnt/etc/fstab Check the resulting file in /mnt/etc/fstab afterwards, and edit it in case of errors. Add the following at the end of the /mnt/etc/fstab configuration. 1 2 3 /dev/mapper/tmp /tmp tmpfs defaults 0 0 /dev/mapper/swap none swap sw 0 0 /esp/EFI /boot/EFI none defaults,bind 0 0","title":"Gen fstab"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#modify-mntetccrypttab","text":"Add these at the end to the /mnt/etc/crypttab . 1 2 3 swap /dev/mapper/MyVol-swap /dev/urandom swap,cipher=aes-xts-plain64,size=256 tmp /dev/mapper/MyVol-tmp /dev/urandom tmp,cipher=aes-xts-plain64,size=256 home /dev/mapper/MyVol-home /etc/luks-keys/home","title":"Modify /mnt/etc/crypttab"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#chroot","text":"Change root into the new system: 1 # arch-chroot /mnt","title":"Chroot"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#uncomment-pacman-multilib-option","text":"In /etc/pacman.conf uncomment the following lines. 1 2 3 4 [...] [multilib] Include = /etc/pacman.d/mirrorlist [...]","title":"Uncomment pacman multilib option"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-packages","text":"1 2 pacman -Sy pacman -S base-devel grub efibootmgr dialog networkmanager network-manager-applet wireless_tools intel-ucode zsh w3m vim powertop bc","title":"Install Packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#create-my-user","text":"1 2 3 useradd -m -G wheel,audio,video,users,uucp,disk,optical,storage,rfkill -s /bin/zsh phg passwd phg","title":"Create my User"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#disable-root-login","text":"1 # passwd -l root","title":"Disable root login"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#allow-group-wheel-so-user-sudo","text":"Uncomment %wheel ALL=(ALL) ALL . Use visudo to edit the /etc/sudoers file.","title":"Allow group wheel so user sudo"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#keep-http_proxy-variables","text":"Add the following at the end of the 'Defaults' section. 1 2 Defaults env_keep += \"http_proxy\" Defaults env_keep += \"https_proxy\"","title":"Keep http_proxy variables"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-yaourt","text":"Zuerst muss das Paket package-query installiert werden, denn yaourt beruht darauf: 1 2 3 4 # curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/package-query.tar.gz # tar -xvzf package-query.tar.gz # cd package-query # sudo -u phg makepkg -si Danach wechselt man wieder ins n\u00e4chst h\u00f6here Verzeichnis und installiert yaourt: 1 2 3 4 5 # cd .. # curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/yaourt.tar.gz # tar -xvzf yaourt.tar.gz # cd yaourt # sudo -u phg makepkg -si","title":"Install yaourt"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#time-zone","text":"Set the time zone: 1 # ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime Run hwclock(8) to generate /etc/adjtime: 1 # hwclock --systohc This command assumes the hardware clock is set to UTC. See Time#Time standard for details. Enable timedated service: 1 # systemctl enable sysdemd-timesyncd","title":"Time zone"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#locale","text":"Uncomment the following localizations in /etc/locale.gen : 1 2 3 4 5 6 7 [...] de_DE.UTF-8 UTF-8 de_DE ISO-8859-1 [...] en_US.UTF-8 UTF-8 en_US ISO-8859-1 [...] and generate them with: 1 # locale-gen Set the LANG variable in locale.conf(5) accordingly, for example: /etc/locale.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_TIME=de_DE.UTF-8 LC_CTYPE=en_US.UTF-8 LC_COLLATE=C LC_MONETARY=de_DE.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=de_DE.UTF-8 LC_NAME=de_DE.UTF-8 LC_ADDRESS=de_DE.UTF-8 LC_TELEPHONE=de_DE.UTF-8 LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=de_DE.UTF-8","title":"Locale"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#setup-console","text":"","title":"Setup console"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-console-powerline-font","text":"Install the console powerline fonts. 1 # yaourt -S powerline-console-fonts ttf-ms-fonts Edit the /etc/vconsole.conf file and add the following to the TOP of the file: 1 2 FONT=ter-powerline-v14n [...]","title":"Install console powerline font"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#set-keymap","text":"If you set the keyboard layout, make the changes persistent in vconsole.conf(5) : /etc/vconsole.conf 1 2 [ ... ] KEYMAP = de-latin1-nodeadkeys","title":"Set keymap"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#hostname","text":"Create the hostname(5) file: /etc/hostname 1 yoetunheimr Consider adding a matching entry to hosts(5) : 1 2 3 4 5 /etc/hosts 127.0.0.1 localhost.localdomain localhost ::1 localhost.localdomain localhost 127.0.1.1 yoetunheimr.sao.local yoetunheimr See also Network configuration#Set the hostname .","title":"Hostname"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#edit-mkinitpico","text":"Add the keyboard , keymap , lvm2 and encrypt hooks to mkinitcpio.conf : /etc/mkinitcpio.conf : 1 HOOKS =( ... keyboard keymap block lvm2 encrypt ... filesystems ... )","title":"Edit mkinitpico"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#generate-initramfs","text":"1 # mkinitcpio -p linux","title":"Generate initramfs"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-grub","text":"1 # grub-install --target=x86_64-efi --efi-directory=/esp --bootloader-id=grub 1 # mount --bind /esp/EFI /boot/EFI","title":"Install GRUB"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#configuring-the-boot-loader","text":"In order to unlock the encrypted root partition at boot, the following kernel parameters need to be set by the boot loader ( /etc/default/grub ): 1 2 GRUB_CMDLINE_LINUX_DEFAULT=\"quiet acpi_rev_override=1 pci=nommconf\" GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root\" ??? Note 'Command explanation' * acpi_rev_override=1 is needed to get the NVIDIA graphics card working resp. to disable it. * The kernel option pci=nommconf disables Memory-Mapped PCI Configuration Space, which is available in Linux since kernel 2.6. Very roughly, all PCI devices have an area that describe this device (which you see with lspci -vv), and the originally method to access this area involves going through I/O ports, while PCIe allows this space to be mapped to memory for simpler access. * cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root configures the crypt device.","title":"Configuring the boot loader"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#generate-grub-config","text":"1 # grub-mkconfig -o /boot/grub/grub.cfg See Dm-crypt/System configuration#Boot loader for details.","title":"Generate GRUB config"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#reboot-into-the-installed-system","text":"Leave the chroot environment. 1 exit Unmount all partitions and reboot. 1 2 # umount -R /mnt # reboot","title":"Reboot into the installed system"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#post-installation-configuration","text":"","title":"Post installation configuration"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#get-graphicscard-and-x-working","text":"","title":"Get graphicscard and X working"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#acpi-override","text":"Add these to the kernel parameter in the /etc/default/grub configuration. 1 GRUB_CMDLINE_LINUX_DEFAULT=\"[...] acpi_rev_override=1\" Now rebuild the GRUB configuration. 1 # grub-mkconfig -o /boot/grub/grub.cfg","title":"ACPI Override"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-graphic-card-tools","text":"1 # pacman -S bbswitch bumblebee primus lib32-primus Use libglvnd as libgl provider. Enable the bumblebee service. 1 # systemctl enable bumblebeed.service Afterwards reboot the system. Tip You may need to reboot twice for the firmware to notice acpi_rev_override .","title":"Install graphic card tools"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#graphics-card-driversutils","text":"1 2 # yaourt -Sy # yaourt -S nvidia-beta nvidia-utils-beta lib32-nvidia-utils-beta","title":"Graphics card drivers/utils"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-x","text":"1 # pacman -S xorg xorg-xinit xf86-input-synaptics","title":"Install X"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-login-manager","text":"1 2 3 # pacman -S lightdm # yaourt -S lightdm-webkit-theme-litarvan # systemctl enable lightdm","title":"Install login manager"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#enable-webkit2-greeter","text":"Create the lightdm.conf.d folder: 1 # mkdir /etc/lightdm/lightdm.conf.d/ Set the default greeter by adding the following LightDM configuration file, like so: /etc/lightdm/lightdm.conf.d/50-lightdm-webkit2-greeter.conf 1 2 [Seat:*] greeter-session=lightdm-webkit2-greeter","title":"Enable Webkit2 greeter"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#lightdm-webkit2-theme-litarvan","text":"Edit the file /etc/lightdm/lightdm-webkit2-greeter.conf and set the \" webkit-theme \" property to \" litarvan \", like so: 1 2 3 [...] webkit_theme = litarvan [...]","title":"LightDM Webkit2 theme 'litarvan'"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#bspwm-session","text":"","title":"BSPWM Session"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#change-x-keyboard-layout-to-german","text":"/etc/X11/xorg.conf.d/00-keyboard.conf 1 2 3 4 5 6 Section \"InputClass\" Identifier \"keyboard\" MatchIsKeyboard \"yes\" Option \"XkbLayout\" \"de\" Option \"XkbVariant\" \"nodeadkeys\" EndSection","title":"Change X keyboard layout to german"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#add-touchpad-options","text":"/etc/X11/xorg.conf.d/50-synaptics.conf : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 Section \"InputClass\" Identifier \"touchpad catchall\" Driver \"synaptics\" MatchIsTouchpad \"on\" # enable clik zone and configure 3 buttons on bottom Option \"ClickPad\" \"1\" Option \"SoftButtonAreas\" \"60% 0 82% 0 40% 60% 82% 0\" # other commons options than you may want to configure # scroll with two fingers (enabled vertically, disabled horizontally) Option \"VertTwoFingerScroll\" \"1\" Option \"HorizTwoFingerScroll\" \"0\" # enable natural scrolling Option \"VertScrollDelta\" \"-111\" Option \"HorizScrollDelta\" \"-111\" # enable tap as click: 1 finger -> left button, 2 fingers -> right, 3 fingers -> middle Option \"TapButton1\" \"1\" Option \"TapButton2\" \"3\" Option \"TapButton3\" \"2\" # idem but for click with 1,2,3 fingers. Use \"0\" to disable. Option \"ClickFinger1\" \"1\" Option \"ClickFinger2\" \"3\" Option \"ClickFinger3\" \"2\" # palm detection. These parameters somehow works, YMMV. Option \"PalmDetect\" \"1\" Option \"PalmMinWidth\" \"10\" Option \"PalmMinZ\" \"200\" EndSection","title":"Add Touchpad options"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-xorg-xbacklight-replacement","text":"Note xorg-xbacklight does not work with the modesetting driver! 1 # yaourt -S acpilight Add the following file /etc/udev/rules.d/90-backlight.rules : 1 2 3 SUBSYSTEM==\"backlight\", ACTION==\"add\", \\ RUN+=\"/bin/chgrp video %S%p/brightness\", \\ RUN+=\"/bin/chmod g+w %S%p/brightness\"","title":"Install xorg-xbacklight replacement"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#window-manager","text":"Install bspwm, sxhkd, feh and fonts + dependencies. 1 2 # pacman -S bspwm sxhkd feh i3lock # yaourt -S polybar","title":"Window manager"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#get-my-dot-files","text":"Clone my dotfiles. 1 2 3 4 5 6 7 8 # pacman -Sy # pacman -S git python-pip # cd ~ # git clone git@github.com:shokinn/.files.git ~/.files # cd .files # sudo pip install -r dotdrop/requirements.txt # alias dotdrop='eval $(grep -v \"^#\" ~/dotfiles/.env.public) ~/dotfiles/dotdrop.sh' # dotdrop install","title":"Get my dot files"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#enable-lockscreen-at-suspend","text":"Create a service file /etc/systemd/system/i3lock@.service : 1 2 3 4 5 6 7 8 9 10 11 12 [Unit] Description=Lock the screen on resume from suspend Before=sleep.target [Service] User=%I Type=forking Environment=DISPLAY=:0 ExecStart=/home/%I/.config/bspwm/lock.sh [Install] WantedBy=suspend.target Enable the service 1 2 # systemctl daemon-reload # systemctl enable i3lock@phg","title":"Enable lockscreen at suspend"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#make-powertop-optimazations-permanent","text":"/etc/systemd/system/powertop.service : 1 2 3 4 5 6 7 8 9 10 [ Unit ] Description = PowerTOP auto tune [ Service ] Type = idle Environment = \"TERM=dumb\" ExecStart = /usr/sbin/powertop --auto-tune [ Install ] WantedBy = multi-user.target 1 2 # systemctl daemon-reload # systemctl enable powertop.service","title":"Make powertop optimazations permanent"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#enable-network-manager","text":"1 # systemctl enable NetworkManager","title":"Enable network manager"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#install-packages_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 # pacman -S firefox \\ alsa-utils \\ alsa-tools \\ alsa-plagins \\ pulseaudio \\ pulseaudio-alsa \\ exfat-utils \\ openssh \\ net-tools \\ keepass \\ keepass-plugin-keeagent \\ inkscape \\ gimp \\ vlc \\ qt4 \\ libsecret \\ gnome-keyring \\ libgnome-keyring \\ thunderbird \\ pinentry \\ gpa \\ dmenu \\ mc \\ nemo \\ nemo-fileroller \\ nemo-image-converter \\ nemo-preview \\ nemo-seahorse \\ nemo-share \\ linux-headers \\ wireguard-dkms \\ wireguard-tools \\ wmname # gpg --recv-keys --keyserver sks-keyservers.net 0xDB1187B9DD5F693B # yay -S tldr \\ keepass-plugin-rpc \\ keepass-plugin-haveibeenpwned \\ keepass-plugin-http \\ keepass2-plugin-tray-icon \\ nextcloud-client-git \\ franz-bin \\ thunderbird-enigmail \\ gtkhash-nemo \\ nemo-compare","title":"Install packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#enable-ssh-agent-serive","text":"1 2 3 # systemctl --user daemon-reload # systemctl --user enable ssh-agent.service # systemctl --user start ssh-agent.service","title":"Enable SSH-Agent Serive"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux/#todo","text":"Crypto fixen Use an Hardware device for 2 nd Factor authentication Maybe use TOTP as 2 nd Factor? Audio (Mic) Get external Microphones working!","title":"TODO"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/","text":"Arch Linux Dell XPS 15 (9560) - Base Arch \u00b6 Pre-installation \u00b6 UEFI \u00b6 Before installing it is necessary to modify some UEFI Settings. They can be accessed by pressing the F2 key repeatedly when booting. Change the SATA Mode from the default \"RAID\" to \"AHCI\". This will allow Linux to detect the NVME SSD. If dual booting with an existing Windows installation, Windows will not boot after the change but this can be fixed without a reinstallation. Change Fastboot to \"Thorough\" in \"POST Behaviour\". This prevents intermittent boot failures. Disable secure boot to allow Linux to boot. Installation of Arch Linux can proceed normally. Refer to the Installation guide for more information. Change Keyboard layout \u00b6 If you don't have an EN:Intl. Keyboard layout you should change it to your layout. In my case it is de-latin1-nodeadkeys1 . 1 loadkeys de-latin1-nodeadkeys Connect to a wireless network during installation (temporary) \u00b6 Run wifi-menu to get a graphical interface to connect to your wifi. 1 wifi-menu Afterwards you establish the connection change back to TTY1 with ALT + F1 . Run dhclient to receive an ip via dhcp: 1 dhclient wlp2s0 Update the system clock \u00b6 Use timedatectl(1) to ensure the system clock is accurate: 1 2 timedatectl set-ntp true systemctl restart systemd-timesyncd To check the service status, use timedatectl status. Installation \u00b6 Preparing Disks \u00b6 I'll encrypt my Data so my Partition layout looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 +----------------+----------------+-----------------------------------------------------------------------------------------------+ | | | | | | | | | | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | | | | /dev/mapper/swap | /dev/mapper/tmp | /dev/mapper/root | /dev/mapper/home | | | |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | | | | | | | | | | 16 GiB | 30 GiB | 50 GiB | 100%FREE | | | | Logical volume1 | Logical volume2 | Logical volume3 | Logical volume4 | | | | /dev/mapper/osvg-swap | /dev/mapper/osvg-tmp | /dev/mapper/osvg-root | /dev/mapper/osvg-home | | | EF02 |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | EF00 | 8 MiB | | | 1050 MiB | BIOS | 8E00 | | EFI partition | Boot partition | 100%FREE | | /dev/nvme0n1p1 | /dev/nvme0n1p2 | /dev/nvme0n1p3 | +----------------+----------------+-----------------------------------------------------------------------------------------------+ Create these partitions with gdisk so that you have GPT instead of MBR . Old partition table If you get the message that the kernel is still using the old partition table run: 1 partprobe /dev/nvme0n1 If you still get the message the the kernel is using the old partition table you have to reboot your device and perform all steps except the partitioning again. Wipe Data on all partitions \u00b6 1 2 3 dd if = /dev/zero of = /dev/nvme0n1p1 bs = 1M status = progress dd if = /dev/zero of = /dev/nvme0n1p2 bs = 1M status = progress dd if = /dev/uransom of = /dev/nvme0n1p3 bs = 1M status = progress Preparing the logical volumes \u00b6 1 2 3 4 5 6 pvcreate /dev/nvme0n1p3 vgcreate osvg /dev/nvme0n1p3 lvcreate -L 16G -n swap osvg lvcreate -L 30G -n tmp osvg lvcreate -L 50G -n root osvg lvcreate -l 100 %FREE -n home osvg Setup LUKS for our partitions \u00b6 Create an encrypted root with a key you can remember. 1 cryptsetup luksFormat /dev/mapper/osvg-root Open the root filesystem to create an encryption key for all other partitions. 1 2 3 4 5 6 cryptsetup luksOpen /dev/mapper/osvg-root root mkfs.ext4 /dev/mapper/root mount /dev/mapper/root /mnt mkdir -pm 700 /mnt/etc/luks-keys dd if = /dev/random of = /mnt/etc/luks-keys/home bs = 1 count = 1024 status = progress chmod 000 /mnt/etc/luks-keys/home Use the encrypted key to create our encrypted home and add a pass phrase for emergency access: 1 2 cryptsetup luksFormat /dev/mapper/osvg-home cryptsetup luksAddKey /dev/mapper/osvg-home /mnt/etc/luks-keys/home Now we open home, make a filesystem and mount it to /mnt/home . 1 2 3 4 cryptsetup luksOpen --key-file = /mnt/etc/luks-keys/home /dev/mapper/osvg-home home mkfs.ext4 /dev/mapper/home mkdir /mnt/home mount /dev/mapper/home /mnt/home and rebuild the EFI and boot partition: 1 mkfs.fat -F32 /dev/nvme0n1p1 Setup and mount the boot/EFI partition: 1 2 3 4 5 mkdir /mnt/boot mkdir /mnt/efi mount /dev/nvme0n1p1 /mnt/efi mkdir -p /mnt/efi/EFI/arch mount --bind /mnt/efi/EFI/arch /mnt/boot Install Arch \u00b6 Sort mirrors by speed \u00b6 The pacman package provides a Bash script, /usr/bin/rankmirrors , which can be used to rank the mirrors according to their connection and opening speeds to take advantage of using the fastest local mirror. Back up the existing /etc/pacman.d/mirrorlist : 1 cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak Download a german mirrorlist: Full URL https://www.archlinux.org/mirrorlist/?country=DE&protocol=http&protocol=https&ip_version=4&ip_version=6&use_mirror_status=on 1 curl -L -o /etc/pacman.d/mirrorlist \"https://bit.ly/1yFCU2R\" Edit /etc/pacman.d/mirrorlist.bak and uncomment mirrors for testing with rankmirrors . Run the following sed line to uncomment every mirror: 1 sed -i 's/^#Server/Server/' /etc/pacman.d/mirrorlist Install the base packages \u00b6 Use the pacstrap script to install the base package group: 1 pacstrap /mnt base base-devel intel-ucode wpa_supplicant dialog This group does not include all tools from the live installation, such as btrfs-progs or specific wireless firmware; see packages.both for comparison. To install packages and other groups such as base-devel , append the names to pacstrap (space separated) or to individual pacman commands after the #Chroot step. Configure the system \u00b6 Gen fstab \u00b6 Generate an fstab file (use -U or -L to define by UUID or labels, respectively): 1 genfstab -U /mnt >> /mnt/etc/fstab Check the resulting file in /mnt/etc/fstab afterwards, and edit it in case of errors. Add the following at the end of the /mnt/etc/fstab configuration. 1 2 /dev/mapper/tmp /tmp tmpfs defaults 0 0 /dev/mapper/swap none swap sw 0 0 Modify /mnt/etc/crypttab \u00b6 Add these at the end to the /mnt/etc/crypttab . 1 2 3 swap /dev/mapper/osvg-swap /dev/urandom swap,cipher=aes-xts-plain64,size=256 tmp /dev/mapper/osvg-tmp /dev/urandom tmp,cipher=aes-xts-plain64,size=256 home /dev/mapper/osvg-home /etc/luks-keys/home Chroot \u00b6 Change root into the new system: 1 arch-chroot /mnt Uncomment pacman multilib option \u00b6 In /etc/pacman.conf uncomment the following lines. 1 2 3 4 [...] [multilib] Include = /etc/pacman.d/mirrorlist [...] Install Packages \u00b6 1 2 pacman -Sy pacman -S grub efibootmgr networkmanager network-manager-applet wireless_tools zsh w3m vim powertop bc git Fix vim dark colors stuff \u00b6 1 2 3 4 5 cat << EOF >> /etc/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF set vim to default editor \u00b6 1 2 3 cat << EOF >> /etc/environment EDITOR=vim EOF Create my User \u00b6 1 2 3 useradd -m -G wheel,audio,video,users,uucp,disk,optical,storage,rfkill -s /bin/zsh phg passwd phg Disable root login \u00b6 1 passwd -l root Allow group wheel so user sudo \u00b6 Uncomment %wheel ALL=(ALL) ALL . Use visudo to edit the /etc/sudoers file. Keep http_proxy variables \u00b6 Add the following at the end of the 'Defaults' section. 1 2 Defaults env_keep += \"http_proxy\" Defaults env_keep += \"https_proxy\" Install yay \u00b6 Clone the yay sources. Build, install and delete it. 1 2 3 4 5 6 git clone https://aur.archlinux.org/yay.git chown phg:phg yay cd yay sudo -u phg makepkg -si cd .. rm -rf yay Time zone \u00b6 Set the time zone: 1 ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime Run hwclock(8) to generate /etc/adjtime: 1 hwclock --systohc This command assumes the hardware clock is set to UTC. See Time#Time standard for details. Enable timedated service: 1 systemctl enable systemd-timesyncd Locale \u00b6 Uncomment the following localizations in /etc/locale.gen : 1 2 3 4 5 6 7 8 [...] de_DE.UTF-8 UTF-8 de_DE ISO-8859-1 de_DE@euro ISO-8859-15 [...] en_US.UTF-8 UTF-8 en_US ISO-8859-1 [...] and generate them with: 1 locale-gen Set the LANG variable in locale.conf(5) accordingly, for example: /etc/locale.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_TIME=de_DE.UTF-8 LC_CTYPE=en_US.UTF-8 LC_COLLATE=C LC_MONETARY=de_DE.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=de_DE.UTF-8 LC_NAME=de_DE.UTF-8 LC_ADDRESS=de_DE.UTF-8 LC_TELEPHONE=de_DE.UTF-8 LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=de_DE.UTF-8 Setup console \u00b6 Install console powerline font \u00b6 Install the console powerline fonts. 1 sudo -u phg yay -S powerline-console-fonts ttf-ms-fonts ttf-dejavu Edit the /etc/vconsole.conf file and add the following to the TOP of the file: 1 2 FONT=ter-powerline-v14n [...] Set keymap \u00b6 If you set the keyboard layout, make the changes persistent in vconsole.conf(5) : /etc/vconsole.conf 1 2 [ ... ] KEYMAP = de-latin1-nodeadkeys Hostname \u00b6 Create the hostname(5) file: /etc/hostname 1 yoetunheimr Consider adding a matching entry to hosts(5) : 1 2 3 4 5 /etc/hosts 127.0.0.1 localhost.localdomain localhost ::1 localhost.localdomain localhost 127.0.1.1 yoetunheimr.sao.local yoetunheimr See also Network configuration#Set the hostname . Edit mkinitpico \u00b6 Add the keyboard , keymap , lvm2 and encrypt hooks to mkinitcpio.conf : /etc/mkinitcpio.conf : HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck) Generate initramfs \u00b6 1 mkinitcpio -p linux Install GRUB \u00b6 1 2 grub-mkconfig -o /boot/grub/grub.cfg grub-install --target = x86_64-efi --efi-directory = /efi --bootloader-id = grub Configuring the boot loader \u00b6 In order to unlock the encrypted root partition at boot, the following kernel parameters need to be set by the boot loader ( /etc/default/grub ): 1 2 GRUB_CMDLINE_LINUX_DEFAULT=\"quiet acpi_rev_override=1 pci=nommconf\" GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root\" Command explanation acpi_rev_override=1 is needed to get the NVIDIA graphics card working resp. to disable it. The kernel option pci=nommconf disables Memory-Mapped PCI Configuration Space, which is available in Linux since kernel 2.6. Very roughly, all PCI devices have an area that describe this device (which you see with lspci -vv), and the originally method to access this area involves going through I/O ports, while PCIe allows this space to be mapped to memory for simpler access. cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root configures the crypt device. Generate GRUB config \u00b6 1 grub-mkconfig -o /boot/grub/grub.cfg See Dm-crypt/System configuration#Boot loader for details. Reboot into the installed system \u00b6 Leave the chroot environment. 1 exit Unmount all partitions and reboot. 1 2 umount -R /mnt reboot Modify UEFI \u00b6 Open UEFI Configuration menu. (F12 -> Setup) Go to: 1 2 3 4 5 6 7 8 9 10 - General | - Boot Sequence \\ Boot List Option \\ Add Boot Option | - Boot Option Name | \\ \"Linux\" | - File System List | \\ PciRoot(0x0)/[...] | - File Name | \\ \"\\EFI\\grub\\grubx64.efi\" Afterwards set \"Linux\" in the Boot Sequence to the top. Post installation configuration \u00b6 Install useful services \u00b6 1 2 pacman -S acpid dbus avahi cups cronie systemctl enable acpid avahi-daemon org.cups.cupsd.service cronie Get graphics card and X working \u00b6 Install graphic card tools \u00b6 1 sudo pacman -S bbswitch bumblebee primus lib32-primus Use libglvnd as libgl provider. Enable the bumblebee service. 1 sudo systemctl enable bumblebeed.service Graphics card drivers/utils \u00b6 1 2 yay -Sy yay -S nvidia nvidia-utils lib32-nvidia-utils Get my dot files \u00b6 Clone my dotfiles. 1 2 3 4 5 6 7 8 9 10 11 12 sh -c \" $( curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh ) \" sudo pacman -Sy sudo pacman -S python-pip cd ~ git clone --recurse https://github.com/shokinn/.files.git ~/.files cd .files git remote -v git remote set-url origin git@github.com:shokinn/.files.git pip install --user -r dotdrop/requirements.txt alias dotdrop = 'eval $(grep -v \"^#\" ~/.files/.env.public) ~/.files/dotdrop.sh' dotdrop install git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k Powertop \u00b6 Optimize power comsumption \u00b6 Run the following command to calibrate your power consumption: 1 sudo powertop --calibrate Note Your screen will turn several times black and keep black for a couple minutes! Don't worry :) Make powertop optimazations permanent \u00b6 /etc/systemd/system/powertop.service : 1 2 3 4 5 6 7 8 9 10 11 cat <<EOF | sudo tee /etc/systemd/system/powertop.service [Unit] Description=PowerTOP auto tune [Service] Type=oneshot ExecStart=/usr/sbin/powertop --auto-tune [Install] WantedBy=multi-user.target EOF 1 2 3 sudo systemctl daemon-reload sudo systemctl start powertop.service sudo systemctl enable powertop.service Install packages \u00b6 Install audio packages \u00b6 1 2 3 sudo pacman -S \\ alsa-utils \\ alsa-oss Install various packages \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo pacman -S \\ exfat-utils \\ openssh \\ net-tools \\ libsecret \\ gnome-keyring \\ libgnome-keyring \\ mc \\ htop \\ linux-headers \\ wireguard-dkms \\ wireguard-tools yay -S tldr Enable SSH-Agent Serive \u00b6 1 2 3 systemctl --user daemon-reload systemctl --user enable ssh-agent.service systemctl --user start ssh-agent.service TODO \u00b6 Crypto fixen Use an Hardware device for 2 nd Factor authentication Maybe use TOTP as 2 nd Factor?","title":"Arch Linux Dell XPS 15 (9560) - Base Arch"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#arch-linux-dell-xps-15-9560-base-arch","text":"","title":"Arch Linux Dell XPS 15 (9560) - Base Arch"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#pre-installation","text":"","title":"Pre-installation"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#uefi","text":"Before installing it is necessary to modify some UEFI Settings. They can be accessed by pressing the F2 key repeatedly when booting. Change the SATA Mode from the default \"RAID\" to \"AHCI\". This will allow Linux to detect the NVME SSD. If dual booting with an existing Windows installation, Windows will not boot after the change but this can be fixed without a reinstallation. Change Fastboot to \"Thorough\" in \"POST Behaviour\". This prevents intermittent boot failures. Disable secure boot to allow Linux to boot. Installation of Arch Linux can proceed normally. Refer to the Installation guide for more information.","title":"UEFI"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#change-keyboard-layout","text":"If you don't have an EN:Intl. Keyboard layout you should change it to your layout. In my case it is de-latin1-nodeadkeys1 . 1 loadkeys de-latin1-nodeadkeys","title":"Change Keyboard layout"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#connect-to-a-wireless-network-during-installation-temporary","text":"Run wifi-menu to get a graphical interface to connect to your wifi. 1 wifi-menu Afterwards you establish the connection change back to TTY1 with ALT + F1 . Run dhclient to receive an ip via dhcp: 1 dhclient wlp2s0","title":"Connect to a wireless network during installation (temporary)"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#update-the-system-clock","text":"Use timedatectl(1) to ensure the system clock is accurate: 1 2 timedatectl set-ntp true systemctl restart systemd-timesyncd To check the service status, use timedatectl status.","title":"Update the system clock"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#installation","text":"","title":"Installation"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#preparing-disks","text":"I'll encrypt my Data so my Partition layout looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 +----------------+----------------+-----------------------------------------------------------------------------------------------+ | | | | | | | | | | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | LUKS encrypted volume | | | | /dev/mapper/swap | /dev/mapper/tmp | /dev/mapper/root | /dev/mapper/home | | | |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | | | | | | | | | | 16 GiB | 30 GiB | 50 GiB | 100%FREE | | | | Logical volume1 | Logical volume2 | Logical volume3 | Logical volume4 | | | | /dev/mapper/osvg-swap | /dev/mapper/osvg-tmp | /dev/mapper/osvg-root | /dev/mapper/osvg-home | | | EF02 |_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | EF00 | 8 MiB | | | 1050 MiB | BIOS | 8E00 | | EFI partition | Boot partition | 100%FREE | | /dev/nvme0n1p1 | /dev/nvme0n1p2 | /dev/nvme0n1p3 | +----------------+----------------+-----------------------------------------------------------------------------------------------+ Create these partitions with gdisk so that you have GPT instead of MBR . Old partition table If you get the message that the kernel is still using the old partition table run: 1 partprobe /dev/nvme0n1 If you still get the message the the kernel is using the old partition table you have to reboot your device and perform all steps except the partitioning again.","title":"Preparing Disks"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#wipe-data-on-all-partitions","text":"1 2 3 dd if = /dev/zero of = /dev/nvme0n1p1 bs = 1M status = progress dd if = /dev/zero of = /dev/nvme0n1p2 bs = 1M status = progress dd if = /dev/uransom of = /dev/nvme0n1p3 bs = 1M status = progress","title":"Wipe Data on all partitions"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#preparing-the-logical-volumes","text":"1 2 3 4 5 6 pvcreate /dev/nvme0n1p3 vgcreate osvg /dev/nvme0n1p3 lvcreate -L 16G -n swap osvg lvcreate -L 30G -n tmp osvg lvcreate -L 50G -n root osvg lvcreate -l 100 %FREE -n home osvg","title":"Preparing the logical volumes"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#setup-luks-for-our-partitions","text":"Create an encrypted root with a key you can remember. 1 cryptsetup luksFormat /dev/mapper/osvg-root Open the root filesystem to create an encryption key for all other partitions. 1 2 3 4 5 6 cryptsetup luksOpen /dev/mapper/osvg-root root mkfs.ext4 /dev/mapper/root mount /dev/mapper/root /mnt mkdir -pm 700 /mnt/etc/luks-keys dd if = /dev/random of = /mnt/etc/luks-keys/home bs = 1 count = 1024 status = progress chmod 000 /mnt/etc/luks-keys/home Use the encrypted key to create our encrypted home and add a pass phrase for emergency access: 1 2 cryptsetup luksFormat /dev/mapper/osvg-home cryptsetup luksAddKey /dev/mapper/osvg-home /mnt/etc/luks-keys/home Now we open home, make a filesystem and mount it to /mnt/home . 1 2 3 4 cryptsetup luksOpen --key-file = /mnt/etc/luks-keys/home /dev/mapper/osvg-home home mkfs.ext4 /dev/mapper/home mkdir /mnt/home mount /dev/mapper/home /mnt/home and rebuild the EFI and boot partition: 1 mkfs.fat -F32 /dev/nvme0n1p1 Setup and mount the boot/EFI partition: 1 2 3 4 5 mkdir /mnt/boot mkdir /mnt/efi mount /dev/nvme0n1p1 /mnt/efi mkdir -p /mnt/efi/EFI/arch mount --bind /mnt/efi/EFI/arch /mnt/boot","title":"Setup LUKS for our partitions"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-arch","text":"","title":"Install Arch"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#sort-mirrors-by-speed","text":"The pacman package provides a Bash script, /usr/bin/rankmirrors , which can be used to rank the mirrors according to their connection and opening speeds to take advantage of using the fastest local mirror. Back up the existing /etc/pacman.d/mirrorlist : 1 cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak Download a german mirrorlist: Full URL https://www.archlinux.org/mirrorlist/?country=DE&protocol=http&protocol=https&ip_version=4&ip_version=6&use_mirror_status=on 1 curl -L -o /etc/pacman.d/mirrorlist \"https://bit.ly/1yFCU2R\" Edit /etc/pacman.d/mirrorlist.bak and uncomment mirrors for testing with rankmirrors . Run the following sed line to uncomment every mirror: 1 sed -i 's/^#Server/Server/' /etc/pacman.d/mirrorlist","title":"Sort mirrors by speed"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-the-base-packages","text":"Use the pacstrap script to install the base package group: 1 pacstrap /mnt base base-devel intel-ucode wpa_supplicant dialog This group does not include all tools from the live installation, such as btrfs-progs or specific wireless firmware; see packages.both for comparison. To install packages and other groups such as base-devel , append the names to pacstrap (space separated) or to individual pacman commands after the #Chroot step.","title":"Install the base packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#configure-the-system","text":"","title":"Configure the system"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#gen-fstab","text":"Generate an fstab file (use -U or -L to define by UUID or labels, respectively): 1 genfstab -U /mnt >> /mnt/etc/fstab Check the resulting file in /mnt/etc/fstab afterwards, and edit it in case of errors. Add the following at the end of the /mnt/etc/fstab configuration. 1 2 /dev/mapper/tmp /tmp tmpfs defaults 0 0 /dev/mapper/swap none swap sw 0 0","title":"Gen fstab"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#modify-mntetccrypttab","text":"Add these at the end to the /mnt/etc/crypttab . 1 2 3 swap /dev/mapper/osvg-swap /dev/urandom swap,cipher=aes-xts-plain64,size=256 tmp /dev/mapper/osvg-tmp /dev/urandom tmp,cipher=aes-xts-plain64,size=256 home /dev/mapper/osvg-home /etc/luks-keys/home","title":"Modify /mnt/etc/crypttab"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#chroot","text":"Change root into the new system: 1 arch-chroot /mnt","title":"Chroot"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#uncomment-pacman-multilib-option","text":"In /etc/pacman.conf uncomment the following lines. 1 2 3 4 [...] [multilib] Include = /etc/pacman.d/mirrorlist [...]","title":"Uncomment pacman multilib option"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-packages","text":"1 2 pacman -Sy pacman -S grub efibootmgr networkmanager network-manager-applet wireless_tools zsh w3m vim powertop bc git","title":"Install Packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#fix-vim-dark-colors-stuff","text":"1 2 3 4 5 cat << EOF >> /etc/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Fix vim dark colors stuff"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#set-vim-to-default-editor","text":"1 2 3 cat << EOF >> /etc/environment EDITOR=vim EOF","title":"set vim to default editor"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#create-my-user","text":"1 2 3 useradd -m -G wheel,audio,video,users,uucp,disk,optical,storage,rfkill -s /bin/zsh phg passwd phg","title":"Create my User"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#disable-root-login","text":"1 passwd -l root","title":"Disable root login"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#allow-group-wheel-so-user-sudo","text":"Uncomment %wheel ALL=(ALL) ALL . Use visudo to edit the /etc/sudoers file.","title":"Allow group wheel so user sudo"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#keep-http_proxy-variables","text":"Add the following at the end of the 'Defaults' section. 1 2 Defaults env_keep += \"http_proxy\" Defaults env_keep += \"https_proxy\"","title":"Keep http_proxy variables"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-yay","text":"Clone the yay sources. Build, install and delete it. 1 2 3 4 5 6 git clone https://aur.archlinux.org/yay.git chown phg:phg yay cd yay sudo -u phg makepkg -si cd .. rm -rf yay","title":"Install yay"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#time-zone","text":"Set the time zone: 1 ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime Run hwclock(8) to generate /etc/adjtime: 1 hwclock --systohc This command assumes the hardware clock is set to UTC. See Time#Time standard for details. Enable timedated service: 1 systemctl enable systemd-timesyncd","title":"Time zone"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#locale","text":"Uncomment the following localizations in /etc/locale.gen : 1 2 3 4 5 6 7 8 [...] de_DE.UTF-8 UTF-8 de_DE ISO-8859-1 de_DE@euro ISO-8859-15 [...] en_US.UTF-8 UTF-8 en_US ISO-8859-1 [...] and generate them with: 1 locale-gen Set the LANG variable in locale.conf(5) accordingly, for example: /etc/locale.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_TIME=de_DE.UTF-8 LC_CTYPE=en_US.UTF-8 LC_COLLATE=C LC_MONETARY=de_DE.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=de_DE.UTF-8 LC_NAME=de_DE.UTF-8 LC_ADDRESS=de_DE.UTF-8 LC_TELEPHONE=de_DE.UTF-8 LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=de_DE.UTF-8","title":"Locale"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#setup-console","text":"","title":"Setup console"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-console-powerline-font","text":"Install the console powerline fonts. 1 sudo -u phg yay -S powerline-console-fonts ttf-ms-fonts ttf-dejavu Edit the /etc/vconsole.conf file and add the following to the TOP of the file: 1 2 FONT=ter-powerline-v14n [...]","title":"Install console powerline font"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#set-keymap","text":"If you set the keyboard layout, make the changes persistent in vconsole.conf(5) : /etc/vconsole.conf 1 2 [ ... ] KEYMAP = de-latin1-nodeadkeys","title":"Set keymap"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#hostname","text":"Create the hostname(5) file: /etc/hostname 1 yoetunheimr Consider adding a matching entry to hosts(5) : 1 2 3 4 5 /etc/hosts 127.0.0.1 localhost.localdomain localhost ::1 localhost.localdomain localhost 127.0.1.1 yoetunheimr.sao.local yoetunheimr See also Network configuration#Set the hostname .","title":"Hostname"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#edit-mkinitpico","text":"Add the keyboard , keymap , lvm2 and encrypt hooks to mkinitcpio.conf : /etc/mkinitcpio.conf : HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck)","title":"Edit mkinitpico"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#generate-initramfs","text":"1 mkinitcpio -p linux","title":"Generate initramfs"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-grub","text":"1 2 grub-mkconfig -o /boot/grub/grub.cfg grub-install --target = x86_64-efi --efi-directory = /efi --bootloader-id = grub","title":"Install GRUB"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#configuring-the-boot-loader","text":"In order to unlock the encrypted root partition at boot, the following kernel parameters need to be set by the boot loader ( /etc/default/grub ): 1 2 GRUB_CMDLINE_LINUX_DEFAULT=\"quiet acpi_rev_override=1 pci=nommconf\" GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root\" Command explanation acpi_rev_override=1 is needed to get the NVIDIA graphics card working resp. to disable it. The kernel option pci=nommconf disables Memory-Mapped PCI Configuration Space, which is available in Linux since kernel 2.6. Very roughly, all PCI devices have an area that describe this device (which you see with lspci -vv), and the originally method to access this area involves going through I/O ports, while PCIe allows this space to be mapped to memory for simpler access. cryptdevice=/dev/mapper/osvg-root:root root=/dev/mapper/root configures the crypt device.","title":"Configuring the boot loader"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#generate-grub-config","text":"1 grub-mkconfig -o /boot/grub/grub.cfg See Dm-crypt/System configuration#Boot loader for details.","title":"Generate GRUB config"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#reboot-into-the-installed-system","text":"Leave the chroot environment. 1 exit Unmount all partitions and reboot. 1 2 umount -R /mnt reboot","title":"Reboot into the installed system"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#modify-uefi","text":"Open UEFI Configuration menu. (F12 -> Setup) Go to: 1 2 3 4 5 6 7 8 9 10 - General | - Boot Sequence \\ Boot List Option \\ Add Boot Option | - Boot Option Name | \\ \"Linux\" | - File System List | \\ PciRoot(0x0)/[...] | - File Name | \\ \"\\EFI\\grub\\grubx64.efi\" Afterwards set \"Linux\" in the Boot Sequence to the top.","title":"Modify UEFI"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#post-installation-configuration","text":"","title":"Post installation configuration"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-useful-services","text":"1 2 pacman -S acpid dbus avahi cups cronie systemctl enable acpid avahi-daemon org.cups.cupsd.service cronie","title":"Install useful services"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#get-graphics-card-and-x-working","text":"","title":"Get graphics card and X working"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-graphic-card-tools","text":"1 sudo pacman -S bbswitch bumblebee primus lib32-primus Use libglvnd as libgl provider. Enable the bumblebee service. 1 sudo systemctl enable bumblebeed.service","title":"Install graphic card tools"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#graphics-card-driversutils","text":"1 2 yay -Sy yay -S nvidia nvidia-utils lib32-nvidia-utils","title":"Graphics card drivers/utils"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#get-my-dot-files","text":"Clone my dotfiles. 1 2 3 4 5 6 7 8 9 10 11 12 sh -c \" $( curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh ) \" sudo pacman -Sy sudo pacman -S python-pip cd ~ git clone --recurse https://github.com/shokinn/.files.git ~/.files cd .files git remote -v git remote set-url origin git@github.com:shokinn/.files.git pip install --user -r dotdrop/requirements.txt alias dotdrop = 'eval $(grep -v \"^#\" ~/.files/.env.public) ~/.files/dotdrop.sh' dotdrop install git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k","title":"Get my dot files"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#powertop","text":"","title":"Powertop"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#optimize-power-comsumption","text":"Run the following command to calibrate your power consumption: 1 sudo powertop --calibrate Note Your screen will turn several times black and keep black for a couple minutes! Don't worry :)","title":"Optimize power comsumption"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#make-powertop-optimazations-permanent","text":"/etc/systemd/system/powertop.service : 1 2 3 4 5 6 7 8 9 10 11 cat <<EOF | sudo tee /etc/systemd/system/powertop.service [Unit] Description=PowerTOP auto tune [Service] Type=oneshot ExecStart=/usr/sbin/powertop --auto-tune [Install] WantedBy=multi-user.target EOF 1 2 3 sudo systemctl daemon-reload sudo systemctl start powertop.service sudo systemctl enable powertop.service","title":"Make powertop optimazations permanent"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-packages_1","text":"","title":"Install packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-audio-packages","text":"1 2 3 sudo pacman -S \\ alsa-utils \\ alsa-oss","title":"Install audio packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#install-various-packages","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo pacman -S \\ exfat-utils \\ openssh \\ net-tools \\ libsecret \\ gnome-keyring \\ libgnome-keyring \\ mc \\ htop \\ linux-headers \\ wireguard-dkms \\ wireguard-tools yay -S tldr","title":"Install various packages"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#enable-ssh-agent-serive","text":"1 2 3 systemctl --user daemon-reload systemctl --user enable ssh-agent.service systemctl --user start ssh-agent.service","title":"Enable SSH-Agent Serive"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_base/#todo","text":"Crypto fixen Use an Hardware device for 2 nd Factor authentication Maybe use TOTP as 2 nd Factor?","title":"TODO"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_bspwm_in_xfce/","text":"Arch Linux Dell XPS 15 (9560) - bspwm in xfce (Desktop) \u00b6 Install Desktop \u00b6 Install xfce4 \u00b6 1 2 3 4 5 6 sudo pacman -Syu sudo pacman -S xorg-server xorg-xinit lspci | grep VGA sudo pacman -S xf86-video-intel sudo localectl set-x11-keymap de pc105 nodeadkeys sudo pacman -S xfce4 xfce4-goodies human-icon-theme Start xfce with: 1 startx The .xinitrc should already be fine because I installed my dot-files. Enable/Start NetworkManager \u00b6 1 2 systemctl enable NetworkManager.service systemctl start NetworkManager.service Install xscreensaver \u00b6 Install xscreensaver-aerial theme and download the 1080p videos to disk. 1 2 yay -S xscreensaver-aerial && \\ sudo mkdir /opt/ATV4 Add download script and download the Videos for offline use: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 sudo touch /opt/ATV4/download.sh && \\ cat << EOF | sudo tee /opt/ATV4/download.sh && \\ sudo chmod +x /opt/ATV4/download.sh && \\ cd /opt/ATV4 && \\ sudo ./download.sh #!/bin/sh # run this from /opt/ATV4 which you created and assigned 755 premissions manually _url1=\"http://a1.v2.phobos.apple.com.edgesuite.net/us/r1000/000/Features/atv/AutumnResources/videos/\" _url3=\"http://sylvan.apple.com/Aerials/2x/Videos/\" for i in b2-1.mov b5-1.mov b6-1.mov comp_GL_G010_C006_v08_6Mbps.mov b1-1.mov \\ b2-2.mov b4-1.mov b6-2.mov b7-1.mov b8-1.mov b1-2.mov b3-1.mov b5-2.mov \\ b6-3.mov b1-3.mov b2-3.mov b3-2.mov b4-2.mov b7-2.mov b1-4.mov b2-4.mov \\ b3-3.mov b4-3.mov b5-3.mov b6-4.mov b7-3.mov b8-2.mov b8-3.mov b9-2.mov \\ b9-3.mov b10-3.mov; do wget \"\\$_url1/\\$i\" chmod 644 \\$(pwd)/\\$i done for i in comp_CH_C007_C011_PSNK_v02_SDR_PS_FINAL_20180709_SDR_2K_HEVC.mov \\ comp_CH_C002_C005_PSNK_v05_SDR_PS_FINAL_20180709_SDR_2K_HEVC.mov \\ comp_CH_C007_C004_PSNK_v02_SDR_PS_FINAL_20180709_SDR_2K_HEVC.mov \\ DB_D008_C010_2K_SDR_HEVC.mov DB_D001_C001_2K_SDR_HEVC.mov \\ DB_D011_C010_2K_SDR_HEVC.mov DB_D002_C003_2K_SDR_HEVC.mov \\ DB_D001_C005_2K_SDR_HEVC.mov DB_D011_C009_2K_SDR_HEVC.mov \\ GL_G004_C010_2K_SDR_HEVC.mov GL_G002_C002_2K_SDR_HEVC.mov \\ HK_B005_C011_2K_SDR_HEVC.mov HK_H004_C010_2K_SDR_HEVC.mov \\ HK_H004_C013_2K_SDR_HEVC.mov HK_H004_C001_2K_SDR_HEVC.mov \\ HK_H004_C008_2K_SDR_HEVC.mov \\ comp_GMT312_162NC_139M_1041_AFRICA_NIGHT_v14_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_A103_C002_0205DG_v12_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_GMT306_139NC_139J_3066_CALI_TO_VEGAS_v07_SDR_FINAL_22062018_SDR_4K_HEVC.mov \\ comp_A108_C001_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT308_139K_142NC_CARIBBEAN_DAY_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT329_113NC_396B_1105_CHINA_v04_SDR_FINAL_20180706_F900F2700_SDR_2K_HEVC.mov \\ comp_A083_C002_1130KZ_v04_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_GMT329_117NC_401C_1037_IRELAND_TO_ASIA_v48_SDR_PS_FINAL_20180725_F0F6300_SDR_2K_HEVC.mov \\ comp_GMT026_363A_103NC_E1027_KOREA_JAPAN_NIGHT_v17_SDR_FINAL_25062018_SDR_2K_HEVC.mov \\ comp_A105_C003_0212CT_FLARE_v10_SDR_PS_FINAL_20180711_SDR_2K_HEVC.mov \\ comp_A009_C001_010181A_v09_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_A114_C001_0305OT_v10_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_A001_C004_1207W5_v23_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ LA_A006_C008_2K_SDR_HEVC.mov LA_A009_C009_2K_SDR_HEVC.mov LA_A008_C004_2K_SDR_HEVC.mov \\ comp_LA_A006_C004_v01_SDR_FINAL_PS_20180730_SDR_2K_HEVC.mov LA_A005_C009_2K_SDR_HEVC.mov \\ LA_A011_C003_2K_SDR_HEVC.mov; do wget \"\\$_url3/\\$i\" chmod 644 \\$(pwd)/\\$i done EOF Run xscreensaver-demo and close it afterwards. This will create a .xscreensaver configuration file in your home directory. Edit ~/.xscreensaver to add support for it to see this script. Look for the line that beings with \"programs\" and simply add the following to the file: 1 2 \"ATV4-1080\" atv4-1080 -root \\n\\ \"ATV4-4k\" atv4-4k -root \\n\\ Install login manager \u00b6 Install sddm: 1 2 3 4 5 6 7 sudo pacman -S gst-libav \\ phonon-qt5-gstreamer \\ gst-plugins-good \\ qt5 \\ plasma \\ sddm yay -S sddm-config-editor-git Install Aerial theme: 1 sudo git clone https://github.com/3ximus/aerial-sddm-theme.git /usr/share/sddm/themes/aerial-sddm-theme Use local files for videos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 cat << EOF > /tmp/create_playlists.sh && \\ sudo /bin/sh /tmp/create_playlists.sh #!/bin/sh path_vid='/opt/ATV4' path_playlist='/usr/share/sddm/themes/aerial-sddm-theme/playlists' echo \"\" > \\$path_playlist/day.m3u for i in b1-1.mov b1-3.mov b2-1.mov b2-2.mov b3-2.mov b3-3.mov b4-1.mov b4-2.mov \\ b5-1.mov b5-2.mov b6-1.mov b6-3.mov b7-1.mov b7-2.mov b8-2.mov b8-3.mov b9-1.mov \\ b9-3.mov b10-1.mov b10-3.mov comp_CH_C002_C005_PSNK_v05_SDR_PS_FINAL_20180709_SDR_2K_HE VC.mov \\ comp_CH_C007_C004_PSNK_v02_SDR_PS_FINAL_20180709_SDR_2K_HEVC.mov \\ comp_CH_C007_C011_PSNK_v02_SDR_PS_FINAL_20180709_SDR_2K_HEVC.mov comp_GL_G010_C006_v08_6Mbps.mov \\ comp_LA_A006_C004_v01_SDR_FINAL_PS_20180730_SDR_2K_HEVC.mov \\ DB_D001_C001_2K_SDR_HEVC.mov DB_D001_C005_2K_SDR_HEVC.mov DB_D002_C003_2K_SDR_HEVC.mov \\ DB_D008_C010_2K_SDR_HEVC.mov DB_D011_C009_2K_SDR_HEVC.mov DB_D011_C010_2K_SDR_HEVC.mov \\ GL_G002_C002_2K_SDR_HEVC.mov GL_G004_C010_2K_SDR_HEVC.mov HK_B005_C011_2K_SDR_HEVC.mov \\ HK_H004_C001_2K_SDR_HEVC.mov HK_H004_C008_2K_SDR_HEVC.mov HK_H004_C010_2K_SDR_HEVC.mov \\ HK_H004_C013_2K_SDR_HEVC.mov LA_A005_C009_2K_SDR_HEVC.mov LA_A006_C008_2K_SDR_HEVC.mov \\ LA_A008_C004_2K_SDR_HEVC.mov LA_A009_C009_2K_SDR_HEVC.mov \\ comp_A001_C004_1207W5_v23_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_A009_C001_010181A_v09_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_A083_C002_1130KZ_v04_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_A103_C002_0205DG_v12_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_A105_C003_0212CT_FLARE_v10_SDR_PS_FINAL_20180711_SDR_2K_HEVC.mov \\ comp_A108_C001_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_A114_C001_0305OT_v10_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT026_363A_103NC_E1027_KOREA_JAPAN_NIGHT_v17_SDR_FINAL_25062018_SDR_2K_HEVC.mov \\ comp_GMT306_139NC_139J_3066_CALI_TO_VEGAS_v07_SDR_FINAL_22062018_SDR_4K_HEVC.mov \\ comp_GMT308_139K_142NC_CARIBBEAN_DAY_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT312_162NC_139M_1041_AFRICA_NIGHT_v14_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_GMT329_113NC_396B_1105_CHINA_v04_SDR_FINAL_20180706_F900F2700_SDR_2K_HEVC.mov \\ comp_GMT329_117NC_401C_1037_IRELAND_TO_ASIA_v48_SDR_PS_FINAL_20180725_F0F6300_SDR_2K_HEVC.mov ; do echo \"\\$path_vid/\\$i\" >> \\$ path_playlist/day.m3u done echo \"\" > \\$ path_playlist/night.m3u for i in b1-2.mov b1-4.mov b2-3.mov b2-4.mov b3-1.mov b4-2.mov b5-3.mov \\ b6-2.mov b6-4.mov b7-3.mov b10-4.mov b9-2.mov b10-2.mov b8-1.mov \\ LA_A011_C003_2K_SDR_HEVC.mov \\ comp_A001_C004_1207W5_v23_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_A009_C001_010181A_v09_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_A083_C002_1130KZ_v04_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_A103_C002_0205DG_v12_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_A105_C003_0212CT_FLARE_v10_SDR_PS_FINAL_20180711_SDR_2K_HEVC.mov \\ comp_A108_C001_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_A114_C001_0305OT_v10_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT026_363A_103NC_E1027_KOREA_JAPAN_NIGHT_v17_SDR_FINAL_25062018_SDR_2K_HEVC.mov \\ comp_GMT306_139NC_139J_3066_CALI_TO_VEGAS_v07_SDR_FINAL_22062018_SDR_4K_HEVC.mov \\ comp_GMT308_139K_142NC_CARIBBEAN_DAY_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT312_162NC_139M_1041_AFRICA_NIGHT_v14_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_GMT329_113NC_396B_1105_CHINA_v04_SDR_FINAL_20180706_F900F2700_SDR_2K_HEVC.mov \\ comp_GMT329_117NC_401C_1037_IRELAND_TO_ASIA_v48_SDR_PS_FINAL_20180725_F0F6300_SDR_2K_HEVC.mov ; do echo \"\\$path_vid/\\$i\" >> \\$ path_playlist/night.m3u done TODO \u00b6 Audio (Mic) Get external Microphones working! Fix audio controls in xfce Screensaver Add screenlock command shortcut","title":"Arch Linux Dell XPS 15 (9560) - bspwm in xfce (Desktop)"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_bspwm_in_xfce/#arch-linux-dell-xps-15-9560-bspwm-in-xfce-desktop","text":"","title":"Arch Linux Dell XPS 15 (9560) - bspwm in xfce (Desktop)"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_bspwm_in_xfce/#install-desktop","text":"","title":"Install Desktop"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_bspwm_in_xfce/#install-xfce4","text":"1 2 3 4 5 6 sudo pacman -Syu sudo pacman -S xorg-server xorg-xinit lspci | grep VGA sudo pacman -S xf86-video-intel sudo localectl set-x11-keymap de pc105 nodeadkeys sudo pacman -S xfce4 xfce4-goodies human-icon-theme Start xfce with: 1 startx The .xinitrc should already be fine because I installed my dot-files.","title":"Install xfce4"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_bspwm_in_xfce/#enablestart-networkmanager","text":"1 2 systemctl enable NetworkManager.service systemctl start NetworkManager.service","title":"Enable/Start NetworkManager"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_bspwm_in_xfce/#install-xscreensaver","text":"Install xscreensaver-aerial theme and download the 1080p videos to disk. 1 2 yay -S xscreensaver-aerial && \\ sudo mkdir /opt/ATV4 Add download script and download the Videos for offline use: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 sudo touch /opt/ATV4/download.sh && \\ cat << EOF | sudo tee /opt/ATV4/download.sh && \\ sudo chmod +x /opt/ATV4/download.sh && \\ cd /opt/ATV4 && \\ sudo ./download.sh #!/bin/sh # run this from /opt/ATV4 which you created and assigned 755 premissions manually _url1=\"http://a1.v2.phobos.apple.com.edgesuite.net/us/r1000/000/Features/atv/AutumnResources/videos/\" _url3=\"http://sylvan.apple.com/Aerials/2x/Videos/\" for i in b2-1.mov b5-1.mov b6-1.mov comp_GL_G010_C006_v08_6Mbps.mov b1-1.mov \\ b2-2.mov b4-1.mov b6-2.mov b7-1.mov b8-1.mov b1-2.mov b3-1.mov b5-2.mov \\ b6-3.mov b1-3.mov b2-3.mov b3-2.mov b4-2.mov b7-2.mov b1-4.mov b2-4.mov \\ b3-3.mov b4-3.mov b5-3.mov b6-4.mov b7-3.mov b8-2.mov b8-3.mov b9-2.mov \\ b9-3.mov b10-3.mov; do wget \"\\$_url1/\\$i\" chmod 644 \\$(pwd)/\\$i done for i in comp_CH_C007_C011_PSNK_v02_SDR_PS_FINAL_20180709_SDR_2K_HEVC.mov \\ comp_CH_C002_C005_PSNK_v05_SDR_PS_FINAL_20180709_SDR_2K_HEVC.mov \\ comp_CH_C007_C004_PSNK_v02_SDR_PS_FINAL_20180709_SDR_2K_HEVC.mov \\ DB_D008_C010_2K_SDR_HEVC.mov DB_D001_C001_2K_SDR_HEVC.mov \\ DB_D011_C010_2K_SDR_HEVC.mov DB_D002_C003_2K_SDR_HEVC.mov \\ DB_D001_C005_2K_SDR_HEVC.mov DB_D011_C009_2K_SDR_HEVC.mov \\ GL_G004_C010_2K_SDR_HEVC.mov GL_G002_C002_2K_SDR_HEVC.mov \\ HK_B005_C011_2K_SDR_HEVC.mov HK_H004_C010_2K_SDR_HEVC.mov \\ HK_H004_C013_2K_SDR_HEVC.mov HK_H004_C001_2K_SDR_HEVC.mov \\ HK_H004_C008_2K_SDR_HEVC.mov \\ comp_GMT312_162NC_139M_1041_AFRICA_NIGHT_v14_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_A103_C002_0205DG_v12_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_GMT306_139NC_139J_3066_CALI_TO_VEGAS_v07_SDR_FINAL_22062018_SDR_4K_HEVC.mov \\ comp_A108_C001_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT308_139K_142NC_CARIBBEAN_DAY_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT329_113NC_396B_1105_CHINA_v04_SDR_FINAL_20180706_F900F2700_SDR_2K_HEVC.mov \\ comp_A083_C002_1130KZ_v04_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_GMT329_117NC_401C_1037_IRELAND_TO_ASIA_v48_SDR_PS_FINAL_20180725_F0F6300_SDR_2K_HEVC.mov \\ comp_GMT026_363A_103NC_E1027_KOREA_JAPAN_NIGHT_v17_SDR_FINAL_25062018_SDR_2K_HEVC.mov \\ comp_A105_C003_0212CT_FLARE_v10_SDR_PS_FINAL_20180711_SDR_2K_HEVC.mov \\ comp_A009_C001_010181A_v09_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_A114_C001_0305OT_v10_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_A001_C004_1207W5_v23_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ LA_A006_C008_2K_SDR_HEVC.mov LA_A009_C009_2K_SDR_HEVC.mov LA_A008_C004_2K_SDR_HEVC.mov \\ comp_LA_A006_C004_v01_SDR_FINAL_PS_20180730_SDR_2K_HEVC.mov LA_A005_C009_2K_SDR_HEVC.mov \\ LA_A011_C003_2K_SDR_HEVC.mov; do wget \"\\$_url3/\\$i\" chmod 644 \\$(pwd)/\\$i done EOF Run xscreensaver-demo and close it afterwards. This will create a .xscreensaver configuration file in your home directory. Edit ~/.xscreensaver to add support for it to see this script. Look for the line that beings with \"programs\" and simply add the following to the file: 1 2 \"ATV4-1080\" atv4-1080 -root \\n\\ \"ATV4-4k\" atv4-4k -root \\n\\","title":"Install xscreensaver"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_bspwm_in_xfce/#install-login-manager","text":"Install sddm: 1 2 3 4 5 6 7 sudo pacman -S gst-libav \\ phonon-qt5-gstreamer \\ gst-plugins-good \\ qt5 \\ plasma \\ sddm yay -S sddm-config-editor-git Install Aerial theme: 1 sudo git clone https://github.com/3ximus/aerial-sddm-theme.git /usr/share/sddm/themes/aerial-sddm-theme Use local files for videos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 cat << EOF > /tmp/create_playlists.sh && \\ sudo /bin/sh /tmp/create_playlists.sh #!/bin/sh path_vid='/opt/ATV4' path_playlist='/usr/share/sddm/themes/aerial-sddm-theme/playlists' echo \"\" > \\$path_playlist/day.m3u for i in b1-1.mov b1-3.mov b2-1.mov b2-2.mov b3-2.mov b3-3.mov b4-1.mov b4-2.mov \\ b5-1.mov b5-2.mov b6-1.mov b6-3.mov b7-1.mov b7-2.mov b8-2.mov b8-3.mov b9-1.mov \\ b9-3.mov b10-1.mov b10-3.mov comp_CH_C002_C005_PSNK_v05_SDR_PS_FINAL_20180709_SDR_2K_HE VC.mov \\ comp_CH_C007_C004_PSNK_v02_SDR_PS_FINAL_20180709_SDR_2K_HEVC.mov \\ comp_CH_C007_C011_PSNK_v02_SDR_PS_FINAL_20180709_SDR_2K_HEVC.mov comp_GL_G010_C006_v08_6Mbps.mov \\ comp_LA_A006_C004_v01_SDR_FINAL_PS_20180730_SDR_2K_HEVC.mov \\ DB_D001_C001_2K_SDR_HEVC.mov DB_D001_C005_2K_SDR_HEVC.mov DB_D002_C003_2K_SDR_HEVC.mov \\ DB_D008_C010_2K_SDR_HEVC.mov DB_D011_C009_2K_SDR_HEVC.mov DB_D011_C010_2K_SDR_HEVC.mov \\ GL_G002_C002_2K_SDR_HEVC.mov GL_G004_C010_2K_SDR_HEVC.mov HK_B005_C011_2K_SDR_HEVC.mov \\ HK_H004_C001_2K_SDR_HEVC.mov HK_H004_C008_2K_SDR_HEVC.mov HK_H004_C010_2K_SDR_HEVC.mov \\ HK_H004_C013_2K_SDR_HEVC.mov LA_A005_C009_2K_SDR_HEVC.mov LA_A006_C008_2K_SDR_HEVC.mov \\ LA_A008_C004_2K_SDR_HEVC.mov LA_A009_C009_2K_SDR_HEVC.mov \\ comp_A001_C004_1207W5_v23_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_A009_C001_010181A_v09_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_A083_C002_1130KZ_v04_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_A103_C002_0205DG_v12_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_A105_C003_0212CT_FLARE_v10_SDR_PS_FINAL_20180711_SDR_2K_HEVC.mov \\ comp_A108_C001_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_A114_C001_0305OT_v10_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT026_363A_103NC_E1027_KOREA_JAPAN_NIGHT_v17_SDR_FINAL_25062018_SDR_2K_HEVC.mov \\ comp_GMT306_139NC_139J_3066_CALI_TO_VEGAS_v07_SDR_FINAL_22062018_SDR_4K_HEVC.mov \\ comp_GMT308_139K_142NC_CARIBBEAN_DAY_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT312_162NC_139M_1041_AFRICA_NIGHT_v14_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_GMT329_113NC_396B_1105_CHINA_v04_SDR_FINAL_20180706_F900F2700_SDR_2K_HEVC.mov \\ comp_GMT329_117NC_401C_1037_IRELAND_TO_ASIA_v48_SDR_PS_FINAL_20180725_F0F6300_SDR_2K_HEVC.mov ; do echo \"\\$path_vid/\\$i\" >> \\$ path_playlist/day.m3u done echo \"\" > \\$ path_playlist/night.m3u for i in b1-2.mov b1-4.mov b2-3.mov b2-4.mov b3-1.mov b4-2.mov b5-3.mov \\ b6-2.mov b6-4.mov b7-3.mov b10-4.mov b9-2.mov b10-2.mov b8-1.mov \\ LA_A011_C003_2K_SDR_HEVC.mov \\ comp_A001_C004_1207W5_v23_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_A009_C001_010181A_v09_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_A083_C002_1130KZ_v04_SDR_PS_FINAL_20180725_SDR_2K_HEVC.mov \\ comp_A103_C002_0205DG_v12_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_A105_C003_0212CT_FLARE_v10_SDR_PS_FINAL_20180711_SDR_2K_HEVC.mov \\ comp_A108_C001_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_A114_C001_0305OT_v10_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT026_363A_103NC_E1027_KOREA_JAPAN_NIGHT_v17_SDR_FINAL_25062018_SDR_2K_HEVC.mov \\ comp_GMT306_139NC_139J_3066_CALI_TO_VEGAS_v07_SDR_FINAL_22062018_SDR_4K_HEVC.mov \\ comp_GMT308_139K_142NC_CARIBBEAN_DAY_v09_SDR_FINAL_22062018_SDR_2K_HEVC.mov \\ comp_GMT312_162NC_139M_1041_AFRICA_NIGHT_v14_SDR_FINAL_20180706_SDR_2K_HEVC.mov \\ comp_GMT329_113NC_396B_1105_CHINA_v04_SDR_FINAL_20180706_F900F2700_SDR_2K_HEVC.mov \\ comp_GMT329_117NC_401C_1037_IRELAND_TO_ASIA_v48_SDR_PS_FINAL_20180725_F0F6300_SDR_2K_HEVC.mov ; do echo \"\\$path_vid/\\$i\" >> \\$ path_playlist/night.m3u done","title":"Install login manager"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_bspwm_in_xfce/#todo","text":"Audio (Mic) Get external Microphones working! Fix audio controls in xfce Screensaver Add screenlock command shortcut","title":"TODO"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_budgie_desktop/","text":"Arch Linux Dell XPS 15 (9560) - Budgie (Desktop) \u00b6 Install Desktop \u00b6 Install X \u00b6 1 2 3 4 sudo pacman -Syu sudo pacman -S xorg \\ xorg-server \\ xorg-xinit Install Budgie \u00b6 1 2 3 sudo pacman -S gnome \\ gnome-screensaver \\ budgie-desktop Install xscreensaver \u00b6 1 2 sudo pacman -S xscreensaver-aerial \\ xscreensaver-aerial-videos Install login manager \u00b6 Install sddm: 1 2 3 4 5 sudo pacman -S gst-libav \\ phonon-qt5-gstreamer \\ gst-plugins-good \\ sddm yay -S sddm-config-editor-git Install Aerial theme: 1 sudo git clone https://github.com/3ximus/aerial-sddm-theme.git /usr/share/sddm/themes/aerial-sddm-theme # TODO use local videos from the xscreensaver-arial-videos package Post Config \u00b6 Enable network manager \u00b6 1 sudo systemctl enable NetworkManager Install packages \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 sudo pacman -S firefox \\ keepass \\ keepass-plugin-keeagent \\ inkscape \\ gimp \\ vlc \\ qt4 \\ thunderbird \\ pinentry \\ gpa \\ nemo \\ nemo-fileroller \\ nemo-image-converter \\ nemo-preview \\ nemo-seahorse \\ nemo-share gpg --recv-keys --keyserver sks-keyservers.net 0xDB1187B9DD5F693B yay -S keepass-plugin-rpc \\ keepass-plugin-haveibeenpwned \\ keepass-plugin-http \\ keepass2-plugin-tray-icon \\ nextcloud-client \\ franz-bin \\ thunderbird-enigmail \\ gtkhash-nemo \\ nemo-compare","title":"Arch Linux Dell XPS 15 (9560) - Budgie (Desktop)"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_budgie_desktop/#arch-linux-dell-xps-15-9560-budgie-desktop","text":"","title":"Arch Linux Dell XPS 15 (9560) - Budgie (Desktop)"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_budgie_desktop/#install-desktop","text":"","title":"Install Desktop"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_budgie_desktop/#install-x","text":"1 2 3 4 sudo pacman -Syu sudo pacman -S xorg \\ xorg-server \\ xorg-xinit","title":"Install X"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_budgie_desktop/#install-budgie","text":"1 2 3 sudo pacman -S gnome \\ gnome-screensaver \\ budgie-desktop","title":"Install Budgie"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_budgie_desktop/#install-xscreensaver","text":"1 2 sudo pacman -S xscreensaver-aerial \\ xscreensaver-aerial-videos","title":"Install xscreensaver"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_budgie_desktop/#install-login-manager","text":"Install sddm: 1 2 3 4 5 sudo pacman -S gst-libav \\ phonon-qt5-gstreamer \\ gst-plugins-good \\ sddm yay -S sddm-config-editor-git Install Aerial theme: 1 sudo git clone https://github.com/3ximus/aerial-sddm-theme.git /usr/share/sddm/themes/aerial-sddm-theme # TODO use local videos from the xscreensaver-arial-videos package","title":"Install login manager"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_budgie_desktop/#post-config","text":"","title":"Post Config"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_budgie_desktop/#enable-network-manager","text":"1 sudo systemctl enable NetworkManager","title":"Enable network manager"},{"location":"hardware/dell_xps_15_9560/dell_xps_15_9560_arch_linux_budgie_desktop/#install-packages","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 sudo pacman -S firefox \\ keepass \\ keepass-plugin-keeagent \\ inkscape \\ gimp \\ vlc \\ qt4 \\ thunderbird \\ pinentry \\ gpa \\ nemo \\ nemo-fileroller \\ nemo-image-converter \\ nemo-preview \\ nemo-seahorse \\ nemo-share gpg --recv-keys --keyserver sks-keyservers.net 0xDB1187B9DD5F693B yay -S keepass-plugin-rpc \\ keepass-plugin-haveibeenpwned \\ keepass-plugin-http \\ keepass2-plugin-tray-icon \\ nextcloud-client \\ franz-bin \\ thunderbird-enigmail \\ gtkhash-nemo \\ nemo-compare","title":"Install packages"},{"location":"hardware/raspbeery_pi/gsh_raspi_cam/","text":"GSH RaspiCam \u00b6 Dies ist mein worklog f\u00fcr unsere mobilen GSH Cams mit den Raspberry Camera v2 Modulen. Kamera anschlie\u00dfen \u00b6 Das kleine Kamera-Modul wird direkt an die CSI-Schnittstelle (Camera Serial Interface) des Raspberry Pi angeschlossen. Die CSI-Schnittstelle des Raspberry Pi befindet sich zwischen dem HDMI-Anschluss und Audioausgang. \u00a9 Datenreise.de Quelle: Datenreise.de Ausrichtung CIS Kabel Die blaue Markierung wird in Richtung Ethernet-Anschluss eingesteckt! Kamera aktivieren \u00b6 \u00d6ffne das Raspberry Konfigurationsmen\u00fc: 1 sudo raspi-config 5 Interfacing Options P1 Camera Enable the camera Warning Den Raspberry im Anschluss neu starten! Kamera testen \u00b6 Wir nehmen zum test ein Bild auf: 1 raspistill -o test.jpg V4L Kernel mods laden und persistieren \u00b6 1 2 3 4 5 6 7 8 9 10 sudo modprobe v4l2_common && \\ sudo modprobe bcm2835-v4l2 && \\ echo \"\" && \\ ls /dev/video* && \\ echo \"If there is NO '/dev/videoX' device hit CTRL-C to abort...\" && \\ read -n1 -s && \\ echo \"v4l2_common\" | sudo tee -a /etc/modules && \\ echo \"bcm2835-v4l2\" | sudo tee -a /etc/modules && \\ echo \"\" && \\ cat /etc/modules Installiere Docker \u00b6 1 2 3 curl -sSL https://get.docker.com | sudo sh && \\ sudo usermod pi -aG docker && \\ sudo reboot Starte den Streaming Docker Container \u00b6 Baue einen streaming Server Docker Container Achtung Es ist nicht notwendig den Docker Container zu bauen! Der Container ist auf DockerHub verf\u00fcgbar. https://hub.docker.com/r/shokinn/gsh-streaming/ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 DOCKER_USER_ID = \"shokinn\" && \\ DOCKER_IMG_NAME = \"gsh-streaming\" && \\ DOCKER_TAG = \"2018-10-5\" && \\ mkdir -p ~/workspace/streaming ; \\ cd ~/workspace/streaming/ && \\ cat << EOF > ~/workspace/streaming/Dockerfile && \\ cat << EOF > ~/workspace/streaming/entry.sh && \\ chmod +x ~/workspace/streaming/entry.sh && \\ docker build -t $DOCKER_USER_ID / $DOCKER_IMG_NAME : $DOCKER_TAG . && \\ docker image rm alexellis2/streaming:07-05-2018 && \\ echo \"Press CTRL+C to avoid uploading to Docker Hub...\" && \\ read -n1 -s && \\ docker login && \\ docker push $DOCKER_USER_ID / $DOCKER_IMG_NAME ; \\ docker logout FROM alexellis2/streaming:07-05-2018 COPY entry.sh entry.sh EOF #!/bin/bash echo \"Width: \\$1\" echo \"Height: \\$2\" echo \"raspivid fps: \\$3\" echo \"KBit/s: \\$4\" echo \"URL: \\$5\" width = \\$ 1 height = \\$ 2 rfps = \\$ 3 bitrate = \\$ ( expr \\$ 4 \\* 1000 ) url = \\$ 5 raspivid -o - -t 0 -w \\$ width -h \\$ height -fps \\$ rfps -b \\$ bitrate -g 40 | ffmpeg -re -ar 44100 -ac 2 -acodec pcm_s16le -f s16le -ac 2 -i /dev/zero -f h264 -i pipe:0 -c:v copy -c:a aac -ab 128k -g 40 -strict experimental -f flv \\$ url EOF Debugging 1 2 3 4 5 6 7 8 9 10 11 12 read -p \"Stream width: \" width && \\ read -p \"Stream height: \" height && \\ echo \"For Camera specs see here: https://picamera.readthedocs.io/en/release-1.13/fov.html#sensor-modes\" ; \\ read -p \"raspivid FPS (40-90@720p; 1/10-30fps@1080p): \" rfps && \\ read -p \"Streaming bitrate (KBit/s): \" bitrate && \\ read -p \"Enter Streaming Endpoint: \" url && \\ docker run \\ --privileged \\ --name streaming \\ -it \\ shokinn/gsh-streaming:2018-10-5 \\ $width $height $rfps $bitrate \" $url \" 1 2 3 4 5 6 7 8 9 10 11 12 13 read -p \"Stream width: \" width && \\ read -p \"Stream height: \" height && \\ echo \"For Camera specs see here: https://picamera.readthedocs.io/en/release-1.13/fov.html#sensor-modes\" ; \\ read -p \"raspivid FPS (40-90@720p; 1/10-30fps@1080p): \" rfps && \\ read -p \"Streaming bitrate (KBit/s): \" bitrate && \\ read -p \"Enter Streaming Endpoint: \" url && \\ docker run \\ --privileged \\ --name streaming \\ -d \\ --restart = always \\ shokinn/gsh-streaming:2018-10-5 \\ $width $height $rfps $bitrate \" $url \"","title":"GSH RaspiCam"},{"location":"hardware/raspbeery_pi/gsh_raspi_cam/#gsh-raspicam","text":"Dies ist mein worklog f\u00fcr unsere mobilen GSH Cams mit den Raspberry Camera v2 Modulen.","title":"GSH RaspiCam"},{"location":"hardware/raspbeery_pi/gsh_raspi_cam/#kamera-anschlieen","text":"Das kleine Kamera-Modul wird direkt an die CSI-Schnittstelle (Camera Serial Interface) des Raspberry Pi angeschlossen. Die CSI-Schnittstelle des Raspberry Pi befindet sich zwischen dem HDMI-Anschluss und Audioausgang. \u00a9 Datenreise.de Quelle: Datenreise.de Ausrichtung CIS Kabel Die blaue Markierung wird in Richtung Ethernet-Anschluss eingesteckt!","title":"Kamera anschlie\u00dfen"},{"location":"hardware/raspbeery_pi/gsh_raspi_cam/#kamera-aktivieren","text":"\u00d6ffne das Raspberry Konfigurationsmen\u00fc: 1 sudo raspi-config 5 Interfacing Options P1 Camera Enable the camera Warning Den Raspberry im Anschluss neu starten!","title":"Kamera aktivieren"},{"location":"hardware/raspbeery_pi/gsh_raspi_cam/#kamera-testen","text":"Wir nehmen zum test ein Bild auf: 1 raspistill -o test.jpg","title":"Kamera testen"},{"location":"hardware/raspbeery_pi/gsh_raspi_cam/#v4l-kernel-mods-laden-und-persistieren","text":"1 2 3 4 5 6 7 8 9 10 sudo modprobe v4l2_common && \\ sudo modprobe bcm2835-v4l2 && \\ echo \"\" && \\ ls /dev/video* && \\ echo \"If there is NO '/dev/videoX' device hit CTRL-C to abort...\" && \\ read -n1 -s && \\ echo \"v4l2_common\" | sudo tee -a /etc/modules && \\ echo \"bcm2835-v4l2\" | sudo tee -a /etc/modules && \\ echo \"\" && \\ cat /etc/modules","title":"V4L Kernel mods laden und persistieren"},{"location":"hardware/raspbeery_pi/gsh_raspi_cam/#installiere-docker","text":"1 2 3 curl -sSL https://get.docker.com | sudo sh && \\ sudo usermod pi -aG docker && \\ sudo reboot","title":"Installiere Docker"},{"location":"hardware/raspbeery_pi/gsh_raspi_cam/#starte-den-streaming-docker-container","text":"Baue einen streaming Server Docker Container Achtung Es ist nicht notwendig den Docker Container zu bauen! Der Container ist auf DockerHub verf\u00fcgbar. https://hub.docker.com/r/shokinn/gsh-streaming/ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 DOCKER_USER_ID = \"shokinn\" && \\ DOCKER_IMG_NAME = \"gsh-streaming\" && \\ DOCKER_TAG = \"2018-10-5\" && \\ mkdir -p ~/workspace/streaming ; \\ cd ~/workspace/streaming/ && \\ cat << EOF > ~/workspace/streaming/Dockerfile && \\ cat << EOF > ~/workspace/streaming/entry.sh && \\ chmod +x ~/workspace/streaming/entry.sh && \\ docker build -t $DOCKER_USER_ID / $DOCKER_IMG_NAME : $DOCKER_TAG . && \\ docker image rm alexellis2/streaming:07-05-2018 && \\ echo \"Press CTRL+C to avoid uploading to Docker Hub...\" && \\ read -n1 -s && \\ docker login && \\ docker push $DOCKER_USER_ID / $DOCKER_IMG_NAME ; \\ docker logout FROM alexellis2/streaming:07-05-2018 COPY entry.sh entry.sh EOF #!/bin/bash echo \"Width: \\$1\" echo \"Height: \\$2\" echo \"raspivid fps: \\$3\" echo \"KBit/s: \\$4\" echo \"URL: \\$5\" width = \\$ 1 height = \\$ 2 rfps = \\$ 3 bitrate = \\$ ( expr \\$ 4 \\* 1000 ) url = \\$ 5 raspivid -o - -t 0 -w \\$ width -h \\$ height -fps \\$ rfps -b \\$ bitrate -g 40 | ffmpeg -re -ar 44100 -ac 2 -acodec pcm_s16le -f s16le -ac 2 -i /dev/zero -f h264 -i pipe:0 -c:v copy -c:a aac -ab 128k -g 40 -strict experimental -f flv \\$ url EOF Debugging 1 2 3 4 5 6 7 8 9 10 11 12 read -p \"Stream width: \" width && \\ read -p \"Stream height: \" height && \\ echo \"For Camera specs see here: https://picamera.readthedocs.io/en/release-1.13/fov.html#sensor-modes\" ; \\ read -p \"raspivid FPS (40-90@720p; 1/10-30fps@1080p): \" rfps && \\ read -p \"Streaming bitrate (KBit/s): \" bitrate && \\ read -p \"Enter Streaming Endpoint: \" url && \\ docker run \\ --privileged \\ --name streaming \\ -it \\ shokinn/gsh-streaming:2018-10-5 \\ $width $height $rfps $bitrate \" $url \" 1 2 3 4 5 6 7 8 9 10 11 12 13 read -p \"Stream width: \" width && \\ read -p \"Stream height: \" height && \\ echo \"For Camera specs see here: https://picamera.readthedocs.io/en/release-1.13/fov.html#sensor-modes\" ; \\ read -p \"raspivid FPS (40-90@720p; 1/10-30fps@1080p): \" rfps && \\ read -p \"Streaming bitrate (KBit/s): \" bitrate && \\ read -p \"Enter Streaming Endpoint: \" url && \\ docker run \\ --privileged \\ --name streaming \\ -d \\ --restart = always \\ shokinn/gsh-streaming:2018-10-5 \\ $width $height $rfps $bitrate \" $url \"","title":"Starte den Streaming Docker Container"},{"location":"kb/bmon/","text":"bmon 4.0 \u00b6 Bmon monitors and helps you debug networks. It captures network related statistics and presents it in human friendly way. You can also interact with bmon through curses or through scripting. Installation \u00b6 1 sudo apt install -y bmon","title":"bmon 4.0"},{"location":"kb/bmon/#bmon-40","text":"Bmon monitors and helps you debug networks. It captures network related statistics and presents it in human friendly way. You can also interact with bmon through curses or through scripting.","title":"bmon 4.0"},{"location":"kb/bmon/#installation","text":"1 sudo apt install -y bmon","title":"Installation"},{"location":"kb/change_tty/","text":"Change TTY \u00b6 With Keybindings \u00b6 From X to TTY \u00b6 Use: CTRL + ALT + F{1..n} From TTY to X \u00b6 Use: ALT + F{F1..n} With a shell command on a TTY \u00b6 Use: 1 chvt 1 ..n","title":"How to change to TTYn"},{"location":"kb/change_tty/#change-tty","text":"","title":"Change TTY"},{"location":"kb/change_tty/#with-keybindings","text":"","title":"With Keybindings"},{"location":"kb/change_tty/#from-x-to-tty","text":"Use: CTRL + ALT + F{1..n}","title":"From X to TTY"},{"location":"kb/change_tty/#from-tty-to-x","text":"Use: ALT + F{F1..n}","title":"From TTY to X"},{"location":"kb/change_tty/#with-a-shell-command-on-a-tty","text":"Use: 1 chvt 1 ..n","title":"With a shell command on a TTY"},{"location":"kb/mkdocs/","text":"MkDocs \u00b6 Setup local dev environment \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 MKDOCS_VERSION = \"1.0.4\" && \\ MKINCLUDE_VERSION = \"0.5.1\" && \\ PYMD_EXT_VERSION = \"5.0\" && \\ PYGMENTS_VERSION = \"2.2.0\" && \\ MATERIAL_VERSION = \"3.0.4\" && \\ sudo apt update && \\ sudo apt install -y python3 python3-pip && \\ pip3 install --user --upgrade pip && \\ pip3 install --user \\ mkdocs == ${ MKDOCS_VERSION } \\ markdown-include == ${ MKINCLUDE_VERSION } \\ pymdown-extensions == ${ PYMD_EXT_VERSION } \\ pygments == ${ PYGMENTS_VERSION } \\ mkdocs-material == ${ MATERIAL_VERSION }","title":"MkDocs testing environment"},{"location":"kb/mkdocs/#mkdocs","text":"","title":"MkDocs"},{"location":"kb/mkdocs/#setup-local-dev-environment","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 MKDOCS_VERSION = \"1.0.4\" && \\ MKINCLUDE_VERSION = \"0.5.1\" && \\ PYMD_EXT_VERSION = \"5.0\" && \\ PYGMENTS_VERSION = \"2.2.0\" && \\ MATERIAL_VERSION = \"3.0.4\" && \\ sudo apt update && \\ sudo apt install -y python3 python3-pip && \\ pip3 install --user --upgrade pip && \\ pip3 install --user \\ mkdocs == ${ MKDOCS_VERSION } \\ markdown-include == ${ MKINCLUDE_VERSION } \\ pymdown-extensions == ${ PYMD_EXT_VERSION } \\ pygments == ${ PYGMENTS_VERSION } \\ mkdocs-material == ${ MATERIAL_VERSION }","title":"Setup local dev environment"},{"location":"software/desktop/cemu_zelda_setup/","text":"Cemu Zelda - Breath of the Wild setup \u00b6 This is my documentation how to setup Cemu to play Zelda - Breath of the Wild . Overview \u00b6 Cemu v.1.11.1","title":"Cemu Zelda - Breath of the Wild setup"},{"location":"software/desktop/cemu_zelda_setup/#cemu-zelda-breath-of-the-wild-setup","text":"This is my documentation how to setup Cemu to play Zelda - Breath of the Wild .","title":"Cemu Zelda - Breath of the Wild setup"},{"location":"software/desktop/cemu_zelda_setup/#overview","text":"Cemu v.1.11.1","title":"Overview"},{"location":"software/desktop/playonlinux/","text":"PlayOnLinux \u00b6 Install \u00b6 1 # sudo pacman -S playonlinux Register Browser protocol in Firefox \u00b6 open Confoguration with about:config Right Click -> New -> Boolean: network.protocol-handler.expose.playonlinux Value: false Click on the \"Thy this update\" button Choose the following application: /usr/share/playonlinux/bash/playonlinux-url_handler","title":"PlayOnLinux"},{"location":"software/desktop/playonlinux/#playonlinux","text":"","title":"PlayOnLinux"},{"location":"software/desktop/playonlinux/#install","text":"1 # sudo pacman -S playonlinux","title":"Install"},{"location":"software/desktop/playonlinux/#register-browser-protocol-in-firefox","text":"open Confoguration with about:config Right Click -> New -> Boolean: network.protocol-handler.expose.playonlinux Value: false Click on the \"Thy this update\" button Choose the following application: /usr/share/playonlinux/bash/playonlinux-url_handler","title":"Register Browser protocol in Firefox"},{"location":"software/server/concourse/","text":"Concourse \u00b6 OS: Ubuntu 16.04 LTS Initial Server setup \u00b6 Update System \u00b6 1 apt update && apt full-upgrade -y Edit .bashrc \u00b6 /root/.bashrc / /etc/skel/.bashrc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi Make vim colored with dark background settinfs \u00b6 1 2 3 4 5 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF Create a new user user \u00b6 1 2 3 4 5 6 7 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/ Change the SSH deamon to allow only SSH-keys \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF Delete root's authorized_keys file \u00b6 Attention Please check before if you can login to the user user with your ssh-key! 1 rm ~/.ssh/authorized_keys Important Log out and re login as user ! Install base packages \u00b6 1 2 3 4 5 6 7 8 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop Fix locale \u00b6 1 2 3 4 5 6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF PostgreSQL \u00b6 Install \u00b6 1 sudo apt install -y postgresql postgresql-contrib Configure \u00b6 Once the database software is installed, we will create a dedicated PostgreSQL user named concourse to manage the Concourse assets within the database system. To create this user, we will use sudo to act as the postgres system user, which has admin access to the database system: 1 sudo -u postgres createuser concourse By default, Concourse attempts to connect to a database called atc . Concourse calls its main web and API hub the \"ATC\", which stands for \"air traffic control\". We can create this database and assign ownership to the concourse database user to provide appropriate access: 1 sudo -u postgres createdb --owner = concourse atc Backup \u00b6 Concourse \u00b6 Install \u00b6 Download and install Concourse and fly: 1 2 3 4 5 6 sudo wget -O /root/concourse_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/concourse_updater.sh && \\ sudo chmod u+x /root/concourse_updater.sh && \\ sudo /root/concourse_updater.sh ; \\ sudo wget -O /root/fly_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/fly_updater.sh && \\ sudo chmod u+x /root/fly_updater.sh && \\ sudo /root/fly_updater.sh Configure \u00b6 Next, we can start to put together the configuration and keys that Concourse will use to start up. Before we begin, create a configuration directory where we can keep all of the relevant files: 1 sudo mkdir /etc/concourse Creating the Key Files \u00b6 Concourse is composed of a few related components that all need to be able to communicate securely with one another. The ATC is the main hub that handles web and API requests and coordinates pipelines. Workers manage containers to run the CI/CD tasks defined in the pipeline. The TSA is a custom SSH server that securely registers workers with the ATC. Even though we will be running all of these components on a single server, the worker and TSA expect to communicate securely. To satisfy this expectation, we will create three sets of keys: a key pair for the TSA component a key pair for the worker a session signing key pair used to sign tokens for user sessions and TSA to ATC communication 1 2 3 sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/tsa_host_key ; \\ sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/worker_key ; \\ sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/session_signing_key If we check in the concourse directory, we can see that three public and three private keys are now available: 1 ls -l /etc/concourse Output: 1 2 3 4 5 6 7 total 24 -rw------- 1 root root 1679 May 11 17:19 session_signing_key -rw-r--r-- 1 root root 394 May 11 17:19 session_signing_key.pub -rw------- 1 root root 1679 May 11 17:19 tsa_host_key -rw-r--r-- 1 root root 394 May 11 17:19 tsa_host_key.pub -rw------- 1 root root 1675 May 11 17:19 worker_key -rw-r--r-- 1 root root 394 May 11 17:19 worker_key.pub The TSA will decide which workers are authorized to connect to the system by checking an authorized key file. We need to pre-populate the authorized keys file with the worker's public key that we generated so that it can connect successfully. Since this is our only worker, we can just copy the file over: 1 sudo cp /etc/concourse/worker_key.pub /etc/concourse/authorized_worker_keys Now that we have the key files and an initial file for authorized workers, we can create the files that will define our Concourse configuration. Creating the Environment Configuration Files \u00b6 The Concourse binary does not read from a configuration file natively. However, it can take configuration values from environment variables passed in when the process starts. In a moment, we will be creating systemd unit files to define and manage our Concourse services. The unit files can read environment variables from a file and pass them to the process as it starts. We will create a file that defines the variables for the Concourse web process, which start the ATC and TSA components, and another file for the Concourse worker process. Create a file for the web process. Inside, we will define the environment variables needed by the ATC and TSA components. Each variable begins with CONCOURSE_ . To start, we will define some static values that we don't need to modify. These variables will define the location of the private TSA and session keys, the file defining the authorized workers, and the PostgreSQL socket location: 1 2 3 4 5 6 7 cat << EOF | sudo tee /etc/concourse/web_environment # These values can be used as-is CONCOURSE_SESSION_SIGNING_KEY=/etc/concourse/session_signing_key CONCOURSE_TSA_HOST_KEY=/etc/concourse/tsa_host_key CONCOURSE_TSA_AUTHORIZED_KEYS=/etc/concourse/authorized_worker_keys CONCOURSE_POSTGRES_SOCKET=/var/run/postgresql EOF Next, we'll set some variables that will need to be changed to match your environment. The CONCOURSE_EXTERNAL_URL defines the IP address and port that the service will bind to. Set this to your server's public IP address and port 8080. We will also set a username and password for the main team, which functions as the Concourse administrative group. You can select any username and password you'd like here. You can change the admin credentials at any time by modifying these values and restarting the service: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 while true ; do \\ unset pw ; \\ unset pw_confirm ; \\ read -s -p \"Enter admin user password: \" pw ; echo \"\" && \\ read -s -p \"Confirm admin user password: \" pw_confirm ; echo \"\" && \\ if [[ \" $pw \" == \" $pw_confirm \" ]] ; then \\ break ; \\ else \\ echo \"Your passwords don't match. Try again!\" ; \\ echo \"\" ; \\ fi ; \\ done ; \\ read -p \"Enter the public URL for concours (without http(s)://): \" ext_url ; \\ cat << EOF | sudo tee -a /etc/concourse/web_environment; \\ unset pw; \\ unset pw_confirm; \\ unset ext_url # Change these values to match your environment CONCOURSE_BASIC_AUTH_USERNAME=admin CONCOURSE_BASIC_AUTH_PASSWORD=$pw CONCOURSE_EXTERNAL_URL=https://$ext_url CONCOURSE_BIND_IP=127.0.0.1 EOF Next, create an environment file for the worker process. Inside, we will define the locations of the worker's private key, the TSA's public key, and the directory where the worker will store its files. We will also set the address where the TSA can be reached, which will be the localhost in our case. You can use the values below without modification: 1 2 3 4 5 6 7 cat << EOF | sudo tee /etc/concourse/worker_environment # These values can be used as-is CONCOURSE_WORK_DIR=/var/lib/concourse CONCOURSE_TSA_WORKER_PRIVATE_KEY=/etc/concourse/worker_key CONCOURSE_TSA_PUBLIC_KEY=/etc/concourse/tsa_host_key.pub CONCOURSE_TSA_HOST=127.0.0.1:2222 EOF Creating a Dedicated System User and Adjusting Permissions \u00b6 Before we move on, we should create a dedicated Linux user to run the Concourse web process. This will allow us to start the web-facing service with limited privileges. Because of the way that PostgreSQL handles authentication by default, it is important that the username match the PostgreSQL username we created earlier. Create a system user and group called concourse by typing: 1 sudo adduser --system --group concourse We can give the new user ownership over the /etc/concourse directory and its contents by typing: 1 sudo chown -R concourse:concourse /etc/concourse The environment files contain some sensitive data like the administrative username and password for the CI server. Adjust the permissions of the environment files so that regular users cannot read or modify the values in those files: 1 sudo chmod 600 /etc/concourse/*_environment Our configuration assets are now owned by the concourse system user with limited privileges for other users. Create Systemd Unit Files for the Web and Worker Processes \u00b6 We are now ready to define the Concourse CI unit files that will start and manage the application processes. We will create one file for the web process that handles the TSA and ATC components and one file for the worker process that handles containers for pipeline tasks. Creating the Concourse Web Unit File \u00b6 Start by creating a concourse-web.service file within the /etc/systemd/system file with the following content: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 cat << EOF | sudo tee /etc/systemd/system/concourse-web.service [Unit] Description=Concourse CI web process (ATC and TSA) After=postgresql.service [Service] User=concourse Restart=on-failure EnvironmentFile=/etc/concourse/web_environment ExecStart=/usr/local/bin/concourse web [Install] WantedBy=multi-user.target EOF The first section of the file sets the unit description for the web process and indicates that this unit should be started after the PostgreSQL unit when deciding on ordering. The [Service] section defines the way that the service will be run. We will run the service as the concourse user we configured earlier and we tell systemd to automatically restart the service if it fails, which can be useful if the process dies from memory constraints or similar issues. We load the web_environment file we defined earlier to establish the environment and we start the actual process by calling concourse web . The [Install] section tells systemd how to tie the unit to the system start order if we configure the service to start at boot. Creating the Concourse Worker Unit File \u00b6 Next, create a similar file to define the worker process with the following content: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 cat << EOF | sudo tee /etc/systemd/system/concourse-worker.service [Unit] Description=Concourse CI worker process After=concourse-web.service [Service] User=root Restart=on-failure EnvironmentFile=/etc/concourse/worker_environment ExecStart=/usr/local/bin/concourse worker [Install] WantedBy=multi-user.target EOF This unit functions similarly to the concourse-web unit. This time, we tell system to start the worker process after the Concourse web process has been started. The worker process is run as the root user instead of concourse because it requires administrative privileges for container management. We load the worker_environment file and use the concourse worker command to start the process. Start and enable the Services \u00b6 Reload the deamon files, start the services: 1 2 3 sudo systemctl daemon-reload ; \\ sudo systemctl start concourse-web concourse-worker ; \\ sudo systemctl status concourse-web concourse-worker Check that both services read \"active (running)\" and that the log lines do not contain any obvious errors. Pay special attention to the web service to make sure that the log lines do not indicate problems connecting to the database. If the services started successfully, enable them so that they will start each time the server boots: 1 sudo systemctl enable concourse-web concourse-worker Check Access On the Command Line \u00b6 Now that the Concourse services is running, we should check that we have access. Checking Access On the Command Line \u00b6 First, let's check that we can access the Concourse service with the fly command line client. We have to log in using the administrative username and password that we configured in the /etc/concourse/web_environment file using the login subcommand. A single fly binary can be used to contact and manage multiple Concourse servers, so the command uses a concept called \"targets\" as an alias for different servers. We will call our target \"local\" to log into the local Concourse server: 1 fly -t local login -c http://127.0.0.1:8080 You will be prompted for the username and password for the main team, which we set in the web_environments file. After entering your credentials, \"target saved\" should be displayed: 1 2 3 4 5 6 logging in to team 'main' username: admin password: target saved This indicates that we were able to log in successfully. While we are here, let's verify that the worker process was able to successfully register to the TSA component by typing: 1 fly -t local workers Output: 1 2 name containers platform tags team state version concourse-server 0 linux none none running 2.1 The fly command is used to configure pipelines and manage the Concourse CI service. The fly help command provides information about additional commands. Nginx \u00b6 Install \u00b6 Install all needed Packages for nginx tasks: 1 2 3 4 5 6 7 8 9 10 11 12 13 sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx Configure \u00b6 Delete default entry \u00b6 1 sudo rm /etc/nginx/sites-enabled/default Add ssl_params \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF General HTTP to HTTPS redirector \u00b6 This nginx entry will rewrite all traffic from HTTP to HTTPS. 1 2 3 4 5 6 7 8 9 10 read -r -d '' read_tmp<< \"EOF\" server { \\t listen 80 default_server ; \\t listen [ :: ] :80 default_server ; \\t server_name _ ; \\t return 301 https:// $host$request_uri ; } EOF echo -e \" $read_tmp \" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf Concourse \u00b6 Add server directive for Concourse: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-ci.pphg.tech.conf && \\ sudo ln -s ../sites-available/10-ci.pphg.tech.conf /etc/nginx/sites-enabled/10-ci.pphg.tech.conf upstream concourse { \\tserver\\t\\t127.0.0.1:8080; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tci.pphg.tech; \\taccess_log\\t/var/log/nginx/ci.pphg.tech_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/ci.pphg.tech_error.log warn; \\tlocation / { \\t\\tinclude\\t\\t\\tproxy_params; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_read_timeout\\t90; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"upgrade\"; \\t\\tproxy_pass\\t\\thttp://concourse; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if config is ok: 1 sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. 1 2 3 sudo certbot --nginx -d ci.pphg.tech && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/ci.pphg.tech/chain.pem;' /etc/nginx/sites-available/10-ci.pphg.tech.conf && \\ sudo systemctl reload nginx.service Add cronjob for renewing cetificates \u00b6 sudo crontab -e : 1 0 */12 * * * /usr/local/bin/certbot renew Security \u00b6 iptables \u00b6 Explanation iptables rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on `eth0` iptables -t filter -A INPUT -i eth0 -j DROP ; # Allow output on `eth0` iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed iptables rules: 1 2 3 4 5 6 7 sudo iptables -A OUTPUT -o lo -j ACCEPT ; \\ sudo iptables -A INPUT -i lo -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -j DROP ; \\ sudo iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed ip6tables rules: 1 2 3 4 5 6 7 sudo ip6tables -A OUTPUT -o lo -j ACCEPT ; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -j DROP ; \\ sudo ip6tables -t filter -A OUTPUT -o eth0 -j ACCEPT Persist iptables rules: 1 2 3 sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"Concourse"},{"location":"software/server/concourse/#concourse","text":"OS: Ubuntu 16.04 LTS","title":"Concourse"},{"location":"software/server/concourse/#initial-server-setup","text":"","title":"Initial Server setup"},{"location":"software/server/concourse/#update-system","text":"1 apt update && apt full-upgrade -y","title":"Update System"},{"location":"software/server/concourse/#edit-bashrc","text":"/root/.bashrc / /etc/skel/.bashrc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi","title":"Edit .bashrc"},{"location":"software/server/concourse/#make-vim-colored-with-dark-background-settinfs","text":"1 2 3 4 5 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Make vim colored with dark background settinfs"},{"location":"software/server/concourse/#create-a-new-user-user","text":"1 2 3 4 5 6 7 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/","title":"Create a new user user"},{"location":"software/server/concourse/#change-the-ssh-deamon-to-allow-only-ssh-keys","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF","title":"Change the SSH deamon to allow only SSH-keys"},{"location":"software/server/concourse/#delete-roots-authorized_keys-file","text":"Attention Please check before if you can login to the user user with your ssh-key! 1 rm ~/.ssh/authorized_keys Important Log out and re login as user !","title":"Delete root's authorized_keys file"},{"location":"software/server/concourse/#install-base-packages","text":"1 2 3 4 5 6 7 8 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop","title":"Install base packages"},{"location":"software/server/concourse/#fix-locale","text":"1 2 3 4 5 6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF","title":"Fix locale"},{"location":"software/server/concourse/#postgresql","text":"","title":"PostgreSQL"},{"location":"software/server/concourse/#install","text":"1 sudo apt install -y postgresql postgresql-contrib","title":"Install"},{"location":"software/server/concourse/#configure","text":"Once the database software is installed, we will create a dedicated PostgreSQL user named concourse to manage the Concourse assets within the database system. To create this user, we will use sudo to act as the postgres system user, which has admin access to the database system: 1 sudo -u postgres createuser concourse By default, Concourse attempts to connect to a database called atc . Concourse calls its main web and API hub the \"ATC\", which stands for \"air traffic control\". We can create this database and assign ownership to the concourse database user to provide appropriate access: 1 sudo -u postgres createdb --owner = concourse atc","title":"Configure"},{"location":"software/server/concourse/#backup","text":"","title":"Backup"},{"location":"software/server/concourse/#concourse_1","text":"","title":"Concourse"},{"location":"software/server/concourse/#install_1","text":"Download and install Concourse and fly: 1 2 3 4 5 6 sudo wget -O /root/concourse_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/concourse_updater.sh && \\ sudo chmod u+x /root/concourse_updater.sh && \\ sudo /root/concourse_updater.sh ; \\ sudo wget -O /root/fly_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/fly_updater.sh && \\ sudo chmod u+x /root/fly_updater.sh && \\ sudo /root/fly_updater.sh","title":"Install"},{"location":"software/server/concourse/#configure_1","text":"Next, we can start to put together the configuration and keys that Concourse will use to start up. Before we begin, create a configuration directory where we can keep all of the relevant files: 1 sudo mkdir /etc/concourse","title":"Configure"},{"location":"software/server/concourse/#creating-the-key-files","text":"Concourse is composed of a few related components that all need to be able to communicate securely with one another. The ATC is the main hub that handles web and API requests and coordinates pipelines. Workers manage containers to run the CI/CD tasks defined in the pipeline. The TSA is a custom SSH server that securely registers workers with the ATC. Even though we will be running all of these components on a single server, the worker and TSA expect to communicate securely. To satisfy this expectation, we will create three sets of keys: a key pair for the TSA component a key pair for the worker a session signing key pair used to sign tokens for user sessions and TSA to ATC communication 1 2 3 sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/tsa_host_key ; \\ sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/worker_key ; \\ sudo ssh-keygen -t rsa -q -N '' -f /etc/concourse/session_signing_key If we check in the concourse directory, we can see that three public and three private keys are now available: 1 ls -l /etc/concourse Output: 1 2 3 4 5 6 7 total 24 -rw------- 1 root root 1679 May 11 17:19 session_signing_key -rw-r--r-- 1 root root 394 May 11 17:19 session_signing_key.pub -rw------- 1 root root 1679 May 11 17:19 tsa_host_key -rw-r--r-- 1 root root 394 May 11 17:19 tsa_host_key.pub -rw------- 1 root root 1675 May 11 17:19 worker_key -rw-r--r-- 1 root root 394 May 11 17:19 worker_key.pub The TSA will decide which workers are authorized to connect to the system by checking an authorized key file. We need to pre-populate the authorized keys file with the worker's public key that we generated so that it can connect successfully. Since this is our only worker, we can just copy the file over: 1 sudo cp /etc/concourse/worker_key.pub /etc/concourse/authorized_worker_keys Now that we have the key files and an initial file for authorized workers, we can create the files that will define our Concourse configuration.","title":"Creating the Key Files"},{"location":"software/server/concourse/#creating-the-environment-configuration-files","text":"The Concourse binary does not read from a configuration file natively. However, it can take configuration values from environment variables passed in when the process starts. In a moment, we will be creating systemd unit files to define and manage our Concourse services. The unit files can read environment variables from a file and pass them to the process as it starts. We will create a file that defines the variables for the Concourse web process, which start the ATC and TSA components, and another file for the Concourse worker process. Create a file for the web process. Inside, we will define the environment variables needed by the ATC and TSA components. Each variable begins with CONCOURSE_ . To start, we will define some static values that we don't need to modify. These variables will define the location of the private TSA and session keys, the file defining the authorized workers, and the PostgreSQL socket location: 1 2 3 4 5 6 7 cat << EOF | sudo tee /etc/concourse/web_environment # These values can be used as-is CONCOURSE_SESSION_SIGNING_KEY=/etc/concourse/session_signing_key CONCOURSE_TSA_HOST_KEY=/etc/concourse/tsa_host_key CONCOURSE_TSA_AUTHORIZED_KEYS=/etc/concourse/authorized_worker_keys CONCOURSE_POSTGRES_SOCKET=/var/run/postgresql EOF Next, we'll set some variables that will need to be changed to match your environment. The CONCOURSE_EXTERNAL_URL defines the IP address and port that the service will bind to. Set this to your server's public IP address and port 8080. We will also set a username and password for the main team, which functions as the Concourse administrative group. You can select any username and password you'd like here. You can change the admin credentials at any time by modifying these values and restarting the service: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 while true ; do \\ unset pw ; \\ unset pw_confirm ; \\ read -s -p \"Enter admin user password: \" pw ; echo \"\" && \\ read -s -p \"Confirm admin user password: \" pw_confirm ; echo \"\" && \\ if [[ \" $pw \" == \" $pw_confirm \" ]] ; then \\ break ; \\ else \\ echo \"Your passwords don't match. Try again!\" ; \\ echo \"\" ; \\ fi ; \\ done ; \\ read -p \"Enter the public URL for concours (without http(s)://): \" ext_url ; \\ cat << EOF | sudo tee -a /etc/concourse/web_environment; \\ unset pw; \\ unset pw_confirm; \\ unset ext_url # Change these values to match your environment CONCOURSE_BASIC_AUTH_USERNAME=admin CONCOURSE_BASIC_AUTH_PASSWORD=$pw CONCOURSE_EXTERNAL_URL=https://$ext_url CONCOURSE_BIND_IP=127.0.0.1 EOF Next, create an environment file for the worker process. Inside, we will define the locations of the worker's private key, the TSA's public key, and the directory where the worker will store its files. We will also set the address where the TSA can be reached, which will be the localhost in our case. You can use the values below without modification: 1 2 3 4 5 6 7 cat << EOF | sudo tee /etc/concourse/worker_environment # These values can be used as-is CONCOURSE_WORK_DIR=/var/lib/concourse CONCOURSE_TSA_WORKER_PRIVATE_KEY=/etc/concourse/worker_key CONCOURSE_TSA_PUBLIC_KEY=/etc/concourse/tsa_host_key.pub CONCOURSE_TSA_HOST=127.0.0.1:2222 EOF","title":"Creating the Environment Configuration Files"},{"location":"software/server/concourse/#creating-a-dedicated-system-user-and-adjusting-permissions","text":"Before we move on, we should create a dedicated Linux user to run the Concourse web process. This will allow us to start the web-facing service with limited privileges. Because of the way that PostgreSQL handles authentication by default, it is important that the username match the PostgreSQL username we created earlier. Create a system user and group called concourse by typing: 1 sudo adduser --system --group concourse We can give the new user ownership over the /etc/concourse directory and its contents by typing: 1 sudo chown -R concourse:concourse /etc/concourse The environment files contain some sensitive data like the administrative username and password for the CI server. Adjust the permissions of the environment files so that regular users cannot read or modify the values in those files: 1 sudo chmod 600 /etc/concourse/*_environment Our configuration assets are now owned by the concourse system user with limited privileges for other users.","title":"Creating a Dedicated System User and Adjusting Permissions"},{"location":"software/server/concourse/#create-systemd-unit-files-for-the-web-and-worker-processes","text":"We are now ready to define the Concourse CI unit files that will start and manage the application processes. We will create one file for the web process that handles the TSA and ATC components and one file for the worker process that handles containers for pipeline tasks.","title":"Create Systemd Unit Files for the Web and Worker Processes"},{"location":"software/server/concourse/#creating-the-concourse-web-unit-file","text":"Start by creating a concourse-web.service file within the /etc/systemd/system file with the following content: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 cat << EOF | sudo tee /etc/systemd/system/concourse-web.service [Unit] Description=Concourse CI web process (ATC and TSA) After=postgresql.service [Service] User=concourse Restart=on-failure EnvironmentFile=/etc/concourse/web_environment ExecStart=/usr/local/bin/concourse web [Install] WantedBy=multi-user.target EOF The first section of the file sets the unit description for the web process and indicates that this unit should be started after the PostgreSQL unit when deciding on ordering. The [Service] section defines the way that the service will be run. We will run the service as the concourse user we configured earlier and we tell systemd to automatically restart the service if it fails, which can be useful if the process dies from memory constraints or similar issues. We load the web_environment file we defined earlier to establish the environment and we start the actual process by calling concourse web . The [Install] section tells systemd how to tie the unit to the system start order if we configure the service to start at boot.","title":"Creating the Concourse Web Unit File"},{"location":"software/server/concourse/#creating-the-concourse-worker-unit-file","text":"Next, create a similar file to define the worker process with the following content: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 cat << EOF | sudo tee /etc/systemd/system/concourse-worker.service [Unit] Description=Concourse CI worker process After=concourse-web.service [Service] User=root Restart=on-failure EnvironmentFile=/etc/concourse/worker_environment ExecStart=/usr/local/bin/concourse worker [Install] WantedBy=multi-user.target EOF This unit functions similarly to the concourse-web unit. This time, we tell system to start the worker process after the Concourse web process has been started. The worker process is run as the root user instead of concourse because it requires administrative privileges for container management. We load the worker_environment file and use the concourse worker command to start the process.","title":"Creating the Concourse Worker Unit File"},{"location":"software/server/concourse/#start-and-enable-the-services","text":"Reload the deamon files, start the services: 1 2 3 sudo systemctl daemon-reload ; \\ sudo systemctl start concourse-web concourse-worker ; \\ sudo systemctl status concourse-web concourse-worker Check that both services read \"active (running)\" and that the log lines do not contain any obvious errors. Pay special attention to the web service to make sure that the log lines do not indicate problems connecting to the database. If the services started successfully, enable them so that they will start each time the server boots: 1 sudo systemctl enable concourse-web concourse-worker","title":"Start and enable the Services"},{"location":"software/server/concourse/#check-access-on-the-command-line","text":"Now that the Concourse services is running, we should check that we have access.","title":"Check Access On the Command Line"},{"location":"software/server/concourse/#checking-access-on-the-command-line","text":"First, let's check that we can access the Concourse service with the fly command line client. We have to log in using the administrative username and password that we configured in the /etc/concourse/web_environment file using the login subcommand. A single fly binary can be used to contact and manage multiple Concourse servers, so the command uses a concept called \"targets\" as an alias for different servers. We will call our target \"local\" to log into the local Concourse server: 1 fly -t local login -c http://127.0.0.1:8080 You will be prompted for the username and password for the main team, which we set in the web_environments file. After entering your credentials, \"target saved\" should be displayed: 1 2 3 4 5 6 logging in to team 'main' username: admin password: target saved This indicates that we were able to log in successfully. While we are here, let's verify that the worker process was able to successfully register to the TSA component by typing: 1 fly -t local workers Output: 1 2 name containers platform tags team state version concourse-server 0 linux none none running 2.1 The fly command is used to configure pipelines and manage the Concourse CI service. The fly help command provides information about additional commands.","title":"Checking Access On the Command Line"},{"location":"software/server/concourse/#nginx","text":"","title":"Nginx"},{"location":"software/server/concourse/#install_2","text":"Install all needed Packages for nginx tasks: 1 2 3 4 5 6 7 8 9 10 11 12 13 sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx","title":"Install"},{"location":"software/server/concourse/#configure_2","text":"","title":"Configure"},{"location":"software/server/concourse/#delete-default-entry","text":"1 sudo rm /etc/nginx/sites-enabled/default","title":"Delete default entry"},{"location":"software/server/concourse/#add-ssl_params","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF","title":"Add ssl_params"},{"location":"software/server/concourse/#general-http-to-https-redirector","text":"This nginx entry will rewrite all traffic from HTTP to HTTPS. 1 2 3 4 5 6 7 8 9 10 read -r -d '' read_tmp<< \"EOF\" server { \\t listen 80 default_server ; \\t listen [ :: ] :80 default_server ; \\t server_name _ ; \\t return 301 https:// $host$request_uri ; } EOF echo -e \" $read_tmp \" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf","title":"General HTTP to HTTPS redirector"},{"location":"software/server/concourse/#concourse_2","text":"Add server directive for Concourse: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-ci.pphg.tech.conf && \\ sudo ln -s ../sites-available/10-ci.pphg.tech.conf /etc/nginx/sites-enabled/10-ci.pphg.tech.conf upstream concourse { \\tserver\\t\\t127.0.0.1:8080; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tci.pphg.tech; \\taccess_log\\t/var/log/nginx/ci.pphg.tech_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/ci.pphg.tech_error.log warn; \\tlocation / { \\t\\tinclude\\t\\t\\tproxy_params; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_read_timeout\\t90; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"upgrade\"; \\t\\tproxy_pass\\t\\thttp://concourse; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if config is ok: 1 sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. 1 2 3 sudo certbot --nginx -d ci.pphg.tech && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/ci.pphg.tech/chain.pem;' /etc/nginx/sites-available/10-ci.pphg.tech.conf && \\ sudo systemctl reload nginx.service","title":"Concourse"},{"location":"software/server/concourse/#add-cronjob-for-renewing-cetificates","text":"sudo crontab -e : 1 0 */12 * * * /usr/local/bin/certbot renew","title":"Add cronjob for renewing cetificates"},{"location":"software/server/concourse/#security","text":"","title":"Security"},{"location":"software/server/concourse/#iptables","text":"Explanation iptables rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on `eth0` iptables -t filter -A INPUT -i eth0 -j DROP ; # Allow output on `eth0` iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed iptables rules: 1 2 3 4 5 6 7 sudo iptables -A OUTPUT -o lo -j ACCEPT ; \\ sudo iptables -A INPUT -i lo -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -j DROP ; \\ sudo iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed ip6tables rules: 1 2 3 4 5 6 7 sudo ip6tables -A OUTPUT -o lo -j ACCEPT ; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -j DROP ; \\ sudo ip6tables -t filter -A OUTPUT -o eth0 -j ACCEPT Persist iptables rules: 1 2 3 sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"iptables"},{"location":"software/server/concourse_dockerized/","text":"Concourse dockerized \u00b6 OS: Ubuntu 18.04 LTS (Bionic Beaver) Initial Server setup \u00b6 Update System \u00b6 1 apt update && apt full-upgrade -y Make vim colored with dark background settings \u00b6 1 2 3 4 5 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF Fix locale \u00b6 1 2 3 4 5 6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF Edit .bashrc \u00b6 /root/.bashrc / /etc/skel/.bashrc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \" $PS1 \" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL = ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE = 999999 HISTFILESIZE = 999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \" $( SHELL = /bin/sh lesspipe ) \" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \" $debian_chroot \" ] && [ -r /etc/debian_chroot ] ; then debian_chroot = $( cat /etc/debian_chroot ) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \" $TERM \" in xterm-color ) color_prompt = yes ;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt = yes if [ -n \" $force_color_prompt \" ] ; then if [ -x /usr/bin/tput ] && tput setaf 1 > & /dev/null ; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt = yes else color_prompt = fi fi if [ \" $color_prompt \" = yes ] ; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ] ; then PS1 = '${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1 = '${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1 = '${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \" $TERM \" in xterm* | rxvt* ) PS1 = \"\\[\\e]0; ${ debian_chroot :+( $debian_chroot ) } \\u@\\h: \\w\\a\\] $PS1 \" ;; * ) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ] ; then test -r ~/.dircolors && eval \" $( dircolors -b ~/.dircolors ) \" || eval \" $( dircolors -b ) \" alias ls = 'ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep = 'grep --color=auto' alias fgrep = 'fgrep --color=auto' alias egrep = 'egrep --color=auto' fi # some more ls aliases alias ll = 'ls -alF' alias la = 'ls -A' alias l = 'ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ] ; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi Create a new user user \u00b6 1 2 3 4 5 6 7 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/ Change the SSH deamon to allow only SSH-keys \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF Delete root's authorized_keys file \u00b6 Attention Please check before if you can login to the user user with your ssh-key! 1 rm ~/.ssh/authorized_keys Important Log out and re login as user ! Install base packages \u00b6 1 2 3 4 5 6 7 8 9 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ zip \\ unzip \\ unrar \\ screen \\ tmux \\ htop Docker \u00b6 Pre-requirements \u00b6 1 sudo apt install -y apt-transport-https ca-certificates curl software-properties-common Install Docker \u00b6 The following steps are shortened! Here is the full Guide to install docker on Ubuntu 18.04 (Bionic Beaver) https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04 1 2 3 4 5 6 7 8 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && \\ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" && \\ sudo apt update && \\ apt-cache policy docker-ce && \\ echo \"Verify that docker-ce will be installed from the docker repository instead of the ubuntu repo.\" && \\ read -p \"Press any key to continue or press CTRL-C to abort... \" -n1 -s && \\ sudo apt install -y docker-ce && \\ sudo systemctl status docker Create a new docker network for concourse \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 sudo docker network create \\ -d bridge \\ -o \"com.docker.network.bridge.name\" = \"docker1\" \\ -o \"com.docker.network.bridge.enable_ip_masquerade\" = true \\ -o \"com.docker.network.bridge.enable_icc\" = true \\ -o \"com.docker.network.bridge.host_binding_ipv4\" = \"0.0.0.0\" \\ -o \"com.docker.network.driver.mtu\" = \"1500\" \\ --scope = local \\ --subnet = 172 .23.0.0/16 \\ --ip-range = 172 .23.42.0/24 \\ --gateway = 172 .23.0.1 \\ concourse_net Install Portainer \u00b6 1 2 3 4 5 6 7 8 9 10 sudo docker volume create portainer_data && \\ sudo docker run \\ --name portainer \\ --volume /var/run/docker.sock:/var/run/docker.sock \\ --volume portainer_data:/data \\ --network concourse_net \\ --ip 172 .23.0.10 \\ --restart unless-stopped \\ --detach \\ portainer/portainer PostgreSQL \u00b6 Install \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 PSQL_CONCOURSE_USER = $( cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 ) && \\ PSQL_CONCOURSE_PW = $( cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 ) && \\ sudo docker volume create pgdata && \\ sudo docker run \\ --name concourse-db \\ --volume pgdata:/var/lib/postgresql/data \\ --network concourse_net \\ --hostname concourse-db \\ --ip 172 .23.1.10 \\ --restart unless-stopped \\ --env POSTGRES_USER = $PSQL_CONCOURSE_USER \\ --env POSTGRES_PASSWORD = $PSQL_CONCOURSE_PW \\ --env POSTGRES_DB = atc \\ --detach \\ postgres:10.4-alpine && \\ echo -e \"User:\\t\\t $PSQL_CONCOURSE_USER \" ; \\ echo -e \"Password:\\t $PSQL_CONCOURSE_PW \" Backup \u00b6 #TODO Concourse \u00b6 Pre-requirements \u00b6 Create a GitHub OAuth app for authentication: Follow this Guide: https://concourse-ci.org/install.html#github-auth-config Install Web interface \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 echo \"\" && \\ read -p \"Enter your GitHub client ID: \" GITHUB_CLIENT_ID && \\ while true ; do \\ set GITHUB_CLIENT_SECRET = \"\" ; \\ set GITHUB_CLIENT_SECRET_confirm = \"\" ; \\ read -s -p \"Enter your GitHub client secret: \" GITHUB_CLIENT_SECRET ; echo \"\" ; \\ read -s -p \"Reenter your GitHub client secret: \" GITHUB_CLIENT_SECRET_confirm ; echo \"\" ; \\ if [[ \" $GITHUB_CLIENT_SECRET \" == \" $GITHUB_CLIENT_SECRET_confirm \" ]] ; then \\ break ; \\ else \\ clear ; \\ echo \"Your secrets don't match! Please try again.\" ; \\ echo \"\" ; \\ fi ; \\ done ; \\ CONCOURSE_ADMIN_USER = admin && \\ CONCOURSE_ADMIN_PW = $( cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 ) && \\ CONCOUSE_WEB_IP = '172.23.1.11' && \\ ORG_NAME = \"mischaufen\" && \\ TEAM_NAME = \"main\" && \\ sudo docker volume create concourse-keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/tsa_host_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/tsa_host_key && \\ sudo touch /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/worker_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/worker_key && \\ sudo cat /var/lib/docker/volumes/concourse-keys/_data/worker_key.pub | sudo tee -a /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/session_signing_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/session_signing_key && \\ sudo docker run \\ --name concourse-web \\ --volume concourse-keys:/concourse-keys \\ --network concourse_net \\ --hostname concourse-web \\ --ip $CONCOUSE_WEB_IP \\ --privileged \\ --restart unless-stopped \\ --detach \\ concourse/concourse:4.2.1 web \\ --tsa-host-key = '/concourse-keys/tsa_host_key' \\ --tsa-authorized-keys = '/concourse-keys/authorized_worker_keys' \\ --tsa-session-signing-key = '/concourse-keys/session_signing_key' \\ --add-local-user = $CONCOURSE_ADMIN_USER : $CONCOURSE_ADMIN_PW \\ --main-team-local-user = $CONCOURSE_ADMIN_USER \\ --github-client-id = $GITHUB_CLIENT_ID \\ --github-client-secret = $GITHUB_CLIENT_SECRET \\ --main-team-github-team = $ORG_NAME : $TEAM_NAME \\ --postgres-user = $PSQL_CONCOURSE_USER \\ --postgres-password = $PSQL_CONCOURSE_PW \\ --postgres-host = $( sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-db ) \\ --postgres-port = 5432 \\ --bind-ip = $CONCOUSE_WEB_IP \\ --external-url = 'https://ci.mischaufen.de' && \\ echo -e \"User:\\t\\t $CONCOURSE_ADMIN_USER \" ; \\ echo -e \"Password:\\t $CONCOURSE_ADMIN_PW \" Install worker \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 CONCOURSE_WORKER_IP = 172 .23.1.12 && \\ sudo docker run \\ --name concourse-worker \\ --volume concourse-keys:/concourse-keys \\ --network concourse_net \\ --hostname concourse-worker \\ --ip $CONCOURSE_WORKER_IP \\ --privileged \\ --restart unless-stopped \\ --detach \\ concourse/concourse:4.2.1 worker \\ --tsa-host = $( sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web ) :2222 \\ --garden-dns-server = 1 .1.1.1 \\ --garden-dns-proxy-enable fly \u00b6 Install fly \u00b6 1 2 3 sudo wget -O /root/fly_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/fly_updater.sh && \\ sudo chmod u+x /root/fly_updater.sh && \\ sudo /root/fly_updater.sh Configure \u00b6 First, let's check that we can access the Concourse service with the fly command line client. We have to log in using the administrative username and password that we configured in the /etc/concourse/web_environment file using the login subcommand. A single fly binary can be used to contact and manage multiple Concourse servers, so the command uses a concept called \"targets\" as an alias for different servers. We will call our target \"local\" to log into the local Concourse server: 1 fly -t local login -c http:// $( sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web ) :8080 You will be prompted for going to http://172.23.1.11:8080/sky/login?redirect_uri=http://127.0.0.1:33277/auth/callback . Do the following instead: Add a port forwarding (on your local PC) from 8080 to 172.23.1.11:8080 and go to: http://127.0.0.1:8080/sky/login?redirect_uri=http://127.0.0.1:8080/sky/token Now copy/paste the token to your promt. This indicates that we were able to log in successfully. While we are here, let's verify that the worker process was able to successfully register to the TSA component by typing: 1 fly -t local workers Output: 1 2 name containers platform tags team state version concourse-server 0 linux none none running 2.1 The fly command is used to configure pipelines and manage the Concourse CI service. The fly help command provides information about additional commands. Nginx \u00b6 Install \u00b6 Install all needed Packages for nginx tasks: 1 2 3 4 5 6 7 8 9 10 11 12 13 sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx Configure \u00b6 Delete default entry \u00b6 1 sudo rm /etc/nginx/sites-enabled/default Add ssl_params \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF General HTTP to HTTPS redirector \u00b6 This nginx entry will rewrite all traffic from HTTP to HTTPS. 1 2 3 4 5 6 7 8 9 10 read -r -d '' read_tmp<< \"EOF\" server { \\t listen 80 default_server ; \\t listen [ :: ] :80 default_server ; \\t server_name _ ; \\t return 301 https:// $host$request_uri ; } EOF echo -e \" $read_tmp \" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf Portainer \u00b6 Add server directive for Portainer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 portainer_ip = $( sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" portainer ) ; \\ cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-portainer.ci.mischaufen.de.conf && \\ sudo ln -s ../sites-available/10-portainer.ci.mischaufen.de.conf /etc/nginx/sites-enabled/10-portainer.ci.mischaufen.de.conf server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tportainer.ci.mischaufen.de; \\taccess_log\\t/var/log/nginx/portainer.ci.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/portainer.ci.mischaufen.de_error.log warn; \\tlocation / { \\t\\tset \\$upstream_endpoint http://$portainer_ip:9000; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_set_header\\tConnection \"\"; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tadd_header\\t\\tX-Upstream \\$upstream_addr; \\t\\tproxy_pass\\t\\t\\$upstream_endpoint; \\t} \\tlocation /api/websocket/ { \\t\\tset \\$upstream_endpoint http://$portainer_ip:9000; \\t\\tproxy_buffering\\t\\toff; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"Upgrade\"; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Server \\$host; \\t\\tproxy_set_header\\tX-Forwarded-For \\$proxy_add_x_forwarded_for; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tadd_header\\t\\tX-Upstream \\$upstream_addr; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_pass\\t\\t\\$upstream_endpoint; \\t\\t# Need this for the console \\t\\tproxy_redirect\\t\\thttp://$portainer_ip:9000 \\$scheme://\\$host/; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. 1 2 3 sudo certbot --nginx -d portainer.ci.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/portainer.ci.mischaufen.de/chain.pem;' /etc/nginx/sites-available/10-portainer.ci.mischaufen.de.conf && \\ sudo systemctl reload nginx.service Concourse \u00b6 Add server directive for Concourse: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/11-ci.mischaufen.de.conf && \\ sudo ln -s ../sites-available/11-ci.mischaufen.de.conf /etc/nginx/sites-enabled/11-ci.mischaufen.de.conf upstream concourse { \\tserver\\t\\t$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web):8080; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tci.mischaufen.de; \\taccess_log\\t/var/log/nginx/ci.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/ci.mischaufen.de_error.log warn; \\tlocation / { \\t\\tinclude\\t\\t\\tproxy_params; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_read_timeout\\t90; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"upgrade\"; \\t\\tproxy_pass\\t\\thttp://concourse; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if config is ok: 1 sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. 1 2 3 sudo certbot --nginx -d ci.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/ci.mischaufen.de/chain.pem;' /etc/nginx/sites-available/11-ci.mischaufen.de.conf && \\ sudo systemctl reload nginx.service Add cronjob for renewing cetificates \u00b6 sudo crontab -e : 1 0 */12 * * * /usr/local/bin/certbot renew Security \u00b6 iptables \u00b6 Explanation iptables rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on `eth0` iptables -t filter -A INPUT -i eth0 -j DROP ; # Allow output on `eth0` iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed iptables rules: 1 2 3 4 5 6 7 8 sudo iptables -A OUTPUT -o lo -j ACCEPT ; \\ sudo iptables -A INPUT -i lo -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p icmp -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -j DROP ; \\ sudo iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed ip6tables rules: 1 2 3 4 5 6 7 8 sudo ip6tables -A OUTPUT -o lo -j ACCEPT ; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p ipv6-icmp -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -j DROP ; \\ sudo ip6tables -t filter -A OUTPUT -o eth0 -j ACCEPT Persist iptables rules: 1 2 3 sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"Concourse Dockerized"},{"location":"software/server/concourse_dockerized/#concourse-dockerized","text":"OS: Ubuntu 18.04 LTS (Bionic Beaver)","title":"Concourse dockerized"},{"location":"software/server/concourse_dockerized/#initial-server-setup","text":"","title":"Initial Server setup"},{"location":"software/server/concourse_dockerized/#update-system","text":"1 apt update && apt full-upgrade -y","title":"Update System"},{"location":"software/server/concourse_dockerized/#make-vim-colored-with-dark-background-settings","text":"1 2 3 4 5 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Make vim colored with dark background settings"},{"location":"software/server/concourse_dockerized/#fix-locale","text":"1 2 3 4 5 6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF","title":"Fix locale"},{"location":"software/server/concourse_dockerized/#edit-bashrc","text":"/root/.bashrc / /etc/skel/.bashrc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \" $PS1 \" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL = ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE = 999999 HISTFILESIZE = 999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \" $( SHELL = /bin/sh lesspipe ) \" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \" $debian_chroot \" ] && [ -r /etc/debian_chroot ] ; then debian_chroot = $( cat /etc/debian_chroot ) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \" $TERM \" in xterm-color ) color_prompt = yes ;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt = yes if [ -n \" $force_color_prompt \" ] ; then if [ -x /usr/bin/tput ] && tput setaf 1 > & /dev/null ; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt = yes else color_prompt = fi fi if [ \" $color_prompt \" = yes ] ; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ] ; then PS1 = '${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1 = '${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1 = '${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \" $TERM \" in xterm* | rxvt* ) PS1 = \"\\[\\e]0; ${ debian_chroot :+( $debian_chroot ) } \\u@\\h: \\w\\a\\] $PS1 \" ;; * ) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ] ; then test -r ~/.dircolors && eval \" $( dircolors -b ~/.dircolors ) \" || eval \" $( dircolors -b ) \" alias ls = 'ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep = 'grep --color=auto' alias fgrep = 'fgrep --color=auto' alias egrep = 'egrep --color=auto' fi # some more ls aliases alias ll = 'ls -alF' alias la = 'ls -A' alias l = 'ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ] ; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi","title":"Edit .bashrc"},{"location":"software/server/concourse_dockerized/#create-a-new-user-user","text":"1 2 3 4 5 6 7 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/","title":"Create a new user user"},{"location":"software/server/concourse_dockerized/#change-the-ssh-deamon-to-allow-only-ssh-keys","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF","title":"Change the SSH deamon to allow only SSH-keys"},{"location":"software/server/concourse_dockerized/#delete-roots-authorized_keys-file","text":"Attention Please check before if you can login to the user user with your ssh-key! 1 rm ~/.ssh/authorized_keys Important Log out and re login as user !","title":"Delete root's authorized_keys file"},{"location":"software/server/concourse_dockerized/#install-base-packages","text":"1 2 3 4 5 6 7 8 9 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ zip \\ unzip \\ unrar \\ screen \\ tmux \\ htop","title":"Install base packages"},{"location":"software/server/concourse_dockerized/#docker","text":"","title":"Docker"},{"location":"software/server/concourse_dockerized/#pre-requirements","text":"1 sudo apt install -y apt-transport-https ca-certificates curl software-properties-common","title":"Pre-requirements"},{"location":"software/server/concourse_dockerized/#install-docker","text":"The following steps are shortened! Here is the full Guide to install docker on Ubuntu 18.04 (Bionic Beaver) https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04 1 2 3 4 5 6 7 8 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && \\ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" && \\ sudo apt update && \\ apt-cache policy docker-ce && \\ echo \"Verify that docker-ce will be installed from the docker repository instead of the ubuntu repo.\" && \\ read -p \"Press any key to continue or press CTRL-C to abort... \" -n1 -s && \\ sudo apt install -y docker-ce && \\ sudo systemctl status docker","title":"Install Docker"},{"location":"software/server/concourse_dockerized/#create-a-new-docker-network-for-concourse","text":"1 2 3 4 5 6 7 8 9 10 11 12 sudo docker network create \\ -d bridge \\ -o \"com.docker.network.bridge.name\" = \"docker1\" \\ -o \"com.docker.network.bridge.enable_ip_masquerade\" = true \\ -o \"com.docker.network.bridge.enable_icc\" = true \\ -o \"com.docker.network.bridge.host_binding_ipv4\" = \"0.0.0.0\" \\ -o \"com.docker.network.driver.mtu\" = \"1500\" \\ --scope = local \\ --subnet = 172 .23.0.0/16 \\ --ip-range = 172 .23.42.0/24 \\ --gateway = 172 .23.0.1 \\ concourse_net","title":"Create a new docker network for concourse"},{"location":"software/server/concourse_dockerized/#install-portainer","text":"1 2 3 4 5 6 7 8 9 10 sudo docker volume create portainer_data && \\ sudo docker run \\ --name portainer \\ --volume /var/run/docker.sock:/var/run/docker.sock \\ --volume portainer_data:/data \\ --network concourse_net \\ --ip 172 .23.0.10 \\ --restart unless-stopped \\ --detach \\ portainer/portainer","title":"Install Portainer"},{"location":"software/server/concourse_dockerized/#postgresql","text":"","title":"PostgreSQL"},{"location":"software/server/concourse_dockerized/#install","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 PSQL_CONCOURSE_USER = $( cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 ) && \\ PSQL_CONCOURSE_PW = $( cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 ) && \\ sudo docker volume create pgdata && \\ sudo docker run \\ --name concourse-db \\ --volume pgdata:/var/lib/postgresql/data \\ --network concourse_net \\ --hostname concourse-db \\ --ip 172 .23.1.10 \\ --restart unless-stopped \\ --env POSTGRES_USER = $PSQL_CONCOURSE_USER \\ --env POSTGRES_PASSWORD = $PSQL_CONCOURSE_PW \\ --env POSTGRES_DB = atc \\ --detach \\ postgres:10.4-alpine && \\ echo -e \"User:\\t\\t $PSQL_CONCOURSE_USER \" ; \\ echo -e \"Password:\\t $PSQL_CONCOURSE_PW \"","title":"Install"},{"location":"software/server/concourse_dockerized/#backup","text":"#TODO","title":"Backup"},{"location":"software/server/concourse_dockerized/#concourse","text":"","title":"Concourse"},{"location":"software/server/concourse_dockerized/#pre-requirements_1","text":"Create a GitHub OAuth app for authentication: Follow this Guide: https://concourse-ci.org/install.html#github-auth-config","title":"Pre-requirements"},{"location":"software/server/concourse_dockerized/#install-web-interface","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 echo \"\" && \\ read -p \"Enter your GitHub client ID: \" GITHUB_CLIENT_ID && \\ while true ; do \\ set GITHUB_CLIENT_SECRET = \"\" ; \\ set GITHUB_CLIENT_SECRET_confirm = \"\" ; \\ read -s -p \"Enter your GitHub client secret: \" GITHUB_CLIENT_SECRET ; echo \"\" ; \\ read -s -p \"Reenter your GitHub client secret: \" GITHUB_CLIENT_SECRET_confirm ; echo \"\" ; \\ if [[ \" $GITHUB_CLIENT_SECRET \" == \" $GITHUB_CLIENT_SECRET_confirm \" ]] ; then \\ break ; \\ else \\ clear ; \\ echo \"Your secrets don't match! Please try again.\" ; \\ echo \"\" ; \\ fi ; \\ done ; \\ CONCOURSE_ADMIN_USER = admin && \\ CONCOURSE_ADMIN_PW = $( cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 ) && \\ CONCOUSE_WEB_IP = '172.23.1.11' && \\ ORG_NAME = \"mischaufen\" && \\ TEAM_NAME = \"main\" && \\ sudo docker volume create concourse-keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/tsa_host_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/tsa_host_key && \\ sudo touch /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/worker_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/worker_key && \\ sudo cat /var/lib/docker/volumes/concourse-keys/_data/worker_key.pub | sudo tee -a /var/lib/docker/volumes/concourse-keys/_data/authorized_worker_keys && \\ sudo ssh-keygen -t rsa -q -N '' -f /var/lib/docker/volumes/concourse-keys/_data/session_signing_key && \\ sudo chmod 600 /var/lib/docker/volumes/concourse-keys/_data/session_signing_key && \\ sudo docker run \\ --name concourse-web \\ --volume concourse-keys:/concourse-keys \\ --network concourse_net \\ --hostname concourse-web \\ --ip $CONCOUSE_WEB_IP \\ --privileged \\ --restart unless-stopped \\ --detach \\ concourse/concourse:4.2.1 web \\ --tsa-host-key = '/concourse-keys/tsa_host_key' \\ --tsa-authorized-keys = '/concourse-keys/authorized_worker_keys' \\ --tsa-session-signing-key = '/concourse-keys/session_signing_key' \\ --add-local-user = $CONCOURSE_ADMIN_USER : $CONCOURSE_ADMIN_PW \\ --main-team-local-user = $CONCOURSE_ADMIN_USER \\ --github-client-id = $GITHUB_CLIENT_ID \\ --github-client-secret = $GITHUB_CLIENT_SECRET \\ --main-team-github-team = $ORG_NAME : $TEAM_NAME \\ --postgres-user = $PSQL_CONCOURSE_USER \\ --postgres-password = $PSQL_CONCOURSE_PW \\ --postgres-host = $( sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-db ) \\ --postgres-port = 5432 \\ --bind-ip = $CONCOUSE_WEB_IP \\ --external-url = 'https://ci.mischaufen.de' && \\ echo -e \"User:\\t\\t $CONCOURSE_ADMIN_USER \" ; \\ echo -e \"Password:\\t $CONCOURSE_ADMIN_PW \"","title":"Install Web interface"},{"location":"software/server/concourse_dockerized/#install-worker","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 CONCOURSE_WORKER_IP = 172 .23.1.12 && \\ sudo docker run \\ --name concourse-worker \\ --volume concourse-keys:/concourse-keys \\ --network concourse_net \\ --hostname concourse-worker \\ --ip $CONCOURSE_WORKER_IP \\ --privileged \\ --restart unless-stopped \\ --detach \\ concourse/concourse:4.2.1 worker \\ --tsa-host = $( sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web ) :2222 \\ --garden-dns-server = 1 .1.1.1 \\ --garden-dns-proxy-enable","title":"Install worker"},{"location":"software/server/concourse_dockerized/#fly","text":"","title":"fly"},{"location":"software/server/concourse_dockerized/#install-fly","text":"1 2 3 sudo wget -O /root/fly_updater.sh https://gist.githubusercontent.com/shokinn/9eb8b9e39e8a73e4ad085cd9c75a3b4f/raw/3c3b29cc08c927bdd60253050b248d9e9f33d67d/fly_updater.sh && \\ sudo chmod u+x /root/fly_updater.sh && \\ sudo /root/fly_updater.sh","title":"Install fly"},{"location":"software/server/concourse_dockerized/#configure","text":"First, let's check that we can access the Concourse service with the fly command line client. We have to log in using the administrative username and password that we configured in the /etc/concourse/web_environment file using the login subcommand. A single fly binary can be used to contact and manage multiple Concourse servers, so the command uses a concept called \"targets\" as an alias for different servers. We will call our target \"local\" to log into the local Concourse server: 1 fly -t local login -c http:// $( sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web ) :8080 You will be prompted for going to http://172.23.1.11:8080/sky/login?redirect_uri=http://127.0.0.1:33277/auth/callback . Do the following instead: Add a port forwarding (on your local PC) from 8080 to 172.23.1.11:8080 and go to: http://127.0.0.1:8080/sky/login?redirect_uri=http://127.0.0.1:8080/sky/token Now copy/paste the token to your promt. This indicates that we were able to log in successfully. While we are here, let's verify that the worker process was able to successfully register to the TSA component by typing: 1 fly -t local workers Output: 1 2 name containers platform tags team state version concourse-server 0 linux none none running 2.1 The fly command is used to configure pipelines and manage the Concourse CI service. The fly help command provides information about additional commands.","title":"Configure"},{"location":"software/server/concourse_dockerized/#nginx","text":"","title":"Nginx"},{"location":"software/server/concourse_dockerized/#install_1","text":"Install all needed Packages for nginx tasks: 1 2 3 4 5 6 7 8 9 10 11 12 13 sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx","title":"Install"},{"location":"software/server/concourse_dockerized/#configure_1","text":"","title":"Configure"},{"location":"software/server/concourse_dockerized/#delete-default-entry","text":"1 sudo rm /etc/nginx/sites-enabled/default","title":"Delete default entry"},{"location":"software/server/concourse_dockerized/#add-ssl_params","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF","title":"Add ssl_params"},{"location":"software/server/concourse_dockerized/#general-http-to-https-redirector","text":"This nginx entry will rewrite all traffic from HTTP to HTTPS. 1 2 3 4 5 6 7 8 9 10 read -r -d '' read_tmp<< \"EOF\" server { \\t listen 80 default_server ; \\t listen [ :: ] :80 default_server ; \\t server_name _ ; \\t return 301 https:// $host$request_uri ; } EOF echo -e \" $read_tmp \" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf","title":"General HTTP to HTTPS redirector"},{"location":"software/server/concourse_dockerized/#portainer","text":"Add server directive for Portainer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 portainer_ip = $( sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" portainer ) ; \\ cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-portainer.ci.mischaufen.de.conf && \\ sudo ln -s ../sites-available/10-portainer.ci.mischaufen.de.conf /etc/nginx/sites-enabled/10-portainer.ci.mischaufen.de.conf server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tportainer.ci.mischaufen.de; \\taccess_log\\t/var/log/nginx/portainer.ci.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/portainer.ci.mischaufen.de_error.log warn; \\tlocation / { \\t\\tset \\$upstream_endpoint http://$portainer_ip:9000; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_set_header\\tConnection \"\"; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tadd_header\\t\\tX-Upstream \\$upstream_addr; \\t\\tproxy_pass\\t\\t\\$upstream_endpoint; \\t} \\tlocation /api/websocket/ { \\t\\tset \\$upstream_endpoint http://$portainer_ip:9000; \\t\\tproxy_buffering\\t\\toff; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"Upgrade\"; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Server \\$host; \\t\\tproxy_set_header\\tX-Forwarded-For \\$proxy_add_x_forwarded_for; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tadd_header\\t\\tX-Upstream \\$upstream_addr; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_pass\\t\\t\\$upstream_endpoint; \\t\\t# Need this for the console \\t\\tproxy_redirect\\t\\thttp://$portainer_ip:9000 \\$scheme://\\$host/; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. 1 2 3 sudo certbot --nginx -d portainer.ci.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/portainer.ci.mischaufen.de/chain.pem;' /etc/nginx/sites-available/10-portainer.ci.mischaufen.de.conf && \\ sudo systemctl reload nginx.service","title":"Portainer"},{"location":"software/server/concourse_dockerized/#concourse_1","text":"Add server directive for Concourse: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/11-ci.mischaufen.de.conf && \\ sudo ln -s ../sites-available/11-ci.mischaufen.de.conf /etc/nginx/sites-enabled/11-ci.mischaufen.de.conf upstream concourse { \\tserver\\t\\t$(sudo docker inspect -f \"{{ .NetworkSettings.Networks.concourse_net.IPAddress }}\" concourse-web):8080; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tci.mischaufen.de; \\taccess_log\\t/var/log/nginx/ci.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/ci.mischaufen.de_error.log warn; \\tlocation / { \\t\\tinclude\\t\\t\\tproxy_params; \\t\\tproxy_http_version\\t1.1; \\t\\tproxy_read_timeout\\t90; \\t\\tproxy_set_header\\tUpgrade \\$http_upgrade; \\t\\tproxy_set_header\\tConnection \"upgrade\"; \\t\\tproxy_pass\\t\\thttp://concourse; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if config is ok: 1 sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. 1 2 3 sudo certbot --nginx -d ci.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/ci.mischaufen.de/chain.pem;' /etc/nginx/sites-available/11-ci.mischaufen.de.conf && \\ sudo systemctl reload nginx.service","title":"Concourse"},{"location":"software/server/concourse_dockerized/#add-cronjob-for-renewing-cetificates","text":"sudo crontab -e : 1 0 */12 * * * /usr/local/bin/certbot renew","title":"Add cronjob for renewing cetificates"},{"location":"software/server/concourse_dockerized/#security","text":"","title":"Security"},{"location":"software/server/concourse_dockerized/#iptables","text":"Explanation iptables rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on `eth0` iptables -t filter -A INPUT -i eth0 -j DROP ; # Allow output on `eth0` iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed iptables rules: 1 2 3 4 5 6 7 8 sudo iptables -A OUTPUT -o lo -j ACCEPT ; \\ sudo iptables -A INPUT -i lo -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p icmp -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -j DROP ; \\ sudo iptables -t filter -A OUTPUT -o eth0 -j ACCEPT Set up needed ip6tables rules: 1 2 3 4 5 6 7 8 sudo ip6tables -A OUTPUT -o lo -j ACCEPT ; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p ipv6-icmp -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -j DROP ; \\ sudo ip6tables -t filter -A OUTPUT -o eth0 -j ACCEPT Persist iptables rules: 1 2 3 sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"iptables"},{"location":"software/server/nextcloud/","text":"NextCloud \u00b6 OS: Ubuntu 18.04 LTS Preinstalled with lvm and LUKS encryption. Initial Server setup \u00b6 Update System \u00b6 1 sudo apt update && sudo apt full-upgrade -y Fix locale \u00b6 1 2 3 4 5 6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF Edit .bashrc \u00b6 /root/.bashrc / /etc/skel/.bashrc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi Make vim colored with dark background settinfs \u00b6 1 2 3 4 5 cat << EOF | sudo tee -a /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF Change the SSH deamon to allow only SSH-keys \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 cat << EOF | sudo tee /etc/ssh/sshd_config && sudo systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF Install base packages \u00b6 1 2 3 4 5 6 7 8 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop Install and configure busybox/dropbear \u00b6 Install busybox and dropbear: 1 sudo apt update && sudo apt full-upgrade -y && sudo apt install -y busybox dropbear Edit your /etc/initramfs-tools/initramfs.conf and set BUSYBOX=y : 1 2 3 4 5 6 7 8 9 sudo sed -i -e 's/^BUSYBOX=.*$/BUSYBOX=y/' /etc/initramfs-tools/initramfs.conf && \\ cat << EOF | sudo tee -a /etc/initramfs-tools/initramfs.conf # # DROPBEAR # DROPBEAR=y EOF Set dropbear to start: 1 sudo sed -i 's/^NO_START.*$/NO_START=0/' /etc/default/dropbear Change dropear port to 2222 : 1 sudo sed -i 's/^#DROPBEAR_OPTIONS.*$/DROPBEAR_OPTIONS=\"-p 2222\"/' /etc/dropbear-initramfs/config crypt_unlock.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #!/bin/sh PREREQ=\"dropbear\" prereqs() { echo \"$PREREQ\" } case \"$1\" in prereqs) prereqs exit 0 ;; esac . \"${CONFDIR}/initramfs.conf\" . /usr/share/initramfs-tools/hook-functions if [ \"${DROPBEAR}\" != \"n\" ] && [ -r \"/etc/crypttab\" ] ; then cat > \"${DESTDIR}/bin/unlock\" << EOF #!/bin/sh if PATH=/lib/unlock:/bin:/sbin /scripts/local-top/cryptroot; then kill \\`ps | grep cryptroot | grep -v \"grep\" | awk '{print \\$1}'\\` # following line kill the remote shell right after the passphrase has # been entered. kill -9 \\`ps | grep \"\\-sh\" | grep -v \"grep\" | awk '{print \\$1}'\\` exit 0 fi exit 1 EOF chmod 755 \"${DESTDIR}/bin/unlock\" mkdir -p \"${DESTDIR}/lib/unlock\" cat > \"${DESTDIR}/lib/unlock/plymouth\" << EOF #!/bin/sh [ \"\\$1\" == \"--ping\" ] && exit 1 /bin/plymouth \"\\$@\" EOF chmod 755 \"${DESTDIR}/lib/unlock/plymouth\" echo To unlock root-partition run \"unlock\" >> ${DESTDIR}/etc/motd fi Get the unlock script: 1 2 3 4 sudo wget -O /etc/initramfs-tools/hooks/crypt_unlock.sh https://gist.githubusercontent.com/gusennan/712d6e81f5cf9489bd9f/raw/fda73649d904ee0437fe3842227ad8ac8ca487d1/crypt_unlock.sh && \\ sudo chmod +x /etc/initramfs-tools/hooks/crypt_unlock.sh && \\ sudo update-initramfs -u && \\ sudo systemctl disable dropbear Add your ssh keys to the busybox authorized keys: 1 2 3 4 5 cat << EOF | sudo tee /etc/dropbear-initramfs/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAgEAwVT82+FIbeVNjJ3Waa3Z0ysmG+DNhX6qUN5C2o3lT158WCcWgDU5qs/DgJDQFVK+m33cvozdaoV2sreSHmKLlM77k5zU+OTDswrEaJ53CRSu7tgT6ZRI2ggxzhvrw6xq1bmTlSuaojSmaJNDZllgFtrlG1XXGSgkgyDtyJuUk16MwKU4zLAWOluwrZBMIvlafNnJS4K385rI2NNIMUvWHjfxYTxAFAtqBZFacz/kQ9jm4UYT+v7YOXu48Cgul6S51eNbK0rUe7DU7+1xzusdhyqHq7FnFugvW6OYy3ft3y/ri/7qvKAhtwQSo6A8cgLVlPnMKdDWq/QAC6dLGcUEHJPJDYumMpM6ijrfd1DCpB+ELr/dFHgR5l6++OJM2/kl4f3ue1gp5b//6osnfMhWrQXbmk8WLF31IXmaZnwlcKKEvgNQL5O9U39HRuZBvXh5aib/vFtQ5ge6l1wG+eFLrMHjeLPDYCYuNliPisjmLNUb+0KyfDR2KnrqwZVXMOiKdh+S4OaXW7T+woykZ3u7FODfZwcRdnEgZFxYLSHRh8U/7fFzbAD4jJH29D9nHz46hx0OdEtiDJoeujf+GLXw4c7P2G+IYlPVg6sPJ5W+oky5gboQh13IOnFXFXd5kYuWnzOU/4ITy4vHw2WowbCYMFY5GNrRzRMpmcIj55OXrwM= 71:72:8d:23:dd:13:ea:90:17:35:4e:0a:2b:c7:d5:91 Philip Henning (mail@philip-henning.com) ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCZntAPXzfGddkOxodxRCv2zBgbqHo9aAqtvoiZD0NuuBkYj3tSMKELMi0corvtXHy3iTa6EAKVc/AQqsNrggOeIYHwCSXZZ67sa0YxItDD3+YBm/v65EK/sspvq+xPD8IyZyYWDy6CmK1HiBlv6TFnGlN5PuFKfPJFBYEkx0Dzjl3i1r+xSpPKOcVgtPDs3MIYvBB1Y8Sig+JZehBELiioBQaWjKDPBJYsLQzqjGPLcBb/h1H729P6B4oW7A1LYsStJd5UDfknOgdx4pPoSCFBE5aEDO/0efqPcN7jQWlrrsc+OEWRW7k7EA45+9x6vjjUCO8IgKQFAIiOJadDPEaNAJnza4IpCspePeITZ3iyXo2/w9/BrzyNnW+arJ1QWjZ79W9mPXg4CTvUsnMQ55BRw2meLBxQqgkr9H8Cf/IxCEB2bPYPecCcVZj4djjgVbzlY/2/vFPDmB3Idx+AagACJZoDoWqaqlloC+fPyovG9iCjA+7iMEg4OR7kD/GCKGRmNzPmKNgkBwp62eyP4L9197bhIywMkaVEofqzHNOFly1f7KTEK/Dgo6GHCCsFLnvnPyZDvJ8o7bG7svan4e1KmY5JLSKZrtkPMJzvNmEUGsGlwFMWtNEhiGG01YiTIBcG3Z7N8lpi8Bcoti2Lq5chzApAwhHkykasHq218QPnpQ== a0:ce:a9:b4:c1:e8:c7:0e:ed:02:15:a0:58:56:34:64 matze ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAgEAyhhxTowK157f2bZiV5W9Vy0wemmo07EuH2un6boKjzQ8oNDB3AKUeLgef76spBZZQ668kkwL+qDcCssPuRUdrxuclTw7bgf+RtYV1dkxRxCXfMqT4Gxsz2VOAClImWY9cmWSkigzZfS0/R2JTTO+H2ohOqRGqLH0dNjswRYW33mMMCy6ksZgv4Bin9B5j6u9fsj4AcwtEMiNVKXMX9z6FELo9/ayWwvnEmzL9Bs8qR9+7jLbhaJJeJNZEh/teZu3w5/ahHtj0rWHZ0F/XNmAKFCS9M/buExXw3RF0PAByAJN+J4uMzcqx64guKoe5J1Sz5OZy+Tn/IICLv0oKggnfT1BPXwUAHm+8jGW/q1NFKXc2IanhS6wkBlJUWawEupJHj2TIdTI55mscsUH9g9a0WI7dSiZkkER8HoJYg5vZZ9y7OoklK8zPuGWPeOcIStCROXkTT/o0W/S7SVPKXeXrj3FNzV2Ibw8V3YSMJpA9f52kMkVp1Jzr8/L0i7vSuLIU628rVj1QBvmE1funKMEa9uWdqSgOZyVYVBzXzlahA8D/lBK8cX2Qplq9Wt/pUGPS+OczPwDW2IcRIdkVt/crCgxiYOaZxh853zMR1BHL9bZcwnL6voSgCi0uRzfBA4wEGCiZN7qoIVAs1axraet3G95rASzLI4qzlc5vtiUq98= 54:7e:57:18:15:f4:59:0f:d1:81:69:d9:dc:53:6e:0a robin@beismann.biz EOF Regenerate the initramfs: 1 2 3 sudo update-initramfs -u && \\ sudo update-grub && \\ sudo grub-install /dev/vda Mount external storage \u00b6 pre requirements \u00b6 Install cifs-utils: 1 sudo apt install -y cifs-utils Mount mounts \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 while true ; do \\ unset pw ; \\ unset pw_confirm ; \\ read -p \"cifs user: \" cifs_user && \\ read -s -p \"cifs password: \" pw ; echo \"\" && \\ read -s -p \"Confirm admin user password: \" pw_confirm ; echo \"\" && \\ if [[ \" $pw \" == \" $pw_confirm \" ]] ; then \\ break ; \\ else \\ echo \"Your passwords don't match. Try again!\" ; \\ echo \"\" ; \\ fi ; \\ done ; \\ if [[ ! -d /mnt/.cifs ]] ; then sudo mkdir /mnt/.cifs ; fi ; \\ sudo chmod 400 /mnt/.cifs ; \\ cat << EOF | sudo tee -a /etc/fstab && \\ sudo mount -a # Cifs shared storage //io.servercow.de/home /mnt/.cifs cifs username=$cifs_user,password=$pw,uid=www-data,gid=www-data,file_mode=0660,dir_mode=0770 0 0 EOF Install rclone \u00b6 Install rclone: 1 curl https://rclone.org/install.sh | sudo bash create mountpoint: 1 2 sudo mkdir /mnt/cifs && \\ sudo chmod 400 /mnt/cifs configure \u00b6 Open rclone configuration: 1 2 3 4 5 if [[ ! -d /var/www/.conf/rclone/ ]] ; then sudo mkdir -p /var/www/.conf/rclone/ ; fi && \\ sudo chmod 700 /var/www/.conf/rclone/ && \\ sudo chown www-data:www-data /var/www/.conf/rclone/ && \\ sudo -u www-data rclone config --config /var/www/.conf/rclone/rclone.conf && \\ sudo chmod 600 /var/www/.conf/rclone/rclone.conf Configuration log: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 2018/09/09 21:09:35 NOTICE: Config file \"/var/www/.conf/rclone/rclone.conf\" not found - using defaults No remotes found - make a new one n) New remote s) Set configuration password q) Quit config n/s/q> n name> cifs_crypt Type of storage to configure. Enter a string value. Press Enter for the default (\"\"). Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / JottaCloud \\ \"jottacloud\" 14 / Local Disk \\ \"local\" 15 / Mega \\ \"mega\" 16 / Microsoft Azure Blob Storage \\ \"azureblob\" 17 / Microsoft OneDrive \\ \"onedrive\" 18 / OpenDrive \\ \"opendrive\" 19 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 20 / Pcloud \\ \"pcloud\" 21 / QingCloud Object Storage \\ \"qingstor\" 22 / SSH/SFTP Connection \\ \"sftp\" 23 / Webdav \\ \"webdav\" 24 / Yandex Disk \\ \"yandex\" 25 / http Connection \\ \"http\" Storage> 8 Remote to encrypt/decrypt. Normally should contain a ':' and a path, eg \"myremote:path/to/dir\", \"myremote:bucket\" or maybe \"myremote:\" (not recommended). Enter a string value. Press Enter for the default (\"\"). remote> /mnt/.cifs How to encrypt the filenames. Enter a string value. Press Enter for the default (\"standard\"). Choose a number from below, or type in your own value 1 / Don't encrypt the file names. Adds a \".bin\" extension only. \\ \"off\" 2 / Encrypt the filenames see the docs for the details. \\ \"standard\" 3 / Very simple filename obfuscation. \\ \"obfuscate\" filename_encryption> 2 Option to either encrypt directory names or leave them intact. Enter a boolean value (true or false). Press Enter for the default (\"true\"). Choose a number from below, or type in your own value 1 / Encrypt directory names. \\ \"true\" 2 / Don't encrypt directory names, leave them intact. \\ \"false\" directory_name_encryption> 1 Password or pass phrase for encryption. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? Please note that an obscured version of this password (and not the password itself) will be stored under your configuration file, so keep this generated password in a safe place. y) Yes n) No y/n> y Password or pass phrase for salt. Optional but recommended. Should be different to the previous password. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? Please note that an obscured version of this password (and not the password itself) will be stored under your configuration file, so keep this generated password in a safe place. y) Yes n) No y/n> y Edit advanced config? (y/n) y) Yes n) No y/n> y For all files listed show how the names encrypt. Enter a boolean value (true or false). Press Enter for the default (\"false\"). show_mapping> Remote config -------------------- [cifs_crypt] type = crypt remote = /mnt/.cifs filename_encryption = standard directory_name_encryption = true password = *** ENCRYPTED *** password2 = *** ENCRYPTED *** -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== cifs_crypt crypt e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> q Test if Rclone can mount: 1 screen -S 'rclone' sudo rclone mount --config /var/www/.conf/rclone/rclone.conf --uid $( id -u www-data ) --gid $( id -g www-data ) --umask 002 --allow-other cifs_crypt: /mnt/cifs Unmount it: 1 sudo fusermount -uz /mnt/cifs Create systemd startup script /etc/systemd/system/rclone.service : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 cat << EOF | sudo tee /etc/systemd/system/rclone.service [Unit] Description=rclone encryption mount AssertPathIsDirectory=/mnt/cifs [Service] Type=simple ExecStart=/usr/bin/rclone mount --config /var/www/.conf/rclone/rclone.conf --uid $(id -u www-data) --gid $(id -g www-data) --umask 007 --allow-other cifs_crypt: /mnt/cifs ExecStop=/bin/fusermount -uz /mnt/cifs Restart=on-abort RestartSec=5 StartLimitInterval=60s StartLimitBurst=3 [Install] WantedBy=default.target EOF Refresh your daemons: 1 sudo systemctl daemon-reload Activate the auto startup option and start the service: 1 2 sudo systemctl enable rclone.service && \\ sudo systemctl start rclone.service Install Nextcloud \u00b6 Nginx/certnpt \u00b6 Install nginx: 1 2 3 4 5 6 7 8 sudo apt update && \\ sudo apt install -y \\ nginx \\ python3 \\ python3-pip && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx PHP 7.1 \u00b6 Install php7.1: 1 2 3 sudo apt install software-properties-common -y && \\ sudo add-apt-repository ppa:ondrej/php -y && \\ sudo apt install php7.1-fpm php7.1-curl php7.1-cli php7.1-mysql php7.1-gd php7.1-iconv php7.1-xsl php7.1-json php7.1-intl php-pear php-imagick php7.1-dev php7.1-common php7.1-mbstring php7.1-zip php7.1-soap php-apcu -y Restart php-fpm and nginx: 1 sudo systemctl restart php7.1-fpm.service nginx.service Modify php.ini's: 1 2 3 4 5 6 7 8 9 10 11 sudo sed -i -e 's/^;date.timezone =*$/date.timezone = Europe\\/Berlin/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*cgi\\.fix_pathinfo=.*$/cgi.fix_pathinfo=0/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.enable=.*$/opcache.enable=1/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.enable_cli=.*$/opcache.enable_cli=1/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.interned_strings_buffer=.*$/opcache.interned_strings_buffer=8/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.max_accelerated_files=.*$/opcache.max_accelerated_files=10000/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.memory_consumption=.*$/opcache.memory_consumption=128/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.save_comments=.*$/opcache.save_comments=1/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.revalidate_freq=.*$/opcache.revalidate_freq=1/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^;date.timezone =*$/date.timezone = Europe\\/Berlin/' /etc/php/7.1/cli/php.ini && \\ sudo sed -i -e 's/^.*cgi\\.fix_pathinfo=.*$/cgi.fix_pathinfo=0/' /etc/php/7.1/cli/php.ini Uncomment those lines below: sudo vim /etc/php/7.1/fpm/pool.d/www.conf : 1 2 3 4 5 env[HOSTNAME] = $HOSTNAME env[PATH] = /usr/local/bin:/usr/bin:/bin env[TMP] = /tmp env[TMPDIR] = /tmp env[TEMP] = /tmp Restart php-fpm: 1 2 sudo systemctl restart php7.1-fpm && \\ sudo systemctl enable php7.1-fpm MariaDB \u00b6 Install MariaDB: 1 sudo apt install mariadb-server mariadb-client -y Secure MariaDB installtion: 1 sudo mysql_secure_installation Log: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we'll need the current password for the root user. If you've just installed MariaDB, and you haven't set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MariaDB root user without the proper authorisation. Set root password? [Y/n] y New password: Re-enter new password: Password updated successfully! Reloading privilege tables.. ... Success! By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] y ... Success! By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! Login to MariaDB as root : 1 sudo mysql -u root -p Warning CHANGE THE DEAFAULT PASSWORD! Create a Nextcloud DB: 1 2 3 4 create database nextcloud ; create user nextcloud @ localhost identified by 'PASSWORD' ; grant all privileges on nextcloud . * to nextcloud @ localhost identified by 'PASSWORD' ; flush privileges ; Exit MariaDB client with CTRL+D . Nginx config \u00b6 Remove alll current servers: 1 sudo rm /etc/nginx/sites-enabled/* All general HTTP to HTTPS redirector: 1 2 3 4 5 6 7 8 9 10 read -r -d '' read_tmp<< \"EOF\" server { \\t listen 80 default_server ; \\t listen [ :: ] :80 default_server ; \\t server_name _ ; \\t return 301 https:// $host$request_uri ; } EOF echo -e \" $read_tmp \" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf Add ssl_params file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF Add nextcloud server: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-cloud.pphg.tech.conf && \\ sudo ln -s ../sites-available/10-cloud.pphg.tech.conf /etc/nginx/sites-enabled/10-cloud.pphg.tech.conf upstream php-handler { \\t#server 127.0.0.1:9000; \\tserver unix:/run/php/php7.1-fpm.sock; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tcloud.pphg.tech; \\taccess_log\\t/var/log/nginx/cloud.pphg.tech_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/cloud.pphg.tech_error.log warn; \\t# Add headers to serve security related headers \\t# Before enabling Strict-Transport-Security headers please read into this \\t# topic first. \\t# add_header Strict-Transport-Security \"max-age=15552000; \\t# includeSubDomains; preload;\"; \\t# \\t# WARNING: Only add the preload option once you read about \\t# the consequences in https://hstspreload.org/. This option \\t# will add the domain to a hardcoded list that is shipped \\t# in all major browsers and getting removed from this list \\t# could take several months. \\tadd_header X-Content-Type-Options nosniff; \\tadd_header X-XSS-Protection \"1; mode=block\"; \\tadd_header X-Robots-Tag none; \\tadd_header X-Download-Options noopen; \\tadd_header X-Permitted-Cross-Domain-Policies none; \\tadd_header 'Referrer-Policy' 'strict-origin'; \\t# Path to the root of your installation \\troot /var/www/nextcloud/; \\tlocation = /data/htaccesstest.txt { \\t\\tallow all; \\t\\tlog_not_found off; \\t\\taccess_log off; \\t} \\tlocation = /robots.txt { \\t\\tallow all; \\t\\tlog_not_found off; \\t\\taccess_log off; \\t} \\tlocation = /.well-known/carddav { \\t\\treturn 301 \\$scheme://\\$host/remote.php/dav; \\t} \\tlocation = /.well-known/caldav { \\t\\treturn 301 \\$scheme://\\$host/remote.php/dav; \\t} \\t# set max upload size \\tclient_max_body_size 512M; \\tfastcgi_buffers 64 4K; \\t# Enable gzip but do not remove ETag headers \\tgzip on; \\tgzip_vary on; \\tgzip_comp_level 4; \\tgzip_min_length 256; \\tgzip_proxied expired no-cache no-store private no_last_modified no_etag auth; \\tgzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; \\tlocation / { \\t\\trewrite ^ /index.php\\$request_uri; \\t} \\tlocation ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ { \\t\\tdeny all; \\t} \\tlocation ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) { \\t\\tdeny all; \\t} \\tlocation ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+)\\.php(?:\\$|/) { \\t\\tfastcgi_split_path_info ^(.+?\\.php)(/.*)\\$; \\t\\tinclude fastcgi_params; \\t\\tfastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name; \\t\\tfastcgi_param PATH_INFO \\$fastcgi_path_info; \\t\\tfastcgi_param HTTPS on; \\t\\t#Avoid sending the security headers twice \\t\\tfastcgi_param modHeadersAvailable true; \\t\\tfastcgi_param front_controller_active true; \\t\\tfastcgi_pass php-handler; \\t\\tfastcgi_intercept_errors on; \\t\\tfastcgi_request_buffering off; \\t} \\tlocation ~ ^/(?:updater|ocs-provider)(?:\\$|/) { \\t\\ttry_files \\$uri/ =404; \\t\\tindex index.php; \\t} \\t# Adding the cache control header for js and css files \\t# Make sure it is BELOW the PHP block \\tlocation ~ \\.(?:css|js|woff|svg|gif)\\$ { \\t\\ttry_files \\$uri /index.php\\$request_uri; \\t\\tadd_header Cache-Control \"public, max-age=15778463\"; \\t\\t# Add headers to serve security related headers (It is intended to \\t\\t# have those duplicated to the ones above) \\t\\t# Before enabling Strict-Transport-Security headers please read into \\t\\t# this topic first. \\t\\t# add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\"; \\t\\t# \\t\\t# WARNING: Only add the preload option once you read about \\t\\t# the consequences in https://hstspreload.org/. This option \\t\\t# will add the domain to a hardcoded list that is shipped \\t\\t# in all major browsers and getting removed from this list \\t\\t# could take several months. \\t\\tadd_header X-Content-Type-Options nosniff; \\t\\tadd_header X-XSS-Protection \"1; mode=block\"; \\t\\tadd_header X-Robots-Tag none; \\t\\tadd_header X-Download-Options noopen; \\t\\tadd_header X-Permitted-Cross-Domain-Policies none; \\t\\t# Optional: Don't log access to assets \\t\\taccess_log off; \\t} \\tlocation ~ \\.(?:png|html|ttf|ico|jpg|jpeg)\\$ { \\t\\ttry_files \\$uri /index.php\\$request_uri; \\t\\t# Optional: Don't log access to other assets \\t\\taccess_log off; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if the nginx configuration is correct: 1 sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. 1 2 3 sudo certbot --nginx -d cloud.pphg.tech && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/cloud.pphg.tech/chain.pem;' /etc/nginx/sites-available/10-cloud.pphg.tech.conf && \\ sudo systemctl reload nginx.service Add cronjob for renewing cetificates: sudo crontab -e : 1 0 */12 * * * /usr/local/bin/certbot renew Download Nextcloud \u00b6 Install required packages: 1 sudo apt install wget unzip zip -y Download newstest Nextcloud stable release into /var/www/ : 1 2 3 4 5 cd /var/www/ && \\ sudo wget https://download.nextcloud.com/server/releases/latest.zip && \\ sudo unzip latest.zip && \\ sudo rm latest.zip && \\ sudo chown -R www-data:www-data /var/www/nextcloud/ Create a Nextcloud Data directory: 1 sudo -u www-data mkdir /mnt/cifs/ncdata Install NextCloud \u00b6 Go to https://cloud.pphg.tech and use the following varaibles: * User: root * PW: *** * Data folder: /mnt/cifs/ncdata/ * Database user: nextcloud * Database pw: *** * Database name: nextcloud Enable the Audit / Logging App! Afterwards go to Settings > Basic settings and setup the email server: * Background jobs * Cron * Email server * to your needs Add the following to the /var/www/nextcloud/config/config.php file: 1 'memcache.local' => '\\OC\\Memcache\\APCu', Security \u00b6 iptables \u00b6 Explanation iptables rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow quassel incoming iptables -t filter -A INPUT -i ens3 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow ESTABLISHED and RELATED connection (important for outgoing connections!) iptables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on iptables -P INPUT DROP # Policy ACCEPT OUTPUT iptables -P OUTPUT ACCEPT Set up needed iptables rules: 1 2 3 4 5 6 7 8 sudo iptables -A OUTPUT -o lo -j ACCEPT ; \\ sudo iptables -A INPUT -i lo -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i ens3 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i ens3 -p icmp -j ACCEPT ; \\ sudo iptables -P INPUT DROP ; \\ sudo iptables -P OUTPUT ACCEPT Set up needed ip6tables rules: 1 2 3 4 5 6 7 8 sudo ip6tables -A OUTPUT -o lo -j ACCEPT ; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p ipv6-icmp -j ACCEPT ; \\ sudo ip6tables -P INPUT DROP ; \\ sudo ip6tables -P OUTPUT ACCEPT Persist iptables rules: 1 2 3 sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload fail2Ban (SSH/Nextcloud) \u00b6 Backup Nextcloud \u00b6","title":"NextCloud"},{"location":"software/server/nextcloud/#nextcloud","text":"OS: Ubuntu 18.04 LTS Preinstalled with lvm and LUKS encryption.","title":"NextCloud"},{"location":"software/server/nextcloud/#initial-server-setup","text":"","title":"Initial Server setup"},{"location":"software/server/nextcloud/#update-system","text":"1 sudo apt update && sudo apt full-upgrade -y","title":"Update System"},{"location":"software/server/nextcloud/#fix-locale","text":"1 2 3 4 5 6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF","title":"Fix locale"},{"location":"software/server/nextcloud/#edit-bashrc","text":"/root/.bashrc / /etc/skel/.bashrc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi","title":"Edit .bashrc"},{"location":"software/server/nextcloud/#make-vim-colored-with-dark-background-settinfs","text":"1 2 3 4 5 cat << EOF | sudo tee -a /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Make vim colored with dark background settinfs"},{"location":"software/server/nextcloud/#change-the-ssh-deamon-to-allow-only-ssh-keys","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 cat << EOF | sudo tee /etc/ssh/sshd_config && sudo systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF","title":"Change the SSH deamon to allow only SSH-keys"},{"location":"software/server/nextcloud/#install-base-packages","text":"1 2 3 4 5 6 7 8 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop","title":"Install base packages"},{"location":"software/server/nextcloud/#install-and-configure-busyboxdropbear","text":"Install busybox and dropbear: 1 sudo apt update && sudo apt full-upgrade -y && sudo apt install -y busybox dropbear Edit your /etc/initramfs-tools/initramfs.conf and set BUSYBOX=y : 1 2 3 4 5 6 7 8 9 sudo sed -i -e 's/^BUSYBOX=.*$/BUSYBOX=y/' /etc/initramfs-tools/initramfs.conf && \\ cat << EOF | sudo tee -a /etc/initramfs-tools/initramfs.conf # # DROPBEAR # DROPBEAR=y EOF Set dropbear to start: 1 sudo sed -i 's/^NO_START.*$/NO_START=0/' /etc/default/dropbear Change dropear port to 2222 : 1 sudo sed -i 's/^#DROPBEAR_OPTIONS.*$/DROPBEAR_OPTIONS=\"-p 2222\"/' /etc/dropbear-initramfs/config crypt_unlock.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #!/bin/sh PREREQ=\"dropbear\" prereqs() { echo \"$PREREQ\" } case \"$1\" in prereqs) prereqs exit 0 ;; esac . \"${CONFDIR}/initramfs.conf\" . /usr/share/initramfs-tools/hook-functions if [ \"${DROPBEAR}\" != \"n\" ] && [ -r \"/etc/crypttab\" ] ; then cat > \"${DESTDIR}/bin/unlock\" << EOF #!/bin/sh if PATH=/lib/unlock:/bin:/sbin /scripts/local-top/cryptroot; then kill \\`ps | grep cryptroot | grep -v \"grep\" | awk '{print \\$1}'\\` # following line kill the remote shell right after the passphrase has # been entered. kill -9 \\`ps | grep \"\\-sh\" | grep -v \"grep\" | awk '{print \\$1}'\\` exit 0 fi exit 1 EOF chmod 755 \"${DESTDIR}/bin/unlock\" mkdir -p \"${DESTDIR}/lib/unlock\" cat > \"${DESTDIR}/lib/unlock/plymouth\" << EOF #!/bin/sh [ \"\\$1\" == \"--ping\" ] && exit 1 /bin/plymouth \"\\$@\" EOF chmod 755 \"${DESTDIR}/lib/unlock/plymouth\" echo To unlock root-partition run \"unlock\" >> ${DESTDIR}/etc/motd fi Get the unlock script: 1 2 3 4 sudo wget -O /etc/initramfs-tools/hooks/crypt_unlock.sh https://gist.githubusercontent.com/gusennan/712d6e81f5cf9489bd9f/raw/fda73649d904ee0437fe3842227ad8ac8ca487d1/crypt_unlock.sh && \\ sudo chmod +x /etc/initramfs-tools/hooks/crypt_unlock.sh && \\ sudo update-initramfs -u && \\ sudo systemctl disable dropbear Add your ssh keys to the busybox authorized keys: 1 2 3 4 5 cat << EOF | sudo tee /etc/dropbear-initramfs/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAgEAwVT82+FIbeVNjJ3Waa3Z0ysmG+DNhX6qUN5C2o3lT158WCcWgDU5qs/DgJDQFVK+m33cvozdaoV2sreSHmKLlM77k5zU+OTDswrEaJ53CRSu7tgT6ZRI2ggxzhvrw6xq1bmTlSuaojSmaJNDZllgFtrlG1XXGSgkgyDtyJuUk16MwKU4zLAWOluwrZBMIvlafNnJS4K385rI2NNIMUvWHjfxYTxAFAtqBZFacz/kQ9jm4UYT+v7YOXu48Cgul6S51eNbK0rUe7DU7+1xzusdhyqHq7FnFugvW6OYy3ft3y/ri/7qvKAhtwQSo6A8cgLVlPnMKdDWq/QAC6dLGcUEHJPJDYumMpM6ijrfd1DCpB+ELr/dFHgR5l6++OJM2/kl4f3ue1gp5b//6osnfMhWrQXbmk8WLF31IXmaZnwlcKKEvgNQL5O9U39HRuZBvXh5aib/vFtQ5ge6l1wG+eFLrMHjeLPDYCYuNliPisjmLNUb+0KyfDR2KnrqwZVXMOiKdh+S4OaXW7T+woykZ3u7FODfZwcRdnEgZFxYLSHRh8U/7fFzbAD4jJH29D9nHz46hx0OdEtiDJoeujf+GLXw4c7P2G+IYlPVg6sPJ5W+oky5gboQh13IOnFXFXd5kYuWnzOU/4ITy4vHw2WowbCYMFY5GNrRzRMpmcIj55OXrwM= 71:72:8d:23:dd:13:ea:90:17:35:4e:0a:2b:c7:d5:91 Philip Henning (mail@philip-henning.com) ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCZntAPXzfGddkOxodxRCv2zBgbqHo9aAqtvoiZD0NuuBkYj3tSMKELMi0corvtXHy3iTa6EAKVc/AQqsNrggOeIYHwCSXZZ67sa0YxItDD3+YBm/v65EK/sspvq+xPD8IyZyYWDy6CmK1HiBlv6TFnGlN5PuFKfPJFBYEkx0Dzjl3i1r+xSpPKOcVgtPDs3MIYvBB1Y8Sig+JZehBELiioBQaWjKDPBJYsLQzqjGPLcBb/h1H729P6B4oW7A1LYsStJd5UDfknOgdx4pPoSCFBE5aEDO/0efqPcN7jQWlrrsc+OEWRW7k7EA45+9x6vjjUCO8IgKQFAIiOJadDPEaNAJnza4IpCspePeITZ3iyXo2/w9/BrzyNnW+arJ1QWjZ79W9mPXg4CTvUsnMQ55BRw2meLBxQqgkr9H8Cf/IxCEB2bPYPecCcVZj4djjgVbzlY/2/vFPDmB3Idx+AagACJZoDoWqaqlloC+fPyovG9iCjA+7iMEg4OR7kD/GCKGRmNzPmKNgkBwp62eyP4L9197bhIywMkaVEofqzHNOFly1f7KTEK/Dgo6GHCCsFLnvnPyZDvJ8o7bG7svan4e1KmY5JLSKZrtkPMJzvNmEUGsGlwFMWtNEhiGG01YiTIBcG3Z7N8lpi8Bcoti2Lq5chzApAwhHkykasHq218QPnpQ== a0:ce:a9:b4:c1:e8:c7:0e:ed:02:15:a0:58:56:34:64 matze ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAgEAyhhxTowK157f2bZiV5W9Vy0wemmo07EuH2un6boKjzQ8oNDB3AKUeLgef76spBZZQ668kkwL+qDcCssPuRUdrxuclTw7bgf+RtYV1dkxRxCXfMqT4Gxsz2VOAClImWY9cmWSkigzZfS0/R2JTTO+H2ohOqRGqLH0dNjswRYW33mMMCy6ksZgv4Bin9B5j6u9fsj4AcwtEMiNVKXMX9z6FELo9/ayWwvnEmzL9Bs8qR9+7jLbhaJJeJNZEh/teZu3w5/ahHtj0rWHZ0F/XNmAKFCS9M/buExXw3RF0PAByAJN+J4uMzcqx64guKoe5J1Sz5OZy+Tn/IICLv0oKggnfT1BPXwUAHm+8jGW/q1NFKXc2IanhS6wkBlJUWawEupJHj2TIdTI55mscsUH9g9a0WI7dSiZkkER8HoJYg5vZZ9y7OoklK8zPuGWPeOcIStCROXkTT/o0W/S7SVPKXeXrj3FNzV2Ibw8V3YSMJpA9f52kMkVp1Jzr8/L0i7vSuLIU628rVj1QBvmE1funKMEa9uWdqSgOZyVYVBzXzlahA8D/lBK8cX2Qplq9Wt/pUGPS+OczPwDW2IcRIdkVt/crCgxiYOaZxh853zMR1BHL9bZcwnL6voSgCi0uRzfBA4wEGCiZN7qoIVAs1axraet3G95rASzLI4qzlc5vtiUq98= 54:7e:57:18:15:f4:59:0f:d1:81:69:d9:dc:53:6e:0a robin@beismann.biz EOF Regenerate the initramfs: 1 2 3 sudo update-initramfs -u && \\ sudo update-grub && \\ sudo grub-install /dev/vda","title":"Install and configure busybox/dropbear"},{"location":"software/server/nextcloud/#mount-external-storage","text":"","title":"Mount external storage"},{"location":"software/server/nextcloud/#pre-requirements","text":"Install cifs-utils: 1 sudo apt install -y cifs-utils","title":"pre requirements"},{"location":"software/server/nextcloud/#mount-mounts","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 while true ; do \\ unset pw ; \\ unset pw_confirm ; \\ read -p \"cifs user: \" cifs_user && \\ read -s -p \"cifs password: \" pw ; echo \"\" && \\ read -s -p \"Confirm admin user password: \" pw_confirm ; echo \"\" && \\ if [[ \" $pw \" == \" $pw_confirm \" ]] ; then \\ break ; \\ else \\ echo \"Your passwords don't match. Try again!\" ; \\ echo \"\" ; \\ fi ; \\ done ; \\ if [[ ! -d /mnt/.cifs ]] ; then sudo mkdir /mnt/.cifs ; fi ; \\ sudo chmod 400 /mnt/.cifs ; \\ cat << EOF | sudo tee -a /etc/fstab && \\ sudo mount -a # Cifs shared storage //io.servercow.de/home /mnt/.cifs cifs username=$cifs_user,password=$pw,uid=www-data,gid=www-data,file_mode=0660,dir_mode=0770 0 0 EOF","title":"Mount mounts"},{"location":"software/server/nextcloud/#install-rclone","text":"Install rclone: 1 curl https://rclone.org/install.sh | sudo bash create mountpoint: 1 2 sudo mkdir /mnt/cifs && \\ sudo chmod 400 /mnt/cifs","title":"Install rclone"},{"location":"software/server/nextcloud/#configure","text":"Open rclone configuration: 1 2 3 4 5 if [[ ! -d /var/www/.conf/rclone/ ]] ; then sudo mkdir -p /var/www/.conf/rclone/ ; fi && \\ sudo chmod 700 /var/www/.conf/rclone/ && \\ sudo chown www-data:www-data /var/www/.conf/rclone/ && \\ sudo -u www-data rclone config --config /var/www/.conf/rclone/rclone.conf && \\ sudo chmod 600 /var/www/.conf/rclone/rclone.conf Configuration log: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 2018/09/09 21:09:35 NOTICE: Config file \"/var/www/.conf/rclone/rclone.conf\" not found - using defaults No remotes found - make a new one n) New remote s) Set configuration password q) Quit config n/s/q> n name> cifs_crypt Type of storage to configure. Enter a string value. Press Enter for the default (\"\"). Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / JottaCloud \\ \"jottacloud\" 14 / Local Disk \\ \"local\" 15 / Mega \\ \"mega\" 16 / Microsoft Azure Blob Storage \\ \"azureblob\" 17 / Microsoft OneDrive \\ \"onedrive\" 18 / OpenDrive \\ \"opendrive\" 19 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 20 / Pcloud \\ \"pcloud\" 21 / QingCloud Object Storage \\ \"qingstor\" 22 / SSH/SFTP Connection \\ \"sftp\" 23 / Webdav \\ \"webdav\" 24 / Yandex Disk \\ \"yandex\" 25 / http Connection \\ \"http\" Storage> 8 Remote to encrypt/decrypt. Normally should contain a ':' and a path, eg \"myremote:path/to/dir\", \"myremote:bucket\" or maybe \"myremote:\" (not recommended). Enter a string value. Press Enter for the default (\"\"). remote> /mnt/.cifs How to encrypt the filenames. Enter a string value. Press Enter for the default (\"standard\"). Choose a number from below, or type in your own value 1 / Don't encrypt the file names. Adds a \".bin\" extension only. \\ \"off\" 2 / Encrypt the filenames see the docs for the details. \\ \"standard\" 3 / Very simple filename obfuscation. \\ \"obfuscate\" filename_encryption> 2 Option to either encrypt directory names or leave them intact. Enter a boolean value (true or false). Press Enter for the default (\"true\"). Choose a number from below, or type in your own value 1 / Encrypt directory names. \\ \"true\" 2 / Don't encrypt directory names, leave them intact. \\ \"false\" directory_name_encryption> 1 Password or pass phrase for encryption. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? Please note that an obscured version of this password (and not the password itself) will be stored under your configuration file, so keep this generated password in a safe place. y) Yes n) No y/n> y Password or pass phrase for salt. Optional but recommended. Should be different to the previous password. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? Please note that an obscured version of this password (and not the password itself) will be stored under your configuration file, so keep this generated password in a safe place. y) Yes n) No y/n> y Edit advanced config? (y/n) y) Yes n) No y/n> y For all files listed show how the names encrypt. Enter a boolean value (true or false). Press Enter for the default (\"false\"). show_mapping> Remote config -------------------- [cifs_crypt] type = crypt remote = /mnt/.cifs filename_encryption = standard directory_name_encryption = true password = *** ENCRYPTED *** password2 = *** ENCRYPTED *** -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== cifs_crypt crypt e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> q Test if Rclone can mount: 1 screen -S 'rclone' sudo rclone mount --config /var/www/.conf/rclone/rclone.conf --uid $( id -u www-data ) --gid $( id -g www-data ) --umask 002 --allow-other cifs_crypt: /mnt/cifs Unmount it: 1 sudo fusermount -uz /mnt/cifs Create systemd startup script /etc/systemd/system/rclone.service : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 cat << EOF | sudo tee /etc/systemd/system/rclone.service [Unit] Description=rclone encryption mount AssertPathIsDirectory=/mnt/cifs [Service] Type=simple ExecStart=/usr/bin/rclone mount --config /var/www/.conf/rclone/rclone.conf --uid $(id -u www-data) --gid $(id -g www-data) --umask 007 --allow-other cifs_crypt: /mnt/cifs ExecStop=/bin/fusermount -uz /mnt/cifs Restart=on-abort RestartSec=5 StartLimitInterval=60s StartLimitBurst=3 [Install] WantedBy=default.target EOF Refresh your daemons: 1 sudo systemctl daemon-reload Activate the auto startup option and start the service: 1 2 sudo systemctl enable rclone.service && \\ sudo systemctl start rclone.service","title":"configure"},{"location":"software/server/nextcloud/#install-nextcloud","text":"","title":"Install Nextcloud"},{"location":"software/server/nextcloud/#nginxcertnpt","text":"Install nginx: 1 2 3 4 5 6 7 8 sudo apt update && \\ sudo apt install -y \\ nginx \\ python3 \\ python3-pip && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx","title":"Nginx/certnpt"},{"location":"software/server/nextcloud/#php-71","text":"Install php7.1: 1 2 3 sudo apt install software-properties-common -y && \\ sudo add-apt-repository ppa:ondrej/php -y && \\ sudo apt install php7.1-fpm php7.1-curl php7.1-cli php7.1-mysql php7.1-gd php7.1-iconv php7.1-xsl php7.1-json php7.1-intl php-pear php-imagick php7.1-dev php7.1-common php7.1-mbstring php7.1-zip php7.1-soap php-apcu -y Restart php-fpm and nginx: 1 sudo systemctl restart php7.1-fpm.service nginx.service Modify php.ini's: 1 2 3 4 5 6 7 8 9 10 11 sudo sed -i -e 's/^;date.timezone =*$/date.timezone = Europe\\/Berlin/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*cgi\\.fix_pathinfo=.*$/cgi.fix_pathinfo=0/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.enable=.*$/opcache.enable=1/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.enable_cli=.*$/opcache.enable_cli=1/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.interned_strings_buffer=.*$/opcache.interned_strings_buffer=8/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.max_accelerated_files=.*$/opcache.max_accelerated_files=10000/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.memory_consumption=.*$/opcache.memory_consumption=128/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.save_comments=.*$/opcache.save_comments=1/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^.*opcache\\.revalidate_freq=.*$/opcache.revalidate_freq=1/' /etc/php/7.1/fpm/php.ini && \\ sudo sed -i -e 's/^;date.timezone =*$/date.timezone = Europe\\/Berlin/' /etc/php/7.1/cli/php.ini && \\ sudo sed -i -e 's/^.*cgi\\.fix_pathinfo=.*$/cgi.fix_pathinfo=0/' /etc/php/7.1/cli/php.ini Uncomment those lines below: sudo vim /etc/php/7.1/fpm/pool.d/www.conf : 1 2 3 4 5 env[HOSTNAME] = $HOSTNAME env[PATH] = /usr/local/bin:/usr/bin:/bin env[TMP] = /tmp env[TMPDIR] = /tmp env[TEMP] = /tmp Restart php-fpm: 1 2 sudo systemctl restart php7.1-fpm && \\ sudo systemctl enable php7.1-fpm","title":"PHP 7.1"},{"location":"software/server/nextcloud/#mariadb","text":"Install MariaDB: 1 sudo apt install mariadb-server mariadb-client -y Secure MariaDB installtion: 1 sudo mysql_secure_installation Log: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we'll need the current password for the root user. If you've just installed MariaDB, and you haven't set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MariaDB root user without the proper authorisation. Set root password? [Y/n] y New password: Re-enter new password: Password updated successfully! Reloading privilege tables.. ... Success! By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] y ... Success! By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! Login to MariaDB as root : 1 sudo mysql -u root -p Warning CHANGE THE DEAFAULT PASSWORD! Create a Nextcloud DB: 1 2 3 4 create database nextcloud ; create user nextcloud @ localhost identified by 'PASSWORD' ; grant all privileges on nextcloud . * to nextcloud @ localhost identified by 'PASSWORD' ; flush privileges ; Exit MariaDB client with CTRL+D .","title":"MariaDB"},{"location":"software/server/nextcloud/#nginx-config","text":"Remove alll current servers: 1 sudo rm /etc/nginx/sites-enabled/* All general HTTP to HTTPS redirector: 1 2 3 4 5 6 7 8 9 10 read -r -d '' read_tmp<< \"EOF\" server { \\t listen 80 default_server ; \\t listen [ :: ] :80 default_server ; \\t server_name _ ; \\t return 301 https:// $host$request_uri ; } EOF echo -e \" $read_tmp \" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf Add ssl_params file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF Add nextcloud server: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-cloud.pphg.tech.conf && \\ sudo ln -s ../sites-available/10-cloud.pphg.tech.conf /etc/nginx/sites-enabled/10-cloud.pphg.tech.conf upstream php-handler { \\t#server 127.0.0.1:9000; \\tserver unix:/run/php/php7.1-fpm.sock; } server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tcloud.pphg.tech; \\taccess_log\\t/var/log/nginx/cloud.pphg.tech_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/cloud.pphg.tech_error.log warn; \\t# Add headers to serve security related headers \\t# Before enabling Strict-Transport-Security headers please read into this \\t# topic first. \\t# add_header Strict-Transport-Security \"max-age=15552000; \\t# includeSubDomains; preload;\"; \\t# \\t# WARNING: Only add the preload option once you read about \\t# the consequences in https://hstspreload.org/. This option \\t# will add the domain to a hardcoded list that is shipped \\t# in all major browsers and getting removed from this list \\t# could take several months. \\tadd_header X-Content-Type-Options nosniff; \\tadd_header X-XSS-Protection \"1; mode=block\"; \\tadd_header X-Robots-Tag none; \\tadd_header X-Download-Options noopen; \\tadd_header X-Permitted-Cross-Domain-Policies none; \\tadd_header 'Referrer-Policy' 'strict-origin'; \\t# Path to the root of your installation \\troot /var/www/nextcloud/; \\tlocation = /data/htaccesstest.txt { \\t\\tallow all; \\t\\tlog_not_found off; \\t\\taccess_log off; \\t} \\tlocation = /robots.txt { \\t\\tallow all; \\t\\tlog_not_found off; \\t\\taccess_log off; \\t} \\tlocation = /.well-known/carddav { \\t\\treturn 301 \\$scheme://\\$host/remote.php/dav; \\t} \\tlocation = /.well-known/caldav { \\t\\treturn 301 \\$scheme://\\$host/remote.php/dav; \\t} \\t# set max upload size \\tclient_max_body_size 512M; \\tfastcgi_buffers 64 4K; \\t# Enable gzip but do not remove ETag headers \\tgzip on; \\tgzip_vary on; \\tgzip_comp_level 4; \\tgzip_min_length 256; \\tgzip_proxied expired no-cache no-store private no_last_modified no_etag auth; \\tgzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; \\tlocation / { \\t\\trewrite ^ /index.php\\$request_uri; \\t} \\tlocation ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ { \\t\\tdeny all; \\t} \\tlocation ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) { \\t\\tdeny all; \\t} \\tlocation ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+)\\.php(?:\\$|/) { \\t\\tfastcgi_split_path_info ^(.+?\\.php)(/.*)\\$; \\t\\tinclude fastcgi_params; \\t\\tfastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name; \\t\\tfastcgi_param PATH_INFO \\$fastcgi_path_info; \\t\\tfastcgi_param HTTPS on; \\t\\t#Avoid sending the security headers twice \\t\\tfastcgi_param modHeadersAvailable true; \\t\\tfastcgi_param front_controller_active true; \\t\\tfastcgi_pass php-handler; \\t\\tfastcgi_intercept_errors on; \\t\\tfastcgi_request_buffering off; \\t} \\tlocation ~ ^/(?:updater|ocs-provider)(?:\\$|/) { \\t\\ttry_files \\$uri/ =404; \\t\\tindex index.php; \\t} \\t# Adding the cache control header for js and css files \\t# Make sure it is BELOW the PHP block \\tlocation ~ \\.(?:css|js|woff|svg|gif)\\$ { \\t\\ttry_files \\$uri /index.php\\$request_uri; \\t\\tadd_header Cache-Control \"public, max-age=15778463\"; \\t\\t# Add headers to serve security related headers (It is intended to \\t\\t# have those duplicated to the ones above) \\t\\t# Before enabling Strict-Transport-Security headers please read into \\t\\t# this topic first. \\t\\t# add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\"; \\t\\t# \\t\\t# WARNING: Only add the preload option once you read about \\t\\t# the consequences in https://hstspreload.org/. This option \\t\\t# will add the domain to a hardcoded list that is shipped \\t\\t# in all major browsers and getting removed from this list \\t\\t# could take several months. \\t\\tadd_header X-Content-Type-Options nosniff; \\t\\tadd_header X-XSS-Protection \"1; mode=block\"; \\t\\tadd_header X-Robots-Tag none; \\t\\tadd_header X-Download-Options noopen; \\t\\tadd_header X-Permitted-Cross-Domain-Policies none; \\t\\t# Optional: Don't log access to assets \\t\\taccess_log off; \\t} \\tlocation ~ \\.(?:png|html|ttf|ico|jpg|jpeg)\\$ { \\t\\ttry_files \\$uri /index.php\\$request_uri; \\t\\t# Optional: Don't log access to other assets \\t\\taccess_log off; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Check if the nginx configuration is correct: 1 sudo nginx -t Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. 1 2 3 sudo certbot --nginx -d cloud.pphg.tech && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/cloud.pphg.tech/chain.pem;' /etc/nginx/sites-available/10-cloud.pphg.tech.conf && \\ sudo systemctl reload nginx.service Add cronjob for renewing cetificates: sudo crontab -e : 1 0 */12 * * * /usr/local/bin/certbot renew","title":"Nginx config"},{"location":"software/server/nextcloud/#download-nextcloud","text":"Install required packages: 1 sudo apt install wget unzip zip -y Download newstest Nextcloud stable release into /var/www/ : 1 2 3 4 5 cd /var/www/ && \\ sudo wget https://download.nextcloud.com/server/releases/latest.zip && \\ sudo unzip latest.zip && \\ sudo rm latest.zip && \\ sudo chown -R www-data:www-data /var/www/nextcloud/ Create a Nextcloud Data directory: 1 sudo -u www-data mkdir /mnt/cifs/ncdata","title":"Download Nextcloud"},{"location":"software/server/nextcloud/#install-nextcloud_1","text":"Go to https://cloud.pphg.tech and use the following varaibles: * User: root * PW: *** * Data folder: /mnt/cifs/ncdata/ * Database user: nextcloud * Database pw: *** * Database name: nextcloud Enable the Audit / Logging App! Afterwards go to Settings > Basic settings and setup the email server: * Background jobs * Cron * Email server * to your needs Add the following to the /var/www/nextcloud/config/config.php file: 1 'memcache.local' => '\\OC\\Memcache\\APCu',","title":"Install NextCloud"},{"location":"software/server/nextcloud/#security","text":"","title":"Security"},{"location":"software/server/nextcloud/#iptables","text":"Explanation iptables rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow quassel incoming iptables -t filter -A INPUT -i ens3 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow ESTABLISHED and RELATED connection (important for outgoing connections!) iptables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on iptables -P INPUT DROP # Policy ACCEPT OUTPUT iptables -P OUTPUT ACCEPT Set up needed iptables rules: 1 2 3 4 5 6 7 8 sudo iptables -A OUTPUT -o lo -j ACCEPT ; \\ sudo iptables -A INPUT -i lo -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i ens3 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i ens3 -p icmp -j ACCEPT ; \\ sudo iptables -P INPUT DROP ; \\ sudo iptables -P OUTPUT ACCEPT Set up needed ip6tables rules: 1 2 3 4 5 6 7 8 sudo ip6tables -A OUTPUT -o lo -j ACCEPT ; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p tcp -m multiport --dports 80 ,443 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i ens3 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i ens3 -p ipv6-icmp -j ACCEPT ; \\ sudo ip6tables -P INPUT DROP ; \\ sudo ip6tables -P OUTPUT ACCEPT Persist iptables rules: 1 2 3 sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"iptables"},{"location":"software/server/nextcloud/#fail2ban-sshnextcloud","text":"","title":"fail2Ban (SSH/Nextcloud)"},{"location":"software/server/nextcloud/#backup-nextcloud","text":"","title":"Backup Nextcloud"},{"location":"software/server/quassel/","text":"Quassel-IRC \u00b6 OS: Ubuntu 18.04 LTS Initial Server setup \u00b6 Update System \u00b6 1 apt update && apt full-upgrade -y Fix locale \u00b6 1 2 3 4 5 6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF Edit .bashrc \u00b6 /root/.bashrc / /etc/skel/.bashrc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi Make vim colored with dark background settinfs \u00b6 1 2 3 4 5 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF Create a new user user \u00b6 1 2 3 4 5 6 7 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/ Change the SSH deamon to allow only SSH-keys \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF Delete root's authorized_keys file \u00b6 Attention Please check before if you can login to the user user with your ssh-key! 1 rm ~/.ssh/authorized_keys Important Log out and re login as user ! Install base packages \u00b6 1 2 3 4 5 6 7 8 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop quassel core \u00b6 Pre requirements \u00b6 Add the PPA for quassel to get the latest stable version: 1 2 sudo add-apt-repository ppa:mamarley/quassel && \\ sudo apt update Install cerbot (needed for ssl): 1 sudo apt install -y certbot Install quassel core \u00b6 1 2 sudo apt install -y quassel-core && \\ systemctl status quasselcore.service Setup Let's encrypt SSL \u00b6 1 2 3 4 5 6 sudo certbot certonly --standalone -d quassel.mischaufen.de && \\ sudo mv /var/lib/quassel/quasselCert.pem /var/lib/quassel/quasselCert.pem.old && \\ sudo cat /etc/letsencrypt/live/quassel.mischaufen.de/ { fullchain,privkey } .pem | sudo tee -a /var/lib/quassel/quasselCert.pem && \\ sudo chown quasselcore:quassel /var/lib/quassel/quasselCert.pem && \\ sudo chmod 600 /var/lib/quassel/quasselCert.pem && \\ sudo systemctl restart quasselcore Setup automatic certificate renew \u00b6 Add a deploy hook script to /srv/certbot : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 deamon = 'quasselcore.service' ; \\ target_domain = 'quassel.mischaufen.de' ; \\ sudo mkdir -p /srv/cerbot && \\ sudo chmod 655 /srv/cerbot && \\ cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /srv/cerbot/deploy_hook.sh && \\ sudo chmod 744 /srv/cerbot/deploy_hook.sh #!/bin/bash set -e for domain in \\$RENEWED_DOMAINS; do \\tcase \\$domain in \\t$target_domain) \\t\\tdaemon_cert_root='/var/lib/quassel' \\t\\t# Make sure the certificate and private key files are \\t\\t# never world readable, even just for an instant while \\t\\t# we're copying them into daemon_cert_root. \\t\\tumask 177 \\t\\trm \\$daemon_cert_root/quasselCert.pem \\t\\tcat \\$RENEWED_LINEAGE/{fullchain,privkey}.pem >> \"\\$daemon_cert_root/quasselCert.pem\" \\t\\t# Apply the proper file ownership and permissions for \\t\\t# the $deamon daemon to read its certificate and key. \\t\\tchown quasselcore:quassel \"\\$daemon_cert_root/quasselCert.pem\" \\t\\tchmod 400 \\$daemon_cert_root/quasselCert.pem \\t\\tsystemctl restart $deamon >/dev/null \\t\\t;; \\tesac done EOF Add cronjob for renewing cetificates. 1 sudo crontab -e Add at the end of the file: 1 0 */12 * * * /usr/local/bin/certbot renew --deploy-hook /srv/cerbot/deploy_hook.sh Add user management scripts \u00b6 Add user script \u00b6 quassel_add.sh : 1 2 3 4 5 6 cat << EOF | sudo tee /usr/local/sbin/quassel_add && \\ sudo chmod 500 /usr/local/sbin/quassel_add #!/bin/sh sudo -u quasselcore quasselcore --configdir=/var/lib/quassel --add-user EOF quassel_change_pw.sh : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat << EOF | sudo tee /usr/local/sbin/quassel_change_pw && \\ sudo chmod 500 /usr/local/sbin/quassel_change_pw #!/bin/sh die () { echo >&2 \"\\$@\" exit 1 } [ \"\\$#\" -eq 1 ] || die \"Username required!\\n\\nRun:\\t'\\$0 <username>'\\ne.g.:\\t'\\$0 admin'\" systemctl stop quasselcore.service sudo -u quasselcore quasselcore --configdir=/var/lib/quassel --change-userpass=\\$1 systemctl start quasselcore.service EOF quassel_del.sh : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 if ! [ -x \" $( command -v sqlite3 ) \" ] ; then sudo apt install -y sqlite3 ; fi && \\ cat << EOF | sudo tee /usr/local/sbin/quassel_del && \\ sudo chmod 500 /usr/local/sbin/quassel_del #!/bin/sh # # Delete Quasselcore users from your SQLite database # exeq() { # Execute SQL Query result=\\$(sqlite3 \"\\${QUASSELDB}\" \"\\${1}\") echo \"\\${result}\" } usage() { echo \"Usage: \\${SCRIPT} username [database]\" } print_users() { sqlite3 \"\\${QUASSELDB}\" \"SELECT quasseluser.userid, quasseluser.username FROM quasseluser ORDER BY quasseluser.userid;\" } # Main body SCRIPT=\"\\${0}\" QUASSELDB=\"\" USER=\"\" if [ -z \"\\${2}\" ] ; then # No file supplied. QUASSELDB=\"/var/lib/quassel/quassel-storage.sqlite\" else QUASSELDB=\"\\${2}\" fi if [ -z \"\\${1}\" ] ; then echo \"No user supplied.\" echo \"Pick one: \" print_users usage exit 1 else USER=\"${1}\" fi if [ -e \"\\${QUASSELDB}\" ] ; then echo \"SELECTED DB: \\${QUASSELDB}\" else echo \"SELECTED DB '\\${QUASSELDB}' does not exist.\" usage exit 2 fi if [ -z \\$(exeq \"SELECT quasseluser.username FROM quasseluser WHERE username = '\\${USER}';\") ] ; then echo \"SELECTED USER '\\${USER}' does not exist.\" print_users usage exit 3 else echo \"SELECTED USER: \\${USER}\" fi # Sadly SQLITE does not allow DELETE statements that JOIN tables. # All queries are written with a subquery. # Contact me if you know a better way. backlogq=\"DELETE FROM backlog WHERE backlog.bufferid in ( SELECT bufferid FROM buffer, quasseluser WHERE buffer.userid = quasseluser.userid AND quasseluser.username = '\\${USER}' );\" bufferq=\"DELETE FROM buffer WHERE buffer.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" ircserverq=\"DELETE FROM ircserver WHERE ircserver.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" identity_nickq=\"DELETE FROM identity_nick WHERE identity_nick.identityid in ( SELECT identityid FROM quasseluser, identity WHERE quasseluser.userid = identity.userid AND quasseluser.username = '\\${USER}' );\" identityq=\"DELETE FROM identity WHERE identity.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" networkq=\"DELETE FROM network WHERE network.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" usersettingq=\"DELETE FROM user_setting WHERE user_setting.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" quasseluserq=\"DELETE FROM quasseluser WHERE quasseluser.username = '\\${USER}' ;\" exeq \"\\${backlogq}\" exeq \"\\${bufferq}\" exeq \"\\${ircserverq}\" exeq \"\\${identity_nickq}\" exeq \"\\${identityq}\" exeq \"\\${networkq}\" exeq \"\\${usersettingq}\" exeq \"\\${quasseluserq}\" EOF Backup \u00b6 Pre requirements \u00b6 Install rclone: 1 curl https://rclone.org/install.sh | sudo bash Configure rclone: 1 sudo -H rclone config Config log: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 2018/08/28 14:23:13 NOTICE: Config file \"/root/.config/rclone/rclone.conf\" not found - using defaults No remotes found - make a new one n) New remote s) Set configuration password q) Quit config n/s/q> n name> gteamdrive_quassel Type of storage to configure. Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / Local Disk \\ \"local\" 14 / Mega \\ \"mega\" 15 / Microsoft Azure Blob Storage \\ \"azureblob\" 16 / Microsoft OneDrive \\ \"onedrive\" 17 / OpenDrive \\ \"opendrive\" 18 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 19 / Pcloud \\ \"pcloud\" 20 / QingCloud Object Storage \\ \"qingstor\" 21 / SSH/SFTP Connection \\ \"sftp\" 22 / Webdav \\ \"webdav\" 23 / Yandex Disk \\ \"yandex\" 24 / http Connection \\ \"http\" Storage> 11 Google Application Client Id - leave blank normally. client_id> *** Google Application Client Secret - leave blank normally. client_secret> *** Scope that rclone should use when requesting access from drive. Choose a number from below, or type in your own value 1 / Full access all files, excluding Application Data Folder. \\ \"drive\" 2 / Read-only access to file metadata and file contents. \\ \"drive.readonly\" / Access to files created by rclone only. 3 | These are visible in the drive website. | File authorization is revoked when the user deauthorizes the app. \\ \"drive.file\" / Allows read and write access to the Application Data folder. 4 | This is not visible in the drive website. \\ \"drive.appfolder\" / Allows read-only access to file metadata but 5 | does not allow any access to read or download file content. \\ \"drive.metadata.readonly\" scope> 1 ID of the root folder - leave blank normally. Fill in to access \"Computers\" folders. (see docs). root_folder_id> Service Account Credentials JSON file path - leave blank normally. Needed only if you want use SA instead of interactive login. service_account_file> Remote config Use auto config? * Say Y if not sure * Say N if you are working on a remote or headless machine or Y didn't work y) Yes n) No y/n> n If your browser doesn't open automatically go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=offline&client_id=*** Log in and authorize rclone for access Enter verification code> *** Configure this as a team drive? y) Yes n) No y/n> y Fetching team drive list... Choose a number from below, or type in your own value 1 / *** \\ \"***\" 2 / *** \\ \"***\" 3 / quassel \\ \"***\" Enter a Team Drive ID> 3 -------------------- [gteamdrive_quassel] type = drive client_id = *** client_secret = *** scope = drive root_folder_id = service_account_file = token = *** team_drive = <drive id from quassel> -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== gteamdrive_quassel drive e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> n name> quassel_crypt Type of storage to configure. Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / Local Disk \\ \"local\" 14 / Mega \\ \"mega\" 15 / Microsoft Azure Blob Storage \\ \"azureblob\" 16 / Microsoft OneDrive \\ \"onedrive\" 17 / OpenDrive \\ \"opendrive\" 18 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 19 / Pcloud \\ \"pcloud\" 20 / QingCloud Object Storage \\ \"qingstor\" 21 / SSH/SFTP Connection \\ \"sftp\" 22 / Webdav \\ \"webdav\" 23 / Yandex Disk \\ \"yandex\" 24 / http Connection \\ \"http\" Storage> 8 Remote to encrypt/decrypt. Normally should contain a ':' and a path, eg \"myremote:path/to/dir\", \"myremote:bucket\" or maybe \"myremote:\" (not recommended). remote> gteamdrive_quassel:/ How to encrypt the filenames. Choose a number from below, or type in your own value 1 / Don't encrypt the file names. Adds a \".bin\" extension only. \\ \"off\" 2 / Encrypt the filenames see the docs for the details. \\ \"standard\" 3 / Very simple filename obfuscation. \\ \"obfuscate\" filename_encryption> 2 Option to either encrypt directory names or leave them intact. Choose a number from below, or type in your own value 1 / Encrypt directory names. \\ \"true\" 2 / Don't encrypt directory names, leave them intact. \\ \"false\" directory_name_encryption> 1 Password or pass phrase for encryption. y) Yes type in my own password g) Generate random password y/g> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? y) Yes n) No y/n> y Password or pass phrase for salt. Optional but recommended. Should be different to the previous password. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? y) Yes n) No y/n> y Remote config -------------------- [quassel_crypt] type = crypt remote = gteamdrive_quassel:/ filename_encryption = standard directory_name_encryption = true password = *** ENCRYPTED *** password2 = *** ENCRYPTED *** -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== gteamdrive_quassel drive quassel_crypt crypt e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> q Backup script \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 cat << EOF | sudo tee /usr/local/sbin/quassel_backup && \\ sudo chmod 500 /usr/local/sbin/quassel_backup #!/bin/bash user='quasselcore' database='/var/lib/quassel/quassel-storage.sqlite' backup_target='/tmp' backup_name='quassel' date=\\$(date +\"%Y-%m-%d_%H:%m\") # Backup database sudo -u \\${user} sqlite3 \\${database} \".backup \\${backup_target}/\\${backup_name}_\\${date}.sqlite\" # Upload database to google rclone copy \\${backup_target}/\\${backup_name}_\\${date}.sqlite quassel_crypt: # remove local backup file rm \\${backup_target}/\\${backup_name}_\\${date}.sqlite EOF Cronjob \u00b6 1 sudo crontab -e Add at the end of the file: 1 @hourly /usr/local/sbin/quassel_backup Security \u00b6 iptables \u00b6 Explanation iptables rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow quassel incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow ESTABLISHED and RELATED connection (important for outgoing connections!) iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on iptables -P INPUT DROP ; # Policy ACCEPT OUTPUT iptables -P OUTPUT ACCEPT Set up needed iptables rules: 1 2 3 4 5 6 7 8 sudo iptables -A OUTPUT -o lo -j ACCEPT ; \\ sudo iptables -A INPUT -i lo -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p icmp -j ACCEPT ; \\ sudo iptables -P INPUT DROP ; \\ sudo iptables -P OUTPUT ACCEPT Set up needed ip6tables rules: 1 2 3 4 5 6 7 8 sudo ip6tables -A OUTPUT -o lo -j ACCEPT ; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p ipv6-icmp -j ACCEPT ; \\ sudo ip6tables -P INPUT DROP ; \\ sudo ip6tables -P OUTPUT ACCEPT Persist iptables rules: 1 2 3 sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"Quassel"},{"location":"software/server/quassel/#quassel-irc","text":"OS: Ubuntu 18.04 LTS","title":"Quassel-IRC"},{"location":"software/server/quassel/#initial-server-setup","text":"","title":"Initial Server setup"},{"location":"software/server/quassel/#update-system","text":"1 apt update && apt full-upgrade -y","title":"Update System"},{"location":"software/server/quassel/#fix-locale","text":"1 2 3 4 5 6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF","title":"Fix locale"},{"location":"software/server/quassel/#edit-bashrc","text":"/root/.bashrc / /etc/skel/.bashrc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi","title":"Edit .bashrc"},{"location":"software/server/quassel/#make-vim-colored-with-dark-background-settinfs","text":"1 2 3 4 5 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Make vim colored with dark background settinfs"},{"location":"software/server/quassel/#create-a-new-user-user","text":"1 2 3 4 5 6 7 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/","title":"Create a new user user"},{"location":"software/server/quassel/#change-the-ssh-deamon-to-allow-only-ssh-keys","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF","title":"Change the SSH deamon to allow only SSH-keys"},{"location":"software/server/quassel/#delete-roots-authorized_keys-file","text":"Attention Please check before if you can login to the user user with your ssh-key! 1 rm ~/.ssh/authorized_keys Important Log out and re login as user !","title":"Delete root's authorized_keys file"},{"location":"software/server/quassel/#install-base-packages","text":"1 2 3 4 5 6 7 8 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ unzip \\ unrar \\ screen \\ tmux \\ htop","title":"Install base packages"},{"location":"software/server/quassel/#quassel-core","text":"","title":"quassel core"},{"location":"software/server/quassel/#pre-requirements","text":"Add the PPA for quassel to get the latest stable version: 1 2 sudo add-apt-repository ppa:mamarley/quassel && \\ sudo apt update Install cerbot (needed for ssl): 1 sudo apt install -y certbot","title":"Pre requirements"},{"location":"software/server/quassel/#install-quassel-core","text":"1 2 sudo apt install -y quassel-core && \\ systemctl status quasselcore.service","title":"Install quassel core"},{"location":"software/server/quassel/#setup-lets-encrypt-ssl","text":"1 2 3 4 5 6 sudo certbot certonly --standalone -d quassel.mischaufen.de && \\ sudo mv /var/lib/quassel/quasselCert.pem /var/lib/quassel/quasselCert.pem.old && \\ sudo cat /etc/letsencrypt/live/quassel.mischaufen.de/ { fullchain,privkey } .pem | sudo tee -a /var/lib/quassel/quasselCert.pem && \\ sudo chown quasselcore:quassel /var/lib/quassel/quasselCert.pem && \\ sudo chmod 600 /var/lib/quassel/quasselCert.pem && \\ sudo systemctl restart quasselcore","title":"Setup Let's encrypt SSL"},{"location":"software/server/quassel/#setup-automatic-certificate-renew","text":"Add a deploy hook script to /srv/certbot : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 deamon = 'quasselcore.service' ; \\ target_domain = 'quassel.mischaufen.de' ; \\ sudo mkdir -p /srv/cerbot && \\ sudo chmod 655 /srv/cerbot && \\ cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /srv/cerbot/deploy_hook.sh && \\ sudo chmod 744 /srv/cerbot/deploy_hook.sh #!/bin/bash set -e for domain in \\$RENEWED_DOMAINS; do \\tcase \\$domain in \\t$target_domain) \\t\\tdaemon_cert_root='/var/lib/quassel' \\t\\t# Make sure the certificate and private key files are \\t\\t# never world readable, even just for an instant while \\t\\t# we're copying them into daemon_cert_root. \\t\\tumask 177 \\t\\trm \\$daemon_cert_root/quasselCert.pem \\t\\tcat \\$RENEWED_LINEAGE/{fullchain,privkey}.pem >> \"\\$daemon_cert_root/quasselCert.pem\" \\t\\t# Apply the proper file ownership and permissions for \\t\\t# the $deamon daemon to read its certificate and key. \\t\\tchown quasselcore:quassel \"\\$daemon_cert_root/quasselCert.pem\" \\t\\tchmod 400 \\$daemon_cert_root/quasselCert.pem \\t\\tsystemctl restart $deamon >/dev/null \\t\\t;; \\tesac done EOF Add cronjob for renewing cetificates. 1 sudo crontab -e Add at the end of the file: 1 0 */12 * * * /usr/local/bin/certbot renew --deploy-hook /srv/cerbot/deploy_hook.sh","title":"Setup automatic certificate renew"},{"location":"software/server/quassel/#add-user-management-scripts","text":"","title":"Add user management scripts"},{"location":"software/server/quassel/#add-user-script","text":"quassel_add.sh : 1 2 3 4 5 6 cat << EOF | sudo tee /usr/local/sbin/quassel_add && \\ sudo chmod 500 /usr/local/sbin/quassel_add #!/bin/sh sudo -u quasselcore quasselcore --configdir=/var/lib/quassel --add-user EOF quassel_change_pw.sh : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat << EOF | sudo tee /usr/local/sbin/quassel_change_pw && \\ sudo chmod 500 /usr/local/sbin/quassel_change_pw #!/bin/sh die () { echo >&2 \"\\$@\" exit 1 } [ \"\\$#\" -eq 1 ] || die \"Username required!\\n\\nRun:\\t'\\$0 <username>'\\ne.g.:\\t'\\$0 admin'\" systemctl stop quasselcore.service sudo -u quasselcore quasselcore --configdir=/var/lib/quassel --change-userpass=\\$1 systemctl start quasselcore.service EOF quassel_del.sh : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 if ! [ -x \" $( command -v sqlite3 ) \" ] ; then sudo apt install -y sqlite3 ; fi && \\ cat << EOF | sudo tee /usr/local/sbin/quassel_del && \\ sudo chmod 500 /usr/local/sbin/quassel_del #!/bin/sh # # Delete Quasselcore users from your SQLite database # exeq() { # Execute SQL Query result=\\$(sqlite3 \"\\${QUASSELDB}\" \"\\${1}\") echo \"\\${result}\" } usage() { echo \"Usage: \\${SCRIPT} username [database]\" } print_users() { sqlite3 \"\\${QUASSELDB}\" \"SELECT quasseluser.userid, quasseluser.username FROM quasseluser ORDER BY quasseluser.userid;\" } # Main body SCRIPT=\"\\${0}\" QUASSELDB=\"\" USER=\"\" if [ -z \"\\${2}\" ] ; then # No file supplied. QUASSELDB=\"/var/lib/quassel/quassel-storage.sqlite\" else QUASSELDB=\"\\${2}\" fi if [ -z \"\\${1}\" ] ; then echo \"No user supplied.\" echo \"Pick one: \" print_users usage exit 1 else USER=\"${1}\" fi if [ -e \"\\${QUASSELDB}\" ] ; then echo \"SELECTED DB: \\${QUASSELDB}\" else echo \"SELECTED DB '\\${QUASSELDB}' does not exist.\" usage exit 2 fi if [ -z \\$(exeq \"SELECT quasseluser.username FROM quasseluser WHERE username = '\\${USER}';\") ] ; then echo \"SELECTED USER '\\${USER}' does not exist.\" print_users usage exit 3 else echo \"SELECTED USER: \\${USER}\" fi # Sadly SQLITE does not allow DELETE statements that JOIN tables. # All queries are written with a subquery. # Contact me if you know a better way. backlogq=\"DELETE FROM backlog WHERE backlog.bufferid in ( SELECT bufferid FROM buffer, quasseluser WHERE buffer.userid = quasseluser.userid AND quasseluser.username = '\\${USER}' );\" bufferq=\"DELETE FROM buffer WHERE buffer.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" ircserverq=\"DELETE FROM ircserver WHERE ircserver.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" identity_nickq=\"DELETE FROM identity_nick WHERE identity_nick.identityid in ( SELECT identityid FROM quasseluser, identity WHERE quasseluser.userid = identity.userid AND quasseluser.username = '\\${USER}' );\" identityq=\"DELETE FROM identity WHERE identity.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" networkq=\"DELETE FROM network WHERE network.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" usersettingq=\"DELETE FROM user_setting WHERE user_setting.userid in ( SELECT userid FROM quasseluser WHERE quasseluser.username = '\\${USER}' );\" quasseluserq=\"DELETE FROM quasseluser WHERE quasseluser.username = '\\${USER}' ;\" exeq \"\\${backlogq}\" exeq \"\\${bufferq}\" exeq \"\\${ircserverq}\" exeq \"\\${identity_nickq}\" exeq \"\\${identityq}\" exeq \"\\${networkq}\" exeq \"\\${usersettingq}\" exeq \"\\${quasseluserq}\" EOF","title":"Add user script"},{"location":"software/server/quassel/#backup","text":"","title":"Backup"},{"location":"software/server/quassel/#pre-requirements_1","text":"Install rclone: 1 curl https://rclone.org/install.sh | sudo bash Configure rclone: 1 sudo -H rclone config Config log: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 2018/08/28 14:23:13 NOTICE: Config file \"/root/.config/rclone/rclone.conf\" not found - using defaults No remotes found - make a new one n) New remote s) Set configuration password q) Quit config n/s/q> n name> gteamdrive_quassel Type of storage to configure. Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / Local Disk \\ \"local\" 14 / Mega \\ \"mega\" 15 / Microsoft Azure Blob Storage \\ \"azureblob\" 16 / Microsoft OneDrive \\ \"onedrive\" 17 / OpenDrive \\ \"opendrive\" 18 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 19 / Pcloud \\ \"pcloud\" 20 / QingCloud Object Storage \\ \"qingstor\" 21 / SSH/SFTP Connection \\ \"sftp\" 22 / Webdav \\ \"webdav\" 23 / Yandex Disk \\ \"yandex\" 24 / http Connection \\ \"http\" Storage> 11 Google Application Client Id - leave blank normally. client_id> *** Google Application Client Secret - leave blank normally. client_secret> *** Scope that rclone should use when requesting access from drive. Choose a number from below, or type in your own value 1 / Full access all files, excluding Application Data Folder. \\ \"drive\" 2 / Read-only access to file metadata and file contents. \\ \"drive.readonly\" / Access to files created by rclone only. 3 | These are visible in the drive website. | File authorization is revoked when the user deauthorizes the app. \\ \"drive.file\" / Allows read and write access to the Application Data folder. 4 | This is not visible in the drive website. \\ \"drive.appfolder\" / Allows read-only access to file metadata but 5 | does not allow any access to read or download file content. \\ \"drive.metadata.readonly\" scope> 1 ID of the root folder - leave blank normally. Fill in to access \"Computers\" folders. (see docs). root_folder_id> Service Account Credentials JSON file path - leave blank normally. Needed only if you want use SA instead of interactive login. service_account_file> Remote config Use auto config? * Say Y if not sure * Say N if you are working on a remote or headless machine or Y didn't work y) Yes n) No y/n> n If your browser doesn't open automatically go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=offline&client_id=*** Log in and authorize rclone for access Enter verification code> *** Configure this as a team drive? y) Yes n) No y/n> y Fetching team drive list... Choose a number from below, or type in your own value 1 / *** \\ \"***\" 2 / *** \\ \"***\" 3 / quassel \\ \"***\" Enter a Team Drive ID> 3 -------------------- [gteamdrive_quassel] type = drive client_id = *** client_secret = *** scope = drive root_folder_id = service_account_file = token = *** team_drive = <drive id from quassel> -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== gteamdrive_quassel drive e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> n name> quassel_crypt Type of storage to configure. Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / Local Disk \\ \"local\" 14 / Mega \\ \"mega\" 15 / Microsoft Azure Blob Storage \\ \"azureblob\" 16 / Microsoft OneDrive \\ \"onedrive\" 17 / OpenDrive \\ \"opendrive\" 18 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 19 / Pcloud \\ \"pcloud\" 20 / QingCloud Object Storage \\ \"qingstor\" 21 / SSH/SFTP Connection \\ \"sftp\" 22 / Webdav \\ \"webdav\" 23 / Yandex Disk \\ \"yandex\" 24 / http Connection \\ \"http\" Storage> 8 Remote to encrypt/decrypt. Normally should contain a ':' and a path, eg \"myremote:path/to/dir\", \"myremote:bucket\" or maybe \"myremote:\" (not recommended). remote> gteamdrive_quassel:/ How to encrypt the filenames. Choose a number from below, or type in your own value 1 / Don't encrypt the file names. Adds a \".bin\" extension only. \\ \"off\" 2 / Encrypt the filenames see the docs for the details. \\ \"standard\" 3 / Very simple filename obfuscation. \\ \"obfuscate\" filename_encryption> 2 Option to either encrypt directory names or leave them intact. Choose a number from below, or type in your own value 1 / Encrypt directory names. \\ \"true\" 2 / Don't encrypt directory names, leave them intact. \\ \"false\" directory_name_encryption> 1 Password or pass phrase for encryption. y) Yes type in my own password g) Generate random password y/g> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? y) Yes n) No y/n> y Password or pass phrase for salt. Optional but recommended. Should be different to the previous password. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n> g Password strength in bits. 64 is just about memorable 128 is secure 1024 is the maximum Bits> 1024 Your password is: *** Use this password? y) Yes n) No y/n> y Remote config -------------------- [quassel_crypt] type = crypt remote = gteamdrive_quassel:/ filename_encryption = standard directory_name_encryption = true password = *** ENCRYPTED *** password2 = *** ENCRYPTED *** -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d> y Current remotes: Name Type ==== ==== gteamdrive_quassel drive quassel_crypt crypt e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q> q","title":"Pre requirements"},{"location":"software/server/quassel/#backup-script","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 cat << EOF | sudo tee /usr/local/sbin/quassel_backup && \\ sudo chmod 500 /usr/local/sbin/quassel_backup #!/bin/bash user='quasselcore' database='/var/lib/quassel/quassel-storage.sqlite' backup_target='/tmp' backup_name='quassel' date=\\$(date +\"%Y-%m-%d_%H:%m\") # Backup database sudo -u \\${user} sqlite3 \\${database} \".backup \\${backup_target}/\\${backup_name}_\\${date}.sqlite\" # Upload database to google rclone copy \\${backup_target}/\\${backup_name}_\\${date}.sqlite quassel_crypt: # remove local backup file rm \\${backup_target}/\\${backup_name}_\\${date}.sqlite EOF","title":"Backup script"},{"location":"software/server/quassel/#cronjob","text":"1 sudo crontab -e Add at the end of the file: 1 @hourly /usr/local/sbin/quassel_backup","title":"Cronjob"},{"location":"software/server/quassel/#security","text":"","title":"Security"},{"location":"software/server/quassel/#iptables","text":"Explanation iptables rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow quassel incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow ESTABLISHED and RELATED connection (important for outgoing connections!) iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT # Policy DROP INPUT on iptables -P INPUT DROP ; # Policy ACCEPT OUTPUT iptables -P OUTPUT ACCEPT Set up needed iptables rules: 1 2 3 4 5 6 7 8 sudo iptables -A OUTPUT -o lo -j ACCEPT ; \\ sudo iptables -A INPUT -i lo -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo iptables -t filter -A INPUT -i eth0 -p icmp -j ACCEPT ; \\ sudo iptables -P INPUT DROP ; \\ sudo iptables -P OUTPUT ACCEPT Set up needed ip6tables rules: 1 2 3 4 5 6 7 8 sudo ip6tables -A OUTPUT -o lo -j ACCEPT ; \\ sudo ip6tables -A INPUT -i lo -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p tcp --dport 4242 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ sudo ip6tables -t filter -A INPUT -i eth0 -p ipv6-icmp -j ACCEPT ; \\ sudo ip6tables -P INPUT DROP ; \\ sudo ip6tables -P OUTPUT ACCEPT Persist iptables rules: 1 2 3 sudo apt install -y iptables-persistent && \\ sudo netfilter-persistent save && \\ sudo netfilter-persistent reload","title":"iptables"},{"location":"software/server/seedbox/","text":"Seedbox \u00b6 This Guide contains instructions to set up a seedbox based on QuickBox with Perferct Privacy as all outgoing VPN on a VPS or a bare metal server. This Guide is not sponsored by QuickBox nor by Perfect Privacy. This Guide also requires that the server is already installed and access via SSH is working. Mono \u00b6 We want to use the latest version of mono. So we add the official mono repositories. 1 2 3 4 5 sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF sudo apt install apt-transport-https echo \"deb https://download.mono-project.com/repo/ubuntu stable-xenial main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt update && \\ sudo apt -y full-upgrade QuickBox \u00b6 QuickBox is an easy to setup seedbox 'script', which also allows you to add several services (e.g. Sonarr and Radarr ) just by clicking 'install' at the webinterface. Installation \u00b6 Run all commads as root You have to be logged in as root to install QuckBox! Now we will update all installed software and install git (for cloning the QuickBox repo) as well as lsb-release (a little tool to get the release version). 1 2 3 apt update ; apt -y full-upgrade ; apt -y install git lsb-release ; \\ git clone https://github.com/QuickBox/QB /etc/QuickBox ; \\ bash /etc/QuickBox/setup/quickbox-setup If you get a locale warning like this one, just ignore it ;) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_CTYPE = \"UTF-8\", LANG = \"en_US.UTF-8\" are supported and installed on your system. perl: warning: Falling back to a fallback locale (\"en_US.UTF-8\"). perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_CTYPE = \"UTF-8\", LANG = \"en_US.UTF-8\" are supported and installed on your system. perl: warning: Falling back to a fallback locale (\"en_US.UTF-8\"). When the installer opens install and configure QuickBox for your needs. This is my setup log: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [QuickBox] QuickBox Seedbox Installation Heads Up! QuickBox works with the following Ubuntu 15.10 | 16.04 Checking distribution ... No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 16.04.4 LTS Release: 16.04 Codename: xenial Congrats! You're running as root. Let's continue ... Do you wish to write to a log file? (Default: Y) y Output is being sent to /root/quickbox.2175.log Please enter a hostname for this server (Hit ENTER to make no changes): No hostname supplied, no changes made!! Do you wish to use user quotas? (Default: Y) n Quotas will not be installed Press ENTER when you're ready to begin or Ctrl+Z to cancel Password is shown as clear text Please be aware that the password which you have to setup for the 'admin' account will be shown as clear text. Public Trackers needed? If you don't plan to use public trackers like The Pirate Bay, you should set the option Block Public Tracers to yes to protect yourself. FFmpeg needed? If you don't need FFmpeg (used for generating screen shots) don't install it, because it will be compiled from source which takes some time. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 Is this a 10 gigabit server? (Default: N) n Who can afford that stuff anyway? 1) rtorrent 0.9.6 2) rtorrent 0.9.4 3) rtorrent 0.9.3 What version of rtorrent do you want? (Default 1): 1 We will be using rtorrent-0.9.6/libtorrent-0.13.6 1) Deluge repo (fastest) 2) Deluge with libtorrent 1.0.11 (stable) 3) Deluge with libtorrent 1.1.3 (dev) 4) Do not install Deluge What version of Deluge do you want? (Default 1): 1 We will be using Deluge with Libtorrent REPO Would you like to install transmission? [y]es or [n]o: n 1) QuickBox - smoked :: Dark theme 2) QuickBox - defaulted :: Light theme Pick your QuickBox Dashboard Theme (Default 1): 1 We will be using QuickBox Theme : smoked Add a Master Account user to sudoers Username: dedibox Password: (hit enter to generate a password) *** setting password to *** Would you like to install ffmpeg? (Used for screenshots) [y]es or [n]o: y Please, write your public server IP (used for ftp) (Default: 0.0.0.0) Block Public Trackers?: [y]es or [n]o: y [ - Blocking public trackers - ] Would you like to install bbr? (Used for Congestion Control) [y]es or [n]o: y Wait until it's installed. On my machine it tooks 19 minuts. * 1 CPU (Intel Xeon - Skylake@2.1GHz) * 2GB RAM * SSD 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 QuickBox will now install, this may take between 10 and 45 minutes depending on your systems specs Pulling QuickBox Ecosystem ... [ DONE ] Updating system ... [ DONE ] Installing all needed dependencies ... [ DONE ] Setting up system executables ... [ DONE ] Building required user directories ... [ DONE ] Setting up Limited Shell environment ... [ DONE ] Building ffmpeg from source for screenshots ... [ DONE ] Installing xmlrpc-c-1.33.12 ... [ DONE ] Installing libtorrent-0.13.6 ... [ DONE ] Installing rtorrent-0.9.6 ... [ DONE ] Installing rutorrent into /srv ... [ DONE ] Installing rutorrent plugins ... [ DONE ] Installing deluge ... [ DONE ] Installing mktorrent from source ... [ DONE ] Installing quickbox dashboard ... [ DONE ] Building system file indexer (h5ai) ... [ DONE ] Setting up seedbox.conf for apache ... [ DONE ] Fix SSL Cert for apache ... [ DONE ] Installing .rtorrent.rc for dedibox ... [ DONE ] Adjusting fileupload & filemanager plugins ... [ DONE ] Installing autodl-irssi ... [ DONE ] Making dedibox directory structure ... [ DONE ] Writing dedibox rutorrent config.php file ... [ DONE ] Installing vsftpd ... [ DONE ] Setting up vsftpd ... [ DONE ] Setting irssi/rtorrent to start on boot ... [ DONE ] Setting permissions on dedibox ... [ DONE ] install BBR ... [ DONE ] After finishing the installation don't reboot the machine, if you want to use port 22 for SSH. If you're fine to use port 4747 for SSH just reboot. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [quickbox] Seedbox & GUI Installation Completed INSTALLATION COMPLETED in 19/min Valid Commands: ------------------- createSeedboxUser - creates a shelled seedbox user deleteSeedboxUser - deletes a created seedbox user and their directories changeUserpass - change users SSH/FTP/ruTorrent password setdisk - set your disk quota for any given user showspace - shows the amount of space used by all users on the server reload - restarts your seedbox services, i.e; rtorrent & irssi upgradeBTSync - upgrades BTSync when new version is available upgradeOmbi - upgrades Ombi when new version is available upgradePlex - upgrades Plex when new version is available box install letsencrypt - installs a valid SSL certificate to be used with a valid domain name. box - type 'box -h' for a summary of how to use box! ################################################################################################ # Seedbox can be found at https://dedibox:***@138.201.173.51 # (Also works for FTP:5757/SSH:4747) # If you need to restart rtorrent/irssi, you can type 'reload' # Reloading: sshd, apache, memcached, php7.0, vsftpd and fail2ban ################################################################################################ Do you wish to reboot (recommended!): (Default Y) N Optional set the SSH port back to 22 \u00b6 Because the install script forces a SSH port change we have to change it back to 22 manually. Just run this sed command to replace the port 4747 with 22. 1 sed -i -e 's/^Port 4747$/Port 22/g' /etc/ssh/sshd_config Afterwards reboot the machine. Optional use 'Let's Encrypt' for a proper SSL certificate \u00b6 If you use a domain for your server you should set up an let's encrypt ssl certificate. Run the following command and follow the process. It's really straight forward. 1 box install letsencrypt IPset \u00b6 With IPset (and Dnsmasq) we are able to filter on a \"DNS name\" basis. Installation \u00b6 1 apt install -y ipset Configuration \u00b6 First we have to create the IPsets which want to use. In our case we need 2 of them, the 1 st will store the IPs of the Perfect Privacy servers and the 2 nd will store the IPs of the letsencrypt acme challenge servers. 1 2 3 ipset create perfect_privacy hash:ip family inet ; \\ ipset create letsencrypt hash:ip family inet ; \\ ipset create storagebox hash:ip family inet Afterwards we have to save our rules because they only configured in RAM. We will also write a little script which reloads the rules at startup. 1 2 3 4 5 ipset save > /etc/ipset.up.rules ; \\ cat > /etc/network/if-pre-up.d/loadrules <<-EOF; chmod 755 /etc/network/if-pre-up.d/loadrules #!/bin/sh /sbin/ipset restore -! < /etc/ipset.up.rules EOF Dnsmasq \u00b6 Dnsmasq is a tiny DNS server which we will use to resolve the dns addresses and store them to a IPset. Installation \u00b6 1 apt install -y dnsmasq Configuration \u00b6 We configure Dnsmasq to listen only on 127.0.0.1 and to store the IP addresses of specific domains in our IPsets. Uncomment the last line to activate reading the conf file in /etc/dnsmasq.d/ : 1 sed -i -e 's/^#conf-dir=\\/etc\\/dnsmasq\\.d\\/,\\*\\.conf/conf-dir=\\/etc\\/dnsmasq\\.d\\/,\\*\\.conf/g' /etc/dnsmasq.conf Configure the interfaces which the DNS server should listen to: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat > /etc/dnsmasq.d/01_interfaces.conf <<-EOF # If you want dnsmasq to listen for DHCP and DNS requests only on # specified interfaces (and the loopback) give the name of the # interface (eg eth0) here. # Repeat the line for more than one interface. #interface= # Or you can specify which interface _not_ to listen on except-interface=tun0 # Or which to listen on by address (remember to include 127.0.0.1 if # you use this.) listen-address=127.0.0.1 # If you want dnsmasq to provide only DNS service on an interface, # configure it as shown above, and then use the following line to # disable DHCP and TFTP on it. #no-dhcp-interface= EOF Configure the server to store the matching IPs to the IPset: 1 2 3 4 5 6 7 8 cat > /etc/dnsmasq.d/02_ipsets.conf <<-EOF # Add the IPs of all queries to yahoo.com, google.com, and their # subdomains to the vpn and search ipsets: #ipset=/yahoo.com/google.com/vpn,search ipset=/perfect-privacy.com/perfect_privacy ipset=/letsencrypt.org/letsencrypt ipset=/your-storagebox.de/storagebox EOF OpenVPN \u00b6 OpenVPN in an open source vpn software. Installation \u00b6 First install OpenVPN, go to the OpenVPN config directory ( /etc/openvpn ) and download the configuration files from Perfect Privacy. The script below also creates a password.txt with credentials and modifies the files so that they refer to the credentials. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 apt install -y openvpn && \\ cd /etc/openvpn/ && \\ clear ; \\ echo \"Please enter your Perfect Privacy credentials\" ; \\ read -p 'Username: ' username && \\ read -sp 'Password: ' password && \\ wget -v --post-data \"username= $username &password= $password &uri=/member/download/?file=linux_udp.tar.gz\" -O linux_udp.tar.gz \"https://www.perfect-privacy.com/member/\" && \\ echo \" $username \" > password.txt && \\ echo \" $password \" >> password.txt && \\ username = '' ; \\ password = '' ; \\ tar xfvz linux_udp.tar.gz && \\ mv ./linux_udp/* ./ && \\ rmdir ./linux_udp && \\ rm -f ./linux_udp.tar.gz && \\ chown root:root ./* && \\ chmod 400 password.txt && \\ for file in ./*.ovpn ; do sed -i -e 's/^auth-user-pass.*$/auth-user-pass password.txt/g' $file ; done && \\ sed -i -e '/echo -n \\\"\\$R\\\" \\| \\/sbin\\/resolvconf -a \\\"\\${dev}\\.openvpn\\\"/a \\ \\ \\ \\ \\ \\ \\ \\ \\/etc\\/openvpn\\/patch_ports\\.sh' /etc/openvpn/update-resolv-conf Afterwards link the config which you want to use to .conf (e.g. Rotterdam.ovpn to Rotterdam.conf ) and modify the defaults file for OpenVPN to start the VPN connection automatically. 1 2 3 4 5 6 7 8 9 10 11 clear ; \\ echo \"Enter the file name of the for your preferred server location.\" ; \\ read -p \"File name (e.g. Rotterdam.ovpn): \" config_file && \\ if [ ! -f ./ $config_file ] ; \\ then echo \"File not found!\" ; \\ else \\ config_name = $( echo $config_file | awk '{split($0,a,\".\"); print a[1]}' ) ; \\ ln -s ./ $config_file ./ $config_name .conf ; \\ sed -i -e \"/^#AUTOSTART=\\\"home office\\\" $ /a AUTOSTART=\\\" $config_name \\\"\" /etc/default/openvpn ; \\ fi && \\ systemctl daemon-reload Now we are adding a script to modify the torrent client ports. /etc/openvpn/patch_ports.sh : 1 2 3 touch /etc/openvpn/patch_ports.sh && \\ chmod +x /etc/openvpn/patch_ports.sh ; \\ vim /etc/openvpn/patch_ports.sh ; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/bin/bash vpn_tun_dev = \"tun0\" user = \"dedibox\" # Get VPN internal IP Address vpn_int_ip = $( ip -f inet a s $vpn_tun_dev | grep \"inet\\b\" | awk '{print $2}' | cut -d '/' -f1 ) # Check if tunnel device is available if [[ -z $vpn_int_ip ]] ; then echo \"Shit there is no $vpn_tun_dev interface\" exit 1 fi # Generate ports blck3_ip = $( echo \" $vpn_int_ip \" | cut -f3 -d '.' ) blck4_ip = $( echo \" $vpn_int_ip \" | cut -f4 -d '.' ) blck3_prt = $(($(( $blck3_ip % 16 )) * 256 )) # Perfect Privacy port calculation for the 3rd octet -- (<3rd Block Number> mod 16) * 256 # PP port calcucaltion -- <Base port>+<generated 3rd block>+<4th block> vpn_port1 = $(( 10000 + $blck3_prt + $blck4_ip )) vpn_port2 = $(( 20000 + $blck3_prt + $blck4_ip )) vpn_port3 = $(( 30000 + $blck3_prt + $blck4_ip )) # Change rtorrent incoming port sed -i -E \"s/^network\\.port_range\\.set = [0-9]{1,5}-[0-9]{1,5} $ /network\\.port_range\\.set = $vpn_port1 - $vpn_port1 /g\" /home/ $user /.rtorrent.rc systemctl restart rtorrent@dedibox.service # Change Deluge incoming port systemctl stop deluged@dedibox.service deluge_line = $( grep -n 'listen_ports' /home/ $user /.config/deluge/core.conf | cut -d \":\" -f1 ) sed -i \" $(( $deluge_line + 1 )) s/.*/ $vpn_port2 ,/\" /home/ $user /.config/deluge/core.conf sed -i \" $(( $deluge_line + 2 )) s/.*/ $vpn_port2 /\" /home/ $user /.config/deluge/core.conf systemctl start deluged@dedibox.service iptables \u00b6 iptables is a userpace program to configure the firewall. Configuration \u00b6 Explanation iptables rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED,RELATED -j ACCEPT # DROP storage box traffic via tun0 iptables -t filter -A OUTPUT -o tun0 -m set --match-set storagebox dst -j DROP iptables -t filter -A INPUT -i tun0 -m set --match-set storagebox src -j DROP # Allow DNS outgoing iptables -t filter -A INPUT -i eth0 -p udp --sport 53 -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p udp --dport 53 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow OpenVPN outgoing only to perfect-privacy servers iptables -t filter -A OUTPUT -o eth0 -p udp -m set --match-set perfect_privacy dst -m multiport --dports 148 ,149,150,151,1148,1149,1150,1151 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m set --match-set perfect_privacy dst -m multiport --dports 300 ,301,142,152,1142,1152 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 148 ,149,150,151,1148,1149,1150,1151 -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 300 ,301,142,152,1142,1152 -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443,10354 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --sports 80 ,443,10354 -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow StorageBox outgoing iptables -t filter -A OUTPUT -o eth0 -p udp -m multiport --dports 137 ,138 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --dports 139 ,445 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 137 ,138 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 139 ,445 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow traffic through OpenVPN iptables -t filter -A OUTPUT -o tun0 -j ACCEPT iptables -t filter -A INPUT -i tun0 -j ACCEPT # Policy DROP (everything else) iptables -t filter -P OUTPUT DROP iptables -t filter -P INPUT DROP Set up needed iptables rules: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 iptables -A OUTPUT -o lo -j ACCEPT ; \\ iptables -A INPUT -i lo -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p udp --sport 53 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p udp --dport 53 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p udp -m set --match-set perfect_privacy dst -m multiport --dports 148 ,149,150,151,1148,1149,1150,1151 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m set --match-set perfect_privacy dst -m multiport --dports 300 ,301,142,152,1142,1152 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 148 ,149,150,151,1148,1149,1150,1151 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 300 ,301,142,152,1142,1152 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443,10354 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --sports 80 ,443,10354 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p udp -m multiport --dports 137 ,138 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --dports 139 ,445 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 137 ,138 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 139 ,445 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o tun0 -j ACCEPT ; \\ iptables -t filter -A INPUT -i tun0 -j ACCEPT ; \\ iptables -t filter -P OUTPUT DROP ; \\ iptables -t filter -P INPUT DROP If you use fail2ban If you use fail to ban you have to delete the fail2ban rules from the config file! Save iptables rules because they also only configured in RAM: 1 2 iptables-save > /etc/iptables.up.rules ; \\ echo \"/sbin/iptables-restore < /etc/iptables.up.rules\" >> /etc/network/if-pre-up.d/loadrules ip rule/route \u00b6 Configuration \u00b6 Add the following at the end of the block for the eth0 device. Replace 1.2.3.4 with the public IP from your server: 1 vim /etc/network/interfaces 1 2 3 4 5 post-up ip route add 172 .31.1.1/32 dev eth0 proto kernel scope link src 1 .2.3.4 table 1 post-up ip route add default via 172 .31.1.1 table 1 post-up ip route add 195 .201.107.35/32 via 172 .31.1.1 dev eth0 post-up ip rule add table 1 from 1 .2.3.4 post-up ip rule add fwmark 1 table 1 Afterwards apply the routes/rules: 1 2 3 4 5 6 7 8 9 10 clear ; \\ ip a ; \\ read -p 'Local interface name (e.g. eth0): ' intname && \\ intip = $( ip -f inet a s $intname | grep \"inet\\b\" | awk '{print $2}' | cut -d '/' -f1 ) && \\ ip route add 172 .31.1.1/32 dev eth0 proto kernel scope link src $intip table 1 && \\ ip route add default via 172 .31.1.1 table 1 && \\ storageboxip = $( dig +noall +answer +nocomments +short u177197.your-storagebox.de ) && \\ ip route add $storageboxip /32 via 172 .31.1.1 dev eth0 && \\ ip rule add table 1 from $intip && \\ ip rule add fwmark 1 table 1 Mount storage box \u00b6 Install cifs-utils : 1 apt install -y cifs-utils Create directory within /mnt : 1 2 mkdir /mnt/.nas && \\ chmod 444 /mnt/.nas Add a group for storage access and nice the group id: 1 2 addgroup storage && \\ usermod -aG storage dedibox Add mount to fstab: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 clear ; \\ echo \"Please enter your Storage Box credentials\" ; \\ read -p 'Storage Box Username: ' sbusername && \\ read -sp 'Storage Box Password: ' sbpassword && \\ echo \"\" && \\ read -p 'Mount User ID: ' muid && \\ read -p 'Mount Group ID: ' mgid && \\ echo \"\" >> /etc/fstab && \\ echo \"# Storage Box - dedibox\" >> /etc/fstab && \\ echo \"// $sbusername .your-storagebox.de/backup /mnt/.nas cifs iocharset=utf8,credentials=/root/.smbcredentials,uid= $muid ,gid= $mgid ,rw,file_mode=0775,dir_mode=0775 0 0\" >> /etc/fstab && \\ echo \"username= $sbusername \" > /root/.smbcredentials && \\ echo \"password= $sbpassword \" >> /root/.smbcredentials && \\ chmod 600 /root/.smbcredentials && \\ cat << EOF > /root/mount.sh && chmod 700 /root/mount.sh #!/bin/bash # Check if script runs as root if [ $UID != 0 ]; then echo \"You have to run this script as root.\" exit 1 fi # Add route to storage box storageboxip=$(dig +noall +answer +nocomments +short u177197.your-storagebox.de) if [[ -z $(ip route | grep \"$storageboxip via 172.31.1.1 dev eth0\") ]]; then ip route add $storageboxip/32 via 172.31.1.1 dev eth0 fi # Mount all unmounted mounts mount -a # Mount Crypto read -sp 'rclone config password: ' RCLONE_CONFIG_PASS echo \"\" export RCLONE_CONFIG_PASS screen -dmS rclone rclone mount --ask-password=false --uid $muid --gid $mgid --umask 002 --allow-other storage_box_crypt: /mnt/nas unset RCLONE_CONFIG_PASS EOF Mount NAS storage: 1 mount -a rclone \u00b6 rclone is tiny tool to mount cloud storages. It also provides a strong encryption. Installation \u00b6 1 curl https://rclone.org/install.sh | sudo bash Configuration \u00b6 Open rclone configuration: 1 rclone config Select 'n' (new remote) Name: storage_box_crypt Storage Type: '7' (Encrypt/Decrypt a remote) \"crypt\" remote: /mnt/.nas Filename encryption: '2' (Encrypt the filenames see the docs for the details.) \"standard\" Encrypt directories: '1' (Encrypt directory names.) \"true\" Password: 'y' (Yes type in my own password) Salt: 'y' (Yes type in my own password) Confirm configuration: 'y' (Yes this is OK) Set configuration password: 's' Add Password: 'a' Quit to main menu: 'q' Quit configuration: 'q' Create mount point: 1 2 mkdir /mnt/nas && \\ chmod 444 /mnt/nas Mount rclone share: 1 ./mount.sh","title":"Seedbox"},{"location":"software/server/seedbox/#seedbox","text":"This Guide contains instructions to set up a seedbox based on QuickBox with Perferct Privacy as all outgoing VPN on a VPS or a bare metal server. This Guide is not sponsored by QuickBox nor by Perfect Privacy. This Guide also requires that the server is already installed and access via SSH is working.","title":"Seedbox"},{"location":"software/server/seedbox/#mono","text":"We want to use the latest version of mono. So we add the official mono repositories. 1 2 3 4 5 sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF sudo apt install apt-transport-https echo \"deb https://download.mono-project.com/repo/ubuntu stable-xenial main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt update && \\ sudo apt -y full-upgrade","title":"Mono"},{"location":"software/server/seedbox/#quickbox","text":"QuickBox is an easy to setup seedbox 'script', which also allows you to add several services (e.g. Sonarr and Radarr ) just by clicking 'install' at the webinterface.","title":"QuickBox"},{"location":"software/server/seedbox/#installation","text":"Run all commads as root You have to be logged in as root to install QuckBox! Now we will update all installed software and install git (for cloning the QuickBox repo) as well as lsb-release (a little tool to get the release version). 1 2 3 apt update ; apt -y full-upgrade ; apt -y install git lsb-release ; \\ git clone https://github.com/QuickBox/QB /etc/QuickBox ; \\ bash /etc/QuickBox/setup/quickbox-setup If you get a locale warning like this one, just ignore it ;) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_CTYPE = \"UTF-8\", LANG = \"en_US.UTF-8\" are supported and installed on your system. perl: warning: Falling back to a fallback locale (\"en_US.UTF-8\"). perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_CTYPE = \"UTF-8\", LANG = \"en_US.UTF-8\" are supported and installed on your system. perl: warning: Falling back to a fallback locale (\"en_US.UTF-8\"). When the installer opens install and configure QuickBox for your needs. This is my setup log: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [QuickBox] QuickBox Seedbox Installation Heads Up! QuickBox works with the following Ubuntu 15.10 | 16.04 Checking distribution ... No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 16.04.4 LTS Release: 16.04 Codename: xenial Congrats! You're running as root. Let's continue ... Do you wish to write to a log file? (Default: Y) y Output is being sent to /root/quickbox.2175.log Please enter a hostname for this server (Hit ENTER to make no changes): No hostname supplied, no changes made!! Do you wish to use user quotas? (Default: Y) n Quotas will not be installed Press ENTER when you're ready to begin or Ctrl+Z to cancel Password is shown as clear text Please be aware that the password which you have to setup for the 'admin' account will be shown as clear text. Public Trackers needed? If you don't plan to use public trackers like The Pirate Bay, you should set the option Block Public Tracers to yes to protect yourself. FFmpeg needed? If you don't need FFmpeg (used for generating screen shots) don't install it, because it will be compiled from source which takes some time. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 Is this a 10 gigabit server? (Default: N) n Who can afford that stuff anyway? 1) rtorrent 0.9.6 2) rtorrent 0.9.4 3) rtorrent 0.9.3 What version of rtorrent do you want? (Default 1): 1 We will be using rtorrent-0.9.6/libtorrent-0.13.6 1) Deluge repo (fastest) 2) Deluge with libtorrent 1.0.11 (stable) 3) Deluge with libtorrent 1.1.3 (dev) 4) Do not install Deluge What version of Deluge do you want? (Default 1): 1 We will be using Deluge with Libtorrent REPO Would you like to install transmission? [y]es or [n]o: n 1) QuickBox - smoked :: Dark theme 2) QuickBox - defaulted :: Light theme Pick your QuickBox Dashboard Theme (Default 1): 1 We will be using QuickBox Theme : smoked Add a Master Account user to sudoers Username: dedibox Password: (hit enter to generate a password) *** setting password to *** Would you like to install ffmpeg? (Used for screenshots) [y]es or [n]o: y Please, write your public server IP (used for ftp) (Default: 0.0.0.0) Block Public Trackers?: [y]es or [n]o: y [ - Blocking public trackers - ] Would you like to install bbr? (Used for Congestion Control) [y]es or [n]o: y Wait until it's installed. On my machine it tooks 19 minuts. * 1 CPU (Intel Xeon - Skylake@2.1GHz) * 2GB RAM * SSD 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 QuickBox will now install, this may take between 10 and 45 minutes depending on your systems specs Pulling QuickBox Ecosystem ... [ DONE ] Updating system ... [ DONE ] Installing all needed dependencies ... [ DONE ] Setting up system executables ... [ DONE ] Building required user directories ... [ DONE ] Setting up Limited Shell environment ... [ DONE ] Building ffmpeg from source for screenshots ... [ DONE ] Installing xmlrpc-c-1.33.12 ... [ DONE ] Installing libtorrent-0.13.6 ... [ DONE ] Installing rtorrent-0.9.6 ... [ DONE ] Installing rutorrent into /srv ... [ DONE ] Installing rutorrent plugins ... [ DONE ] Installing deluge ... [ DONE ] Installing mktorrent from source ... [ DONE ] Installing quickbox dashboard ... [ DONE ] Building system file indexer (h5ai) ... [ DONE ] Setting up seedbox.conf for apache ... [ DONE ] Fix SSL Cert for apache ... [ DONE ] Installing .rtorrent.rc for dedibox ... [ DONE ] Adjusting fileupload & filemanager plugins ... [ DONE ] Installing autodl-irssi ... [ DONE ] Making dedibox directory structure ... [ DONE ] Writing dedibox rutorrent config.php file ... [ DONE ] Installing vsftpd ... [ DONE ] Setting up vsftpd ... [ DONE ] Setting irssi/rtorrent to start on boot ... [ DONE ] Setting permissions on dedibox ... [ DONE ] install BBR ... [ DONE ] After finishing the installation don't reboot the machine, if you want to use port 22 for SSH. If you're fine to use port 4747 for SSH just reboot. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [quickbox] Seedbox & GUI Installation Completed INSTALLATION COMPLETED in 19/min Valid Commands: ------------------- createSeedboxUser - creates a shelled seedbox user deleteSeedboxUser - deletes a created seedbox user and their directories changeUserpass - change users SSH/FTP/ruTorrent password setdisk - set your disk quota for any given user showspace - shows the amount of space used by all users on the server reload - restarts your seedbox services, i.e; rtorrent & irssi upgradeBTSync - upgrades BTSync when new version is available upgradeOmbi - upgrades Ombi when new version is available upgradePlex - upgrades Plex when new version is available box install letsencrypt - installs a valid SSL certificate to be used with a valid domain name. box - type 'box -h' for a summary of how to use box! ################################################################################################ # Seedbox can be found at https://dedibox:***@138.201.173.51 # (Also works for FTP:5757/SSH:4747) # If you need to restart rtorrent/irssi, you can type 'reload' # Reloading: sshd, apache, memcached, php7.0, vsftpd and fail2ban ################################################################################################ Do you wish to reboot (recommended!): (Default Y) N","title":"Installation"},{"location":"software/server/seedbox/#optional-set-the-ssh-port-back-to-22","text":"Because the install script forces a SSH port change we have to change it back to 22 manually. Just run this sed command to replace the port 4747 with 22. 1 sed -i -e 's/^Port 4747$/Port 22/g' /etc/ssh/sshd_config Afterwards reboot the machine.","title":"Optional set the SSH port back to 22"},{"location":"software/server/seedbox/#optional-use-lets-encrypt-for-a-proper-ssl-certificate","text":"If you use a domain for your server you should set up an let's encrypt ssl certificate. Run the following command and follow the process. It's really straight forward. 1 box install letsencrypt","title":"Optional use 'Let's Encrypt' for a proper SSL certificate"},{"location":"software/server/seedbox/#ipset","text":"With IPset (and Dnsmasq) we are able to filter on a \"DNS name\" basis.","title":"IPset"},{"location":"software/server/seedbox/#installation_1","text":"1 apt install -y ipset","title":"Installation"},{"location":"software/server/seedbox/#configuration","text":"First we have to create the IPsets which want to use. In our case we need 2 of them, the 1 st will store the IPs of the Perfect Privacy servers and the 2 nd will store the IPs of the letsencrypt acme challenge servers. 1 2 3 ipset create perfect_privacy hash:ip family inet ; \\ ipset create letsencrypt hash:ip family inet ; \\ ipset create storagebox hash:ip family inet Afterwards we have to save our rules because they only configured in RAM. We will also write a little script which reloads the rules at startup. 1 2 3 4 5 ipset save > /etc/ipset.up.rules ; \\ cat > /etc/network/if-pre-up.d/loadrules <<-EOF; chmod 755 /etc/network/if-pre-up.d/loadrules #!/bin/sh /sbin/ipset restore -! < /etc/ipset.up.rules EOF","title":"Configuration"},{"location":"software/server/seedbox/#dnsmasq","text":"Dnsmasq is a tiny DNS server which we will use to resolve the dns addresses and store them to a IPset.","title":"Dnsmasq"},{"location":"software/server/seedbox/#installation_2","text":"1 apt install -y dnsmasq","title":"Installation"},{"location":"software/server/seedbox/#configuration_1","text":"We configure Dnsmasq to listen only on 127.0.0.1 and to store the IP addresses of specific domains in our IPsets. Uncomment the last line to activate reading the conf file in /etc/dnsmasq.d/ : 1 sed -i -e 's/^#conf-dir=\\/etc\\/dnsmasq\\.d\\/,\\*\\.conf/conf-dir=\\/etc\\/dnsmasq\\.d\\/,\\*\\.conf/g' /etc/dnsmasq.conf Configure the interfaces which the DNS server should listen to: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat > /etc/dnsmasq.d/01_interfaces.conf <<-EOF # If you want dnsmasq to listen for DHCP and DNS requests only on # specified interfaces (and the loopback) give the name of the # interface (eg eth0) here. # Repeat the line for more than one interface. #interface= # Or you can specify which interface _not_ to listen on except-interface=tun0 # Or which to listen on by address (remember to include 127.0.0.1 if # you use this.) listen-address=127.0.0.1 # If you want dnsmasq to provide only DNS service on an interface, # configure it as shown above, and then use the following line to # disable DHCP and TFTP on it. #no-dhcp-interface= EOF Configure the server to store the matching IPs to the IPset: 1 2 3 4 5 6 7 8 cat > /etc/dnsmasq.d/02_ipsets.conf <<-EOF # Add the IPs of all queries to yahoo.com, google.com, and their # subdomains to the vpn and search ipsets: #ipset=/yahoo.com/google.com/vpn,search ipset=/perfect-privacy.com/perfect_privacy ipset=/letsencrypt.org/letsencrypt ipset=/your-storagebox.de/storagebox EOF","title":"Configuration"},{"location":"software/server/seedbox/#openvpn","text":"OpenVPN in an open source vpn software.","title":"OpenVPN"},{"location":"software/server/seedbox/#installation_3","text":"First install OpenVPN, go to the OpenVPN config directory ( /etc/openvpn ) and download the configuration files from Perfect Privacy. The script below also creates a password.txt with credentials and modifies the files so that they refer to the credentials. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 apt install -y openvpn && \\ cd /etc/openvpn/ && \\ clear ; \\ echo \"Please enter your Perfect Privacy credentials\" ; \\ read -p 'Username: ' username && \\ read -sp 'Password: ' password && \\ wget -v --post-data \"username= $username &password= $password &uri=/member/download/?file=linux_udp.tar.gz\" -O linux_udp.tar.gz \"https://www.perfect-privacy.com/member/\" && \\ echo \" $username \" > password.txt && \\ echo \" $password \" >> password.txt && \\ username = '' ; \\ password = '' ; \\ tar xfvz linux_udp.tar.gz && \\ mv ./linux_udp/* ./ && \\ rmdir ./linux_udp && \\ rm -f ./linux_udp.tar.gz && \\ chown root:root ./* && \\ chmod 400 password.txt && \\ for file in ./*.ovpn ; do sed -i -e 's/^auth-user-pass.*$/auth-user-pass password.txt/g' $file ; done && \\ sed -i -e '/echo -n \\\"\\$R\\\" \\| \\/sbin\\/resolvconf -a \\\"\\${dev}\\.openvpn\\\"/a \\ \\ \\ \\ \\ \\ \\ \\ \\/etc\\/openvpn\\/patch_ports\\.sh' /etc/openvpn/update-resolv-conf Afterwards link the config which you want to use to .conf (e.g. Rotterdam.ovpn to Rotterdam.conf ) and modify the defaults file for OpenVPN to start the VPN connection automatically. 1 2 3 4 5 6 7 8 9 10 11 clear ; \\ echo \"Enter the file name of the for your preferred server location.\" ; \\ read -p \"File name (e.g. Rotterdam.ovpn): \" config_file && \\ if [ ! -f ./ $config_file ] ; \\ then echo \"File not found!\" ; \\ else \\ config_name = $( echo $config_file | awk '{split($0,a,\".\"); print a[1]}' ) ; \\ ln -s ./ $config_file ./ $config_name .conf ; \\ sed -i -e \"/^#AUTOSTART=\\\"home office\\\" $ /a AUTOSTART=\\\" $config_name \\\"\" /etc/default/openvpn ; \\ fi && \\ systemctl daemon-reload Now we are adding a script to modify the torrent client ports. /etc/openvpn/patch_ports.sh : 1 2 3 touch /etc/openvpn/patch_ports.sh && \\ chmod +x /etc/openvpn/patch_ports.sh ; \\ vim /etc/openvpn/patch_ports.sh ; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/bin/bash vpn_tun_dev = \"tun0\" user = \"dedibox\" # Get VPN internal IP Address vpn_int_ip = $( ip -f inet a s $vpn_tun_dev | grep \"inet\\b\" | awk '{print $2}' | cut -d '/' -f1 ) # Check if tunnel device is available if [[ -z $vpn_int_ip ]] ; then echo \"Shit there is no $vpn_tun_dev interface\" exit 1 fi # Generate ports blck3_ip = $( echo \" $vpn_int_ip \" | cut -f3 -d '.' ) blck4_ip = $( echo \" $vpn_int_ip \" | cut -f4 -d '.' ) blck3_prt = $(($(( $blck3_ip % 16 )) * 256 )) # Perfect Privacy port calculation for the 3rd octet -- (<3rd Block Number> mod 16) * 256 # PP port calcucaltion -- <Base port>+<generated 3rd block>+<4th block> vpn_port1 = $(( 10000 + $blck3_prt + $blck4_ip )) vpn_port2 = $(( 20000 + $blck3_prt + $blck4_ip )) vpn_port3 = $(( 30000 + $blck3_prt + $blck4_ip )) # Change rtorrent incoming port sed -i -E \"s/^network\\.port_range\\.set = [0-9]{1,5}-[0-9]{1,5} $ /network\\.port_range\\.set = $vpn_port1 - $vpn_port1 /g\" /home/ $user /.rtorrent.rc systemctl restart rtorrent@dedibox.service # Change Deluge incoming port systemctl stop deluged@dedibox.service deluge_line = $( grep -n 'listen_ports' /home/ $user /.config/deluge/core.conf | cut -d \":\" -f1 ) sed -i \" $(( $deluge_line + 1 )) s/.*/ $vpn_port2 ,/\" /home/ $user /.config/deluge/core.conf sed -i \" $(( $deluge_line + 2 )) s/.*/ $vpn_port2 /\" /home/ $user /.config/deluge/core.conf systemctl start deluged@dedibox.service","title":"Installation"},{"location":"software/server/seedbox/#iptables","text":"iptables is a userpace program to configure the firewall.","title":"iptables"},{"location":"software/server/seedbox/#configuration_2","text":"Explanation iptables rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 # Allow loopback iptables -A OUTPUT -o lo -j ACCEPT iptables -A INPUT -i lo -j ACCEPT # Allow SSH incoming iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED,RELATED -j ACCEPT # DROP storage box traffic via tun0 iptables -t filter -A OUTPUT -o tun0 -m set --match-set storagebox dst -j DROP iptables -t filter -A INPUT -i tun0 -m set --match-set storagebox src -j DROP # Allow DNS outgoing iptables -t filter -A INPUT -i eth0 -p udp --sport 53 -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p udp --dport 53 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # Allow OpenVPN outgoing only to perfect-privacy servers iptables -t filter -A OUTPUT -o eth0 -p udp -m set --match-set perfect_privacy dst -m multiport --dports 148 ,149,150,151,1148,1149,1150,1151 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m set --match-set perfect_privacy dst -m multiport --dports 300 ,301,142,152,1142,1152 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 148 ,149,150,151,1148,1149,1150,1151 -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 300 ,301,142,152,1142,1152 -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow web interface SeedBox incoming iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443,10354 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --sports 80 ,443,10354 -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow StorageBox outgoing iptables -t filter -A OUTPUT -o eth0 -p udp -m multiport --dports 137 ,138 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --dports 139 ,445 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 137 ,138 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 139 ,445 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow traffic through OpenVPN iptables -t filter -A OUTPUT -o tun0 -j ACCEPT iptables -t filter -A INPUT -i tun0 -j ACCEPT # Policy DROP (everything else) iptables -t filter -P OUTPUT DROP iptables -t filter -P INPUT DROP Set up needed iptables rules: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 iptables -A OUTPUT -o lo -j ACCEPT ; \\ iptables -A INPUT -i lo -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p udp --sport 53 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p udp --dport 53 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p udp -m set --match-set perfect_privacy dst -m multiport --dports 148 ,149,150,151,1148,1149,1150,1151 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m set --match-set perfect_privacy dst -m multiport --dports 300 ,301,142,152,1142,1152 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 148 ,149,150,151,1148,1149,1150,1151 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 300 ,301,142,152,1142,1152 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --dports 80 ,443,10354 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --sports 80 ,443,10354 -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p udp -m multiport --dports 137 ,138 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o eth0 -p tcp -m multiport --dports 139 ,445 -m set --match-set storagebox dst -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p udp -m multiport --sports 137 ,138 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A INPUT -i eth0 -p tcp -m multiport --sports 139 ,445 -m set --match-set storagebox src -m state --state ESTABLISHED,RELATED -j ACCEPT ; \\ iptables -t filter -A OUTPUT -o tun0 -j ACCEPT ; \\ iptables -t filter -A INPUT -i tun0 -j ACCEPT ; \\ iptables -t filter -P OUTPUT DROP ; \\ iptables -t filter -P INPUT DROP If you use fail2ban If you use fail to ban you have to delete the fail2ban rules from the config file! Save iptables rules because they also only configured in RAM: 1 2 iptables-save > /etc/iptables.up.rules ; \\ echo \"/sbin/iptables-restore < /etc/iptables.up.rules\" >> /etc/network/if-pre-up.d/loadrules","title":"Configuration"},{"location":"software/server/seedbox/#ip-ruleroute","text":"","title":"ip rule/route"},{"location":"software/server/seedbox/#configuration_3","text":"Add the following at the end of the block for the eth0 device. Replace 1.2.3.4 with the public IP from your server: 1 vim /etc/network/interfaces 1 2 3 4 5 post-up ip route add 172 .31.1.1/32 dev eth0 proto kernel scope link src 1 .2.3.4 table 1 post-up ip route add default via 172 .31.1.1 table 1 post-up ip route add 195 .201.107.35/32 via 172 .31.1.1 dev eth0 post-up ip rule add table 1 from 1 .2.3.4 post-up ip rule add fwmark 1 table 1 Afterwards apply the routes/rules: 1 2 3 4 5 6 7 8 9 10 clear ; \\ ip a ; \\ read -p 'Local interface name (e.g. eth0): ' intname && \\ intip = $( ip -f inet a s $intname | grep \"inet\\b\" | awk '{print $2}' | cut -d '/' -f1 ) && \\ ip route add 172 .31.1.1/32 dev eth0 proto kernel scope link src $intip table 1 && \\ ip route add default via 172 .31.1.1 table 1 && \\ storageboxip = $( dig +noall +answer +nocomments +short u177197.your-storagebox.de ) && \\ ip route add $storageboxip /32 via 172 .31.1.1 dev eth0 && \\ ip rule add table 1 from $intip && \\ ip rule add fwmark 1 table 1","title":"Configuration"},{"location":"software/server/seedbox/#mount-storage-box","text":"Install cifs-utils : 1 apt install -y cifs-utils Create directory within /mnt : 1 2 mkdir /mnt/.nas && \\ chmod 444 /mnt/.nas Add a group for storage access and nice the group id: 1 2 addgroup storage && \\ usermod -aG storage dedibox Add mount to fstab: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 clear ; \\ echo \"Please enter your Storage Box credentials\" ; \\ read -p 'Storage Box Username: ' sbusername && \\ read -sp 'Storage Box Password: ' sbpassword && \\ echo \"\" && \\ read -p 'Mount User ID: ' muid && \\ read -p 'Mount Group ID: ' mgid && \\ echo \"\" >> /etc/fstab && \\ echo \"# Storage Box - dedibox\" >> /etc/fstab && \\ echo \"// $sbusername .your-storagebox.de/backup /mnt/.nas cifs iocharset=utf8,credentials=/root/.smbcredentials,uid= $muid ,gid= $mgid ,rw,file_mode=0775,dir_mode=0775 0 0\" >> /etc/fstab && \\ echo \"username= $sbusername \" > /root/.smbcredentials && \\ echo \"password= $sbpassword \" >> /root/.smbcredentials && \\ chmod 600 /root/.smbcredentials && \\ cat << EOF > /root/mount.sh && chmod 700 /root/mount.sh #!/bin/bash # Check if script runs as root if [ $UID != 0 ]; then echo \"You have to run this script as root.\" exit 1 fi # Add route to storage box storageboxip=$(dig +noall +answer +nocomments +short u177197.your-storagebox.de) if [[ -z $(ip route | grep \"$storageboxip via 172.31.1.1 dev eth0\") ]]; then ip route add $storageboxip/32 via 172.31.1.1 dev eth0 fi # Mount all unmounted mounts mount -a # Mount Crypto read -sp 'rclone config password: ' RCLONE_CONFIG_PASS echo \"\" export RCLONE_CONFIG_PASS screen -dmS rclone rclone mount --ask-password=false --uid $muid --gid $mgid --umask 002 --allow-other storage_box_crypt: /mnt/nas unset RCLONE_CONFIG_PASS EOF Mount NAS storage: 1 mount -a","title":"Mount storage box"},{"location":"software/server/seedbox/#rclone","text":"rclone is tiny tool to mount cloud storages. It also provides a strong encryption.","title":"rclone"},{"location":"software/server/seedbox/#installation_4","text":"1 curl https://rclone.org/install.sh | sudo bash","title":"Installation"},{"location":"software/server/seedbox/#configuration_4","text":"Open rclone configuration: 1 rclone config Select 'n' (new remote) Name: storage_box_crypt Storage Type: '7' (Encrypt/Decrypt a remote) \"crypt\" remote: /mnt/.nas Filename encryption: '2' (Encrypt the filenames see the docs for the details.) \"standard\" Encrypt directories: '1' (Encrypt directory names.) \"true\" Password: 'y' (Yes type in my own password) Salt: 'y' (Yes type in my own password) Confirm configuration: 'y' (Yes this is OK) Set configuration password: 's' Add Password: 'a' Quit to main menu: 'q' Quit configuration: 'q' Create mount point: 1 2 mkdir /mnt/nas && \\ chmod 444 /mnt/nas Mount rclone share: 1 ./mount.sh","title":"Configuration"},{"location":"software/server/znc_irc_bouncer/","text":"ZNC \u00b6 ZNC is an advanced IRC bouncer that is left connected so an IRC client can disconnect/reconnect without losing the chat session. OS: Ubuntu 18.04 LTS (Bionic Beaver) Initial Server setup \u00b6 Update System \u00b6 1 2 apt update && apt full-upgrade -y && \\ apt autoremove -y Make vim colored with dark background settings \u00b6 1 2 3 4 5 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF Fix locale \u00b6 1 2 3 4 5 6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF Edit .bashrc \u00b6 /root/.bashrc / /etc/skel/.bashrc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi Create a new user user \u00b6 1 2 3 4 5 6 7 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/ Change the SSH deamon to allow only SSH-keys \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF Delete root's authorized_keys file \u00b6 Attention Please check before if you can login to the user user with your ssh-key! 1 rm ~/.ssh/authorized_keys Important Log out and re login as user ! Install base packages \u00b6 1 2 3 4 5 6 7 8 9 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ zip \\ unzip \\ unrar \\ screen \\ tmux \\ htop Install ZNC \u00b6 You can find a detailed install instruction here: https://wiki.znc.in/Installation#Ubuntu Pre-requiemetns \u00b6 Install python-software-properties: 1 sudo apt install -y software-properties-common Create user for running znc: 1 sudo useradd -r -s /usr/sbin/nologin znc Create a config directory for znc: 1 2 3 sudo mkdir /etc/znc && \\ sudo chown znc:znc /etc/znc ; \\ sudo chmod 750 /etc/znc Install ZNC \u00b6 Add PPA and install: 1 2 3 sudo add-apt-repository ppa:teward/znc && \\ sudo apt update && \\ sudo apt install -y znc znc-dev znc-perl znc-python znc-tcl Configure ZNC \u00b6 1 sudo -u znc znc -c -d /etc/znc Configuration Options: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 [ .. ] Checking for list of available modules... [ ** ] [ ** ] -- Global settings -- [ ** ] [ ?? ] Listen on port (1025 to 65534): 6667 [ !! ] WARNING: Some web browsers reject port 6667. If you intend to [ !! ] use ZNC's web interface, you might want to use another port. [ ?? ] Proceed with port 6667 anyway? (yes/no) [yes]: [ ?? ] Listen using SSL (yes/no) [no]: yes [ ?? ] Listen using both IPv4 and IPv6 (yes/no) [yes]: [ .. ] Verifying the listener... [ ** ] Unable to locate pem file: [/etc/znc/znc.pem], creating it [ .. ] Writing Pem file [/etc/znc/znc.pem]... [ ** ] Enabled global modules [webadmin] [ ** ] [ ** ] -- Admin user settings -- [ ** ] [ ?? ] Username (alphanumeric): admin [ ?? ] Enter password: [ ?? ] Confirm password: [ ?? ] Nick [admin]: [ ?? ] Alternate nick [admin_]: [ ?? ] Ident [admin]: [ ?? ] Real name (optional): [ ?? ] Bind host (optional): [ ** ] Enabled user modules [chansaver, controlpanel] [ ** ] [ ?? ] Set up a network? (yes/no) [yes]: [ ** ] [ ** ] -- Network settings -- [ ** ] [ ?? ] Name [freenode]: [ ?? ] Server host [chat.freenode.net]: ^C user@znc /etc $ sudo -u znc znc -c -d /etc/znc [ .. ] Checking for list of available modules... [ ** ] [ ** ] -- Global settings -- [ ** ] [ ?? ] Listen on port (1025 to 65534): 6667 [ !! ] WARNING: Some web browsers reject port 6667. If you intend to [ !! ] use ZNC's web interface, you might want to use another port. [ ?? ] Proceed with port 6667 anyway? (yes/no) [yes]: [ ?? ] Listen using SSL (yes/no) [no]: yes [ ?? ] Listen using both IPv4 and IPv6 (yes/no) [yes]: [ .. ] Verifying the listener... [ ** ] Enabled global modules [webadmin] [ ** ] [ ** ] -- Admin user settings -- [ ** ] [ ?? ] Username (alphanumeric): admin [ ?? ] Enter password: [ ?? ] Confirm password: [ ?? ] Nick [admin]: [ ?? ] Alternate nick [admin_]: [ ?? ] Ident [admin]: [ ?? ] Real name (optional): [ ?? ] Bind host (optional): [ ** ] Enabled user modules [chansaver, controlpanel] [ ** ] [ ?? ] Set up a network? (yes/no) [yes]: no [ ** ] [ .. ] Writing config [/etc/znc/configs/znc.conf]... [ ** ] [ ** ] To connect to this ZNC you need to connect to it as your IRC server [ ** ] using the port that you supplied. You have to supply your login info [ ** ] as the IRC server password like this: user/network:pass. [ ** ] [ ** ] Try something like this in your IRC client... [ ** ] /server <znc_server_ip> +6667 admin:<pass> [ ** ] [ ** ] To manage settings, users and networks, point your web browser to [ ** ] https://<znc_server_ip>:6667/ [ ** ] [ ?? ] Launch ZNC now? (yes/no) [yes]: no ZNC service \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 cat << EOF | sudo tee /etc/systemd/system/znc.service && \\ sudo systemctl daemon-reload && \\ sudo systemctl enable znc [Unit] Description=ZNC, an advanced IRC bouncer After=network-online.target [Service] ExecStart=/usr/bin/znc -f --datadir=/etc/znc User=znc [Install] WantedBy=multi-user.target EOF Nginx \u00b6 Install \u00b6 Install all needed Packages for nginx tasks: 1 2 3 4 5 6 7 8 9 10 11 12 13 sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx Configure \u00b6 Delete default entry \u00b6 1 sudo rm /etc/nginx/sites-enabled/default Add ssl_params \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF General HTTP to HTTPS redirector \u00b6 This nginx entry will rewrite all traffic from HTTP to HTTPS. 1 2 3 4 5 6 7 8 9 10 read -r -d '' read_tmp<< \"EOF\" server { \\t listen 80 default_server ; \\t listen [ :: ] :80 default_server ; \\t server_name _ ; \\t return 301 https:// $host$request_uri ; } EOF echo -e \" $read_tmp \" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf ZNC web interface on Port 443 \u00b6 Add server directive for Portainer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-znc.mischaufen.de.conf && \\ sudo ln -s ../sites-available/10-znc.mischaufen.de.conf /etc/nginx/sites-enabled/10-znc.mischaufen.de.conf server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tznc.mischaufen.de; \\taccess_log\\t/var/log/nginx/znc.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/znc.mischaufen.de_error.log warn; \\tlocation / { \\t\\tproxy_pass\\t\\thttps://[::1]:6667/; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tproxy_set_header\\tX-Forwarded-For \\$proxy_add_x_forwarded_for; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. 1 2 3 sudo certbot --nginx -d znc.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/znc.mischaufen.de/chain.pem;' /etc/nginx/sites-available/10-znc.mischaufen.de.conf && \\ sudo systemctl reload nginx.service Add cronjob for renewing cetificates \u00b6 This cronjob renews the certificat and create one for znc. sudo crontab -e : 1 0 */12 * * * /usr/local/bin/certbot renew && cat /etc/letsencrypt/live/znc.mischaufen.de/{privkey,cert,chain}.pem > /etc/znc/znc.pem ZNC SSL config \u00b6 Initial copy of our let's encrypt certificates to znc \u00b6 1 sudo cat /etc/letsencrypt/live/znc.mischaufen.de/ { privkey,cert,chain } .pem | sudo tee /etc/znc/znc.pem Run ZNC for the 1 st time \u00b6 1 sudo systemctl start znc.service","title":"ZNC"},{"location":"software/server/znc_irc_bouncer/#znc","text":"ZNC is an advanced IRC bouncer that is left connected so an IRC client can disconnect/reconnect without losing the chat session. OS: Ubuntu 18.04 LTS (Bionic Beaver)","title":"ZNC"},{"location":"software/server/znc_irc_bouncer/#initial-server-setup","text":"","title":"Initial Server setup"},{"location":"software/server/znc_irc_bouncer/#update-system","text":"1 2 apt update && apt full-upgrade -y && \\ apt autoremove -y","title":"Update System"},{"location":"software/server/znc_irc_bouncer/#make-vim-colored-with-dark-background-settings","text":"1 2 3 4 5 cat << EOF >> /etc/vim/vimrc \" Set background to dark for better readability in SSH connections set background=dark EOF","title":"Make vim colored with dark background settings"},{"location":"software/server/znc_irc_bouncer/#fix-locale","text":"1 2 3 4 5 6 cat << EOF | sudo tee -a /etc/environment # Fix locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US:en EOF","title":"Fix locale"},{"location":"software/server/znc_irc_bouncer/#edit-bashrc","text":"/root/.bashrc / /etc/skel/.bashrc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 # ~/.bashrc: executed by bash(1) for non-login shells. # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc) # for examples # If not running interactively, don't do anything [ -z \"$PS1\" ] && return # don't put duplicate lines in the history. See bash(1) for more options # ... or force ignoredups and ignorespace HISTCONTROL=ignoredups:ignorespace # append to the history file, don't overwrite it shopt -s histappend # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=999999 HISTFILESIZE=999999 # check the window size after each command and, if necessary, # update the values of LINES and COLUMNS. shopt -s checkwinsize # make less more friendly for non-text input files, see lesspipe(1) [ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\" # set variable identifying the chroot you work in (used in the prompt below) if [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi # set a fancy prompt (non-color, unless we know we \"want\" color) case \"$TERM\" in xterm-color) color_prompt=yes;; esac # uncomment for a colored prompt, if the terminal has the capability; turned # off by default to not distract the user: the focus in a terminal window # should be on the output of commands, not on the prompt force_color_prompt=yes if [ -n \"$force_color_prompt\" ]; then if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then # We have color support; assume it's compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fi fi if [ \"$color_prompt\" = yes ]; then # PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ' if [ $UID == 0 ]; then PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' else PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u\\[\\033[01;33m\\]@\\[\\033[01;36m\\]\\h \\[\\033[01;33m\\]\\w \\[\\033[01;35m\\]\\$ \\[\\033[00m\\]' fi else PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case \"$TERM\" in xterm*|rxvt*) PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\" ;; *) ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\" alias ls='ls --color=auto' #alias dir='dir --color=auto' #alias vdir='vdir --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi # some more ls aliases alias ll='ls -alF' alias la='ls -A' alias l='ls -CF' # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi # enable programmable completion features (you don't need to enable # this, if it's already enabled in /etc/bash.bashrc and /etc/profile # sources /etc/bash.bashrc). #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then # . /etc/bash_completion #fi","title":"Edit .bashrc"},{"location":"software/server/znc_irc_bouncer/#create-a-new-user-user","text":"1 2 3 4 5 6 7 adduser user && \\ usermod -aG sudo user && \\ mkdir /home/user/.ssh && \\ chmod 700 /home/user/.ssh && \\ cp /root/.ssh/authorized_keys /home/user/.ssh/ && \\ chmod 400 /home/user/.ssh/authorized_keys && \\ chown -R user:user /home/user/.ssh/","title":"Create a new user user"},{"location":"software/server/znc_irc_bouncer/#change-the-ssh-deamon-to-allow-only-ssh-keys","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 cat << EOF > /etc/ssh/sshd_config && systemctl restart sshd.service # $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Port 22 AddressFamily any ListenAddress 0.0.0.0 ListenAddress :: HostKey /etc/ssh/ssh_host_rsa_key HostKey /etc/ssh/ssh_host_ecdsa_key HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin without-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 PubkeyAuthentication yes # Expect .ssh/authorized_keys2 to be disregarded by default in future. AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 #AuthorizedPrincipalsFile none #AuthorizedKeysCommand none #AuthorizedKeysCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no PermitEmptyPasswords no # Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication no # Kerberos options #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosGetAFSToken no # GSSAPI options #GSSAPIAuthentication no #GSSAPICleanupCredentials yes #GSSAPIStrictAcceptorCheck yes #GSSAPIKeyExchange no # Set this to 'yes' to enable PAM authentication, account processing, # and session processing. If this is enabled, PAM authentication will # be allowed through the ChallengeResponseAuthentication and # PasswordAuthentication. Depending on your PAM configuration, # PAM authentication via ChallengeResponseAuthentication may bypass # the setting of \"PermitRootLogin without-password\". # If you just want the PAM account and session checks to run without # PAM authentication, then enable this but set PasswordAuthentication # and ChallengeResponseAuthentication to 'no'. UsePAM yes #AllowAgentForwarding yes #AllowTcpForwarding yes #GatewayPorts no X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes PrintMotd no #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # Allow client to pass locale environment variables AcceptEnv LANG LC_* # override default of no subsystems Subsystem sftp /usr/lib/openssh/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server EOF","title":"Change the SSH deamon to allow only SSH-keys"},{"location":"software/server/znc_irc_bouncer/#delete-roots-authorized_keys-file","text":"Attention Please check before if you can login to the user user with your ssh-key! 1 rm ~/.ssh/authorized_keys Important Log out and re login as user !","title":"Delete root's authorized_keys file"},{"location":"software/server/znc_irc_bouncer/#install-base-packages","text":"1 2 3 4 5 6 7 8 9 sudo apt install -y \\ p7zip-full \\ p7zip-rar \\ zip \\ unzip \\ unrar \\ screen \\ tmux \\ htop","title":"Install base packages"},{"location":"software/server/znc_irc_bouncer/#install-znc","text":"You can find a detailed install instruction here: https://wiki.znc.in/Installation#Ubuntu","title":"Install ZNC"},{"location":"software/server/znc_irc_bouncer/#pre-requiemetns","text":"Install python-software-properties: 1 sudo apt install -y software-properties-common Create user for running znc: 1 sudo useradd -r -s /usr/sbin/nologin znc Create a config directory for znc: 1 2 3 sudo mkdir /etc/znc && \\ sudo chown znc:znc /etc/znc ; \\ sudo chmod 750 /etc/znc","title":"Pre-requiemetns"},{"location":"software/server/znc_irc_bouncer/#install-znc_1","text":"Add PPA and install: 1 2 3 sudo add-apt-repository ppa:teward/znc && \\ sudo apt update && \\ sudo apt install -y znc znc-dev znc-perl znc-python znc-tcl","title":"Install ZNC"},{"location":"software/server/znc_irc_bouncer/#configure-znc","text":"1 sudo -u znc znc -c -d /etc/znc Configuration Options: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 [ .. ] Checking for list of available modules... [ ** ] [ ** ] -- Global settings -- [ ** ] [ ?? ] Listen on port (1025 to 65534): 6667 [ !! ] WARNING: Some web browsers reject port 6667. If you intend to [ !! ] use ZNC's web interface, you might want to use another port. [ ?? ] Proceed with port 6667 anyway? (yes/no) [yes]: [ ?? ] Listen using SSL (yes/no) [no]: yes [ ?? ] Listen using both IPv4 and IPv6 (yes/no) [yes]: [ .. ] Verifying the listener... [ ** ] Unable to locate pem file: [/etc/znc/znc.pem], creating it [ .. ] Writing Pem file [/etc/znc/znc.pem]... [ ** ] Enabled global modules [webadmin] [ ** ] [ ** ] -- Admin user settings -- [ ** ] [ ?? ] Username (alphanumeric): admin [ ?? ] Enter password: [ ?? ] Confirm password: [ ?? ] Nick [admin]: [ ?? ] Alternate nick [admin_]: [ ?? ] Ident [admin]: [ ?? ] Real name (optional): [ ?? ] Bind host (optional): [ ** ] Enabled user modules [chansaver, controlpanel] [ ** ] [ ?? ] Set up a network? (yes/no) [yes]: [ ** ] [ ** ] -- Network settings -- [ ** ] [ ?? ] Name [freenode]: [ ?? ] Server host [chat.freenode.net]: ^C user@znc /etc $ sudo -u znc znc -c -d /etc/znc [ .. ] Checking for list of available modules... [ ** ] [ ** ] -- Global settings -- [ ** ] [ ?? ] Listen on port (1025 to 65534): 6667 [ !! ] WARNING: Some web browsers reject port 6667. If you intend to [ !! ] use ZNC's web interface, you might want to use another port. [ ?? ] Proceed with port 6667 anyway? (yes/no) [yes]: [ ?? ] Listen using SSL (yes/no) [no]: yes [ ?? ] Listen using both IPv4 and IPv6 (yes/no) [yes]: [ .. ] Verifying the listener... [ ** ] Enabled global modules [webadmin] [ ** ] [ ** ] -- Admin user settings -- [ ** ] [ ?? ] Username (alphanumeric): admin [ ?? ] Enter password: [ ?? ] Confirm password: [ ?? ] Nick [admin]: [ ?? ] Alternate nick [admin_]: [ ?? ] Ident [admin]: [ ?? ] Real name (optional): [ ?? ] Bind host (optional): [ ** ] Enabled user modules [chansaver, controlpanel] [ ** ] [ ?? ] Set up a network? (yes/no) [yes]: no [ ** ] [ .. ] Writing config [/etc/znc/configs/znc.conf]... [ ** ] [ ** ] To connect to this ZNC you need to connect to it as your IRC server [ ** ] using the port that you supplied. You have to supply your login info [ ** ] as the IRC server password like this: user/network:pass. [ ** ] [ ** ] Try something like this in your IRC client... [ ** ] /server <znc_server_ip> +6667 admin:<pass> [ ** ] [ ** ] To manage settings, users and networks, point your web browser to [ ** ] https://<znc_server_ip>:6667/ [ ** ] [ ?? ] Launch ZNC now? (yes/no) [yes]: no","title":"Configure ZNC"},{"location":"software/server/znc_irc_bouncer/#znc-service","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 cat << EOF | sudo tee /etc/systemd/system/znc.service && \\ sudo systemctl daemon-reload && \\ sudo systemctl enable znc [Unit] Description=ZNC, an advanced IRC bouncer After=network-online.target [Service] ExecStart=/usr/bin/znc -f --datadir=/etc/znc User=znc [Install] WantedBy=multi-user.target EOF","title":"ZNC service"},{"location":"software/server/znc_irc_bouncer/#nginx","text":"","title":"Nginx"},{"location":"software/server/znc_irc_bouncer/#install","text":"Install all needed Packages for nginx tasks: 1 2 3 4 5 6 7 8 9 10 11 12 13 sudo apt update && \\ sudo apt install -y \\ nginx \\ python3-pip && \\ sudo -H pip3 install --system --upgrade \\ pip && \\ sudo -H pip3 install --upgrade \\ cryptography && \\ sudo -H pip3 install --upgrade \\ setuptools && \\ sudo -H pip3 install \\ certbot \\ certbot-nginx","title":"Install"},{"location":"software/server/znc_irc_bouncer/#configure","text":"","title":"Configure"},{"location":"software/server/znc_irc_bouncer/#delete-default-entry","text":"1 sudo rm /etc/nginx/sites-enabled/default","title":"Delete default entry"},{"location":"software/server/znc_irc_bouncer/#add-ssl_params","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 cat << EOF | sudo tee /etc/nginx/ssl_params # Session settings ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # modern configuration. tweak to your needs. ssl_protocols TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; EOF","title":"Add ssl_params"},{"location":"software/server/znc_irc_bouncer/#general-http-to-https-redirector","text":"This nginx entry will rewrite all traffic from HTTP to HTTPS. 1 2 3 4 5 6 7 8 9 10 read -r -d '' read_tmp<< \"EOF\" server { \\t listen 80 default_server ; \\t listen [ :: ] :80 default_server ; \\t server_name _ ; \\t return 301 https:// $host$request_uri ; } EOF echo -e \" $read_tmp \" | sudo tee /etc/nginx/sites-available/99-https-rewrite.conf && \\ sudo ln -s ../sites-available/99-https-rewrite.conf /etc/nginx/sites-enabled/99-https-rewrite.conf","title":"General HTTP to HTTPS redirector"},{"location":"software/server/znc_irc_bouncer/#znc-web-interface-on-port-443","text":"Add server directive for Portainer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cat << EOF | sed 's/\\\\t/\\t/g' | sudo tee /etc/nginx/sites-available/10-znc.mischaufen.de.conf && \\ sudo ln -s ../sites-available/10-znc.mischaufen.de.conf /etc/nginx/sites-enabled/10-znc.mischaufen.de.conf server { \\tlisten\\t\\t443 ssl http2; \\tlisten\\t\\t[::]:443 ssl http2; \\tserver_name\\tznc.mischaufen.de; \\taccess_log\\t/var/log/nginx/znc.mischaufen.de_access.log combined gzip=9; \\terror_log\\t/var/log/nginx/znc.mischaufen.de_error.log warn; \\tlocation / { \\t\\tproxy_pass\\t\\thttps://[::1]:6667/; \\t\\tproxy_set_header\\tHost \\$host; \\t\\tproxy_set_header\\tX-Forwarded-Host \\$server_name; \\t\\tproxy_set_header\\tX-Forwarded-For \\$proxy_add_x_forwarded_for; \\t} \\tinclude\\t\\t/etc/nginx/ssl_params; } EOF Install a Let's encrypt SSL Certificate: Tip Don't add a redirect to HTTPS. 1 2 3 sudo certbot --nginx -d znc.mischaufen.de && \\ sudo sed -i '/ssl_certificate_key/a \\ \\ \\ \\ ssl_trusted_certificate /etc/letsencrypt/live/znc.mischaufen.de/chain.pem;' /etc/nginx/sites-available/10-znc.mischaufen.de.conf && \\ sudo systemctl reload nginx.service","title":"ZNC web interface on Port 443"},{"location":"software/server/znc_irc_bouncer/#add-cronjob-for-renewing-cetificates","text":"This cronjob renews the certificat and create one for znc. sudo crontab -e : 1 0 */12 * * * /usr/local/bin/certbot renew && cat /etc/letsencrypt/live/znc.mischaufen.de/{privkey,cert,chain}.pem > /etc/znc/znc.pem","title":"Add cronjob for renewing cetificates"},{"location":"software/server/znc_irc_bouncer/#znc-ssl-config","text":"","title":"ZNC SSL config"},{"location":"software/server/znc_irc_bouncer/#initial-copy-of-our-lets-encrypt-certificates-to-znc","text":"1 sudo cat /etc/letsencrypt/live/znc.mischaufen.de/ { privkey,cert,chain } .pem | sudo tee /etc/znc/znc.pem","title":"Initial copy of our let's encrypt certificates to znc"},{"location":"software/server/znc_irc_bouncer/#run-znc-for-the-1st-time","text":"1 sudo systemctl start znc.service","title":"Run ZNC for the 1st time"}]}